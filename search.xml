<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>1.0-集合框架概述</title>
      <link href="/2024/04/11/1-0-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E6%A6%82%E8%BF%B0/"/>
      <url>/2024/04/11/1-0-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Java集合框架体系"><a href="#Java集合框架体系" class="headerlink" title="Java集合框架体系"></a>Java集合框架体系</h1><p>java.util包下</p><blockquote><p><strong>java.util.Collection:存储一个一个的数据</strong></p></blockquote><ul><li><p>子接口：<code>List</code>：存储有序的，可重复的数据（”动态“数组）</p><ul><li><code>ArrayList</code>(主要实现类)、<code>LinkedList</code>、<code>Vector</code></li></ul></li><li><p>子接口：<code>Set</code>：存储无序的，不可重复的数据（高中集合）</p><ul><li><code>HashSet</code>（主要实现类）、<code>LinkedHashSet</code>、<code>TreeSet</code></li></ul></li></ul><blockquote><p><strong>java.util.Map:存储一对一对的数据（key-value键值对，类似函数y=f(x)，但是不同的key可以指向同一个value）</strong> </p></blockquote><ul><li><code>HashMap</code>（主要实现类）、<code>LinkedHashMap</code>、<code>TreeMap</code>、<code>Hashtable</code>、<code>Properties</code></li></ul><p>学习的程度把握：</p><ul><li>层次1：针对于具体特点的多个数据，知道选择相应的适合的接口的主要实现类，会实例化，会调用常用的方法</li><li>层次2：区分接口中不同的实现类的区别</li><li>层次3：①针对常用的实现类，需要熟悉底层的源码 ②熟悉常见的数据结构</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 集合 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring杂记</title>
      <link href="/2024/04/11/Spring%E6%9D%82%E8%AE%B01-0/"/>
      <url>/2024/04/11/Spring%E6%9D%82%E8%AE%B01-0/</url>
      
        <content type="html"><![CDATA[<h1 id="如何概述SpringFramework"><a href="#如何概述SpringFramework" class="headerlink" title="如何概述SpringFramework"></a>如何概述SpringFramework</h1><p>SpringFramework是一个开源的、松耦合的、分层的、可配置的一站式企业级Java开发框架，它的核心是IOC与AOP，它可以更容易的构建出企业级Java应用，并且它可以根据应用开发的组件需要，整合对应的技术</p><ul><li>加入松耦合的概念是为了描述IOC和AOP</li><li>加入可配置的概念是为了给SpringBoot垫底</li></ul><h1 id="为什么使用SpringFramework"><a href="#为什么使用SpringFramework" class="headerlink" title="为什么使用SpringFramework"></a>为什么使用SpringFramework</h1><ul><li>IOC：组件之间的解耦</li><li>AOP：切面编程可以将应用业务做统一或特定的功能增强，能实现应用业务与增强业务的解耦</li><li>容器与事件：管理应用中使用的组件Bean、托管Bean的生命周期、事件与监听器的驱动机制</li><li>Web、事务控制、测试、与其他技术的整合</li></ul><h1 id="依赖查找与依赖注入的对比"><a href="#依赖查找与依赖注入的对比" class="headerlink" title="依赖查找与依赖注入的对比"></a>依赖查找与依赖注入的对比</h1><ul><li>目标作用不同：<ul><li>依赖注入的作用目标通常是类成员</li><li>依赖查找的作用目标可以是方法体内，也可以是方法体外</li></ul></li><li>实现方式不同：<ul><li>依赖注入通常接著一个上下文被动的接收</li><li>以来查找通常主动使用上下文搜索</li></ul></li></ul><h1 id="BeanFactory与ApplicationContext的对比"><a href="#BeanFactory与ApplicationContext的对比" class="headerlink" title="BeanFactory与ApplicationContext的对比"></a>BeanFactory与ApplicationContext的对比</h1><p><code>BeanFactory</code>接口提供了一个<strong>抽象的配置和对象的管理机制</strong>，<code>ApplicationContext</code>是<code>BeanFactory</code>的子接口，它简化了与AOP的整合、消息机制、事件机制，以及与Web环境的扩展（<code>WebApplicationContext</code>等），<code>BeanFactory</code>是没有这些扩展的</p><p><code>ApplicationContext</code>主要扩展了一下功能：</p><ul><li>AOP的支持（<code>AnnotationAwareAspectJAutoProxyCreator</code>作用于Bean的初始化之后）</li><li>配置元信息（<code>BeanDefinition</code>、<code>Environment</code>、注解等）</li><li>资源管理（<code>Resource</code>抽象）</li><li>事件驱动机制（<code>ApplicationEvent</code>、<code>AppliactionListener</code>）</li><li>消息与国际化（<code>LocaleResolver</code>）</li><li><code>Environment</code>抽象（SpringFramework 3.1 以后）</li></ul><h1 id="Autowired注入的原理逻辑"><a href="#Autowired注入的原理逻辑" class="headerlink" title="@Autowired注入的原理逻辑"></a>@Autowired注入的原理逻辑</h1><p>先拿属性对应的类型，去IOC容器中找Bean，如果找到了一个，直接返回；如果找到多个类型一致的Bean，把属性名拿过去，跟这些Bean的id逐个对比，如果有一个相同的直接返回，如果没有任何相同的id与要注入的属性名相同，则会抛出<code>NoUniqueBeanDefinitionException</code>异常</p><h1 id="依赖注入的注入方式"><a href="#依赖注入的注入方式" class="headerlink" title="依赖注入的注入方式"></a>依赖注入的注入方式</h1><table><thead><tr><th>注入方式</th><th>被注入成员是否可变</th><th>是否依赖IOC框架的API</th><th>使用场景</th></tr></thead><tbody><tr><td>构造器注入</td><td>不可变</td><td>否（xml、编程式注入不依赖）</td><td>不可变的固定注入</td></tr><tr><td>参数注入</td><td>不可变</td><td>否（高版本中注解配置类中的<code>@Bean</code>方法参数注入可不标注注解）</td><td>注解配置类中<code>@Bean</code>方法注册bean</td></tr><tr><td>属性注入</td><td>不可变</td><td>是（只能通过标注注解来侵入式注入）</td><td>通常用于不可变的固定注入</td></tr><tr><td>setter注入</td><td>可变</td><td>否（xml、编程式注入不依赖）</td><td>可选属性的注入</td></tr></tbody></table><h1 id="自动注入的注解对比"><a href="#自动注入的注解对比" class="headerlink" title="自动注入的注解对比"></a>自动注入的注解对比</h1><table><thead><tr><th>注解</th><th>注入方式</th><th>是否支持@Primary</th><th>来源</th><th>Bean不存在时处理</th></tr></thead><tbody><tr><td>@Autowired</td><td>根据类型注入</td><td>是</td><td>SpringFramework原生注解</td><td>可指定required=false来避免注入失败</td></tr><tr><td>@Resource</td><td>根据名称注入</td><td>是</td><td>JSR250规范</td><td>容器中不存在指定Bean会抛出异常</td></tr><tr><td>@Inject</td><td>根据类型注入</td><td>是</td><td>JSR330规范（需要导入jar包）</td><td>容器中不存在指定Bean会抛出异常</td></tr></tbody></table><p><code>@Qualifier</code>：如果被标注的成员/方法在根据类型注入时发现有多个相同类型的Bean，则会根据该注解声明的name寻找特定的bean</p><p><code>@Primary</code>：如果有多个相同类型的Bean同时注册到IOC容器中，使用“根据类型注入”的注解时会注入标注<code>@Primary</code>注解的Bean</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面试 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原型模式</title>
      <link href="/2024/04/11/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2024/04/11/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><blockquote><p>用于创建重复的对象，同时保证性能。实现了一个原型接口，该接口用于创建当前对象的克隆，当直接创建对象的代价比较大的时候，则采用这种模式。即用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p></blockquote><blockquote><p><strong>解决了什么？</strong></p><p>在运行期间建立和删除原型</p><p><strong>什么时候使用？</strong></p><ol><li>当一个系统应该独立于它的产品创建，构成和表示时</li><li>当要实例化的类是在运行时刻指定时，例如动态装载</li><li>为了避免创建一个与产品类层次平行的工厂类层次时</li><li>当一个类的实例只能由几个不同状态组合中的一种时，建立相应数目的原型并克隆他们可能比每次用适合的状态手工实例化该类更方便</li></ol><p><strong>怎么实现？</strong></p><p>利用已有的原型，快速生成和原型对象一样的实例</p></blockquote><blockquote><p><strong>优点</strong></p><ol><li>性能提高</li><li>避免构造函数的约束</li></ol><p><strong>缺点</strong></p><ol><li>配备克隆方法需要对类的功能进行通盘考虑，这对于全新的类不是很难，但对于已有的类不一定很容易，特别当一个类引用不支持串行化的简介对象，或者引用含有循环结构的时候</li><li>必须实现Cloneable接口</li></ol></blockquote><blockquote><p><strong>使用场景</strong></p><ol><li>资源优化场景</li><li>类初始化需要消化非常多的资源，包括数据、硬件资源等</li><li>性能和安全要求的场景</li><li>通过new产生一个对象非常需要繁琐的数据准备或访问权限</li><li>一个对象多个修改者的场景</li><li>一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用</li><li>在实际项目中原型模式很少单独出现，一般和工厂模式一起出现，通过clone方法创建一个对象，然后又工厂提供给调用者</li></ol></blockquote><blockquote><p><strong>Considerations</strong></p><p>与通过一个类进行实例化来构造新对象不同的是，原型模式是通过拷贝一个现有对象生成新对象的。浅拷贝实现Cloneable，重写，深拷贝是通过实现Serializable读取二进制流</p></blockquote><blockquote><p><strong>代码</strong></p><p>创建Shape抽象类，并实现Cloneable接口重写clone方法，使得每一个继承Shape类的类都可以使用clone方法</p><p>Shape.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>       <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>       <span class="token keyword">protected</span> <span class="token class-name">String</span> type<span class="token punctuation">;</span>       <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> type<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> id<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token class-name">Object</span> clone <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>       <span class="token keyword">try</span> <span class="token punctuation">{</span>       clone <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>       e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span> clone<span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建继承Shape抽象类的类</p><p>Rectangle.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       type <span class="token operator">=</span> <span class="token string">"Rectangle"</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"This is Rectangle::draw() method."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Circle.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       type <span class="token operator">=</span> <span class="token string">"Circle"</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"This is Circle::draw() method."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Square.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       type <span class="token operator">=</span> <span class="token string">"Square"</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"This is Square::draw() method."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><blockquote><p>创建一个类，从数据库中查询出实体类，并把它们存入Hashtable中</p><p>ShapeCache.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Hashtable</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShapeCache</span> <span class="token punctuation">{</span>       <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Hashtable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Shape</span><span class="token punctuation">&gt;</span></span> shapeMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hashtable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Shape</span> <span class="token function">getShape</span><span class="token punctuation">(</span><span class="token class-name">String</span> shapeId<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Shape</span><span class="token punctuation">)</span> shapeMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>shapeId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token comment">//对每种形状都运行数据库查询，并创建该形状</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">loadCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token class-name">Circle</span> circle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           circle<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           shapeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>circle<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> circle<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">Square</span> square <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           square<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           shapeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>square<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> square<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">Rectangle</span> rectangle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           rectangle<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           shapeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>rectangle<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rectangle<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><blockquote><p><strong>测试代码</strong></p><p>PrototypePatternDemo.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrototypePatternDemo</span> <span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment">//先加载，从数据库中查询出所有的形状</span>           <span class="token class-name">ShapeCache</span><span class="token punctuation">.</span><span class="token function">loadCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//查出来的并不是直接获取形状的实体类，而是其克隆的类</span>           <span class="token class-name">Shape</span> cloneShape <span class="token operator">=</span> <span class="token class-name">ShapeCache</span><span class="token punctuation">.</span><span class="token function">getShape</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Shape: "</span> <span class="token operator">+</span> cloneShape<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           cloneShape<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">Shape</span> cloneShape2 <span class="token operator">=</span> <span class="token class-name">ShapeCache</span><span class="token punctuation">.</span><span class="token function">getShape</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Shape: "</span> <span class="token operator">+</span> cloneShape2<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           cloneShape2<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">Shape</span> cloneShape3 <span class="token operator">=</span> <span class="token class-name">ShapeCache</span><span class="token punctuation">.</span><span class="token function">getShape</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Shape: "</span> <span class="token operator">+</span> cloneShape3<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           cloneShape3<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><blockquote><p><strong>运行结果</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202403171114744.png" alt="image-20240317111445667"> </p></blockquote><blockquote><p>UML类图</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202403171128624.png" alt="image-20240317112813576"> </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 创建型模式 </tag>
            
            <tag> 原型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ</title>
      <link href="/2024/04/11/RocketMQ/"/>
      <url>/2024/04/11/RocketMQ/</url>
      
        <content type="html"><![CDATA[<h1 id="发送一条消息"><a href="#发送一条消息" class="headerlink" title="发送一条消息"></a>发送一条消息</h1><ol><li><p>创建一个demo文件夹</p></li><li><p>创建ASimpleTest.java，pom包导入junit，用@Test的测试单例去模拟启动生产者和消费者</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404110936430.png" alt="image-20240411093540868"> </p></li><li><p>将RocketMQ在的服务器ip单独抽离，后面会重复使用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MqConstant</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> <span class="token constant">NAME_SRV_ADDR</span> <span class="token operator">=</span> <span class="token string">"192.168.183.131:9876"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>生产者</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 生产者</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">simpleProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token comment">// 创建一个生产者并指定组名</span>    <span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">"test-producer-group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 连接namesrv</span>    producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">MqConstant</span><span class="token punctuation">.</span><span class="token constant">NAME_SRV_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 启动</span>    producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建一个消息</span>        <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"testTopic"</span><span class="token punctuation">,</span> <span class="token string">"我是一条简单的消息"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 发送消息</span>        <span class="token class-name">SendResult</span> sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sendResult<span class="token punctuation">.</span><span class="token function">getSendStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 关闭生产者</span>    producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>消费者</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 消费者</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">simpleConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token comment">// 不管是push还是pull，底层都是pull模式，通过长轮询的方案实现</span>    <span class="token comment">// 创建一个消费者</span>    <span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">"test-consumer-group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        DefaultMQPullConsumer pullConsumer = new DefaultMQPullConsumer("test-consumer-group");</span>    <span class="token comment">// 连接namesrv</span>    consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">MqConstant</span><span class="token punctuation">.</span><span class="token constant">NAME_SRV_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 订阅一个主题   * 表示订阅这个主题中所有的消息，后期会有消息过滤</span>    consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"testTopic"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置消息监听器（一直监听，异步回调方式）</span>    consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">ConsumeConcurrentlyStatus</span> <span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">ConsumeConcurrentlyContext</span> consumeConcurrentlyContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 这个就是消费的方法（业务处理）</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是消费者"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费的上下文："</span> <span class="token operator">+</span> consumeConcurrentlyContext<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 返回值 CONSUME_SUCCESS成功，表示消息会从mq出队，</span>            <span class="token comment">// RECONSUME_LATER（报错/null）失败，消息会重新回到mq队列，过一会重新投递出来，给当前消费者或者其他消费者消费</span>            <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span><span class="token constant">CONSUME_SUCCESS</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 启动</span>    consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 挂起当前的jvm</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="发送一条异步消息"><a href="#发送一条异步消息" class="headerlink" title="发送一条异步消息"></a>发送一条异步消息</h1><ol><li><p>BSyncTest.java中添加生产异步消息的生产者</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404111001521.png" alt="image-20240411100121420"> </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">asyncProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">"async-producer-group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">MqConstant</span><span class="token punctuation">.</span><span class="token constant">NAME_SRV_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"asyncTopic"</span><span class="token punctuation">,</span> <span class="token string">"我是一条异步消息"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SendCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token class-name">SendResult</span> sendResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发送成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onException</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发送失败"</span> <span class="token operator">+</span> throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"先执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="发送一条单向消息"><a href="#发送一条单向消息" class="headerlink" title="发送一条单向消息"></a>发送一条单向消息</h1><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404111001159.png" alt="image-20240411100153991"> </p><p>生产者</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onewayProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">"oneway-producer-group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">MqConstant</span><span class="token punctuation">.</span><span class="token constant">NAME_SRV_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"onewayTopic"</span><span class="token punctuation">,</span> <span class="token string">"日志xxx"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">sendOneway</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成功发送一条单向消息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>消费者</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 消费者</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onewayConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token comment">// 不管是push还是pull，底层都是pull模式，通过长轮询的方案实现</span>    <span class="token comment">// 创建一个消费者</span>    <span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">"oneway-consumer-group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        DefaultMQPullConsumer pullConsumer = new DefaultMQPullConsumer("test-consumer-group");</span>    <span class="token comment">// 连接namesrv</span>    consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">MqConstant</span><span class="token punctuation">.</span><span class="token constant">NAME_SRV_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 订阅一个主题   * 表示订阅这个主题中所有的消息，后期会有消息过滤</span>    consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"onewayTopic"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置消息监听器（一直监听，异步回调方式）</span>    consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">ConsumeConcurrentlyStatus</span> <span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">ConsumeConcurrentlyContext</span> consumeConcurrentlyContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 这个就是消费的方法（业务处理）</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是消费者"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费的上下文："</span> <span class="token operator">+</span> consumeConcurrentlyContext<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 返回值 CONSUME_SUCCESS成功，表示消息会从mq出队，</span>            <span class="token comment">// RECONSUME_LATER（报错/null）失败，消息会重新回到mq队列，过一会重新投递出来，给当前消费者或者其他消费者消费</span>            <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span><span class="token constant">CONSUME_SUCCESS</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 启动</span>    consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 挂起当前的jvm</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="发送一条延迟消息"><a href="#发送一条延迟消息" class="headerlink" title="发送一条延迟消息"></a>发送一条延迟消息</h1><p><code>message.setDelayTimeLevel(3);</code>：</p><p>给消息设置一个延迟等级（一共有十八个等级）</p><p>1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h</p><p>生产者</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 生产者</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">msProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">"ms-producer-group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">MqConstant</span><span class="token punctuation">.</span><span class="token constant">NAME_SRV_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"orderMsTopic"</span><span class="token punctuation">,</span> <span class="token string">"订单号， 座位号"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 给消息设置一个延迟等级（一共有十八个等级）</span>    <span class="token comment">// 1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h</span>    message<span class="token punctuation">.</span><span class="token function">setDelayTimeLevel</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>消费者</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 消费者</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">msConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">"ms-consumer-group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">MqConstant</span><span class="token punctuation">.</span><span class="token constant">NAME_SRV_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"orderMsTopic"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">ConsumeConcurrentlyStatus</span> <span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">ConsumeConcurrentlyContext</span> consumeConcurrentlyContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 消费的方法</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是消费者"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费的上下文："</span> <span class="token operator">+</span> consumeConcurrentlyContext<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span><span class="token constant">CONSUME_SUCCESS</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="发送一组消息"><a href="#发送一组消息" class="headerlink" title="发送一组消息"></a>发送一组消息</h1><p>生产者</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBatchProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">"batch-producer-group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">MqConstant</span><span class="token punctuation">.</span><span class="token constant">NAME_SRV_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&gt;</span></span> messages <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"BatchTopic"</span><span class="token punctuation">,</span> <span class="token string">"一组消息里的A消息"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"BatchTopic"</span><span class="token punctuation">,</span> <span class="token string">"一组消息里的B消息"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"BatchTopic"</span><span class="token punctuation">,</span> <span class="token string">"一组消息里的C消息"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"BatchTopic"</span><span class="token punctuation">,</span> <span class="token string">"一组消息里的D消息"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SendResult</span> sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>messages<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sendResult<span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>消息监听里<code>MessageListenerConcurrently</code>是并发模式，多线程的，失败了会重试16次</p><p>消费者</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBatchConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">"batch-consumer-group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">MqConstant</span><span class="token punctuation">.</span><span class="token constant">NAME_SRV_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"BatchTopic"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">ConsumeConcurrentlyStatus</span> <span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">ConsumeConcurrentlyContext</span> consumeConcurrentlyContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 这里执行消费的代码，默认是多线程消费</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"----"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span><span class="token constant">CONSUME_SUCCESS</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="发送顺序消息"><a href="#发送顺序消息" class="headerlink" title="发送顺序消息"></a>发送顺序消息</h1><p>在发送消息的时候要按顺序发送</p><p>定义一个MsgModel</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404111020147.png" alt="image-20240411102057125"> </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MsgModel</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> orderSn<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> userId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span><span class="token comment">// 下单 短信 物流</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>yml配置连接数据库：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>    <span class="token key atrule">datasource</span><span class="token punctuation">:</span>        <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver        <span class="token key atrule">username</span><span class="token punctuation">:</span> root        <span class="token key atrule">password</span><span class="token punctuation">:</span> Hzx492357816        <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/rcktest<span class="token punctuation">?</span>serverTimezone=GMT%2B8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mysql数据库</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404111046650.png" alt="image-20240411104617625"> </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/* Navicat Premium Data Transfer Source Server         : localhost Source Server Type    : MySQL Source Server Version : 80031 Source Host           : localhost:3306 Source Schema         : rcktest Target Server Type    : MySQL Target Server Version : 80031 File Encoding         : 65001 Date: 11/04/2024 10:46:34*/</span><span class="token keyword">SET</span> NAMES utf8mb4<span class="token punctuation">;</span><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Table structure for order_oper_log</span><span class="token comment">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>order_oper_log<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>order_oper_log<span class="token punctuation">`</span></span>  <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'id'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>type<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb3 <span class="token keyword">COLLATE</span> utf8mb3_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>order_sn<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb3 <span class="token keyword">COLLATE</span> utf8mb3_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>user<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb3 <span class="token keyword">COLLATE</span> utf8mb3_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">,</span>  <span class="token keyword">UNIQUE</span> <span class="token keyword">INDEX</span> <span class="token identifier"><span class="token punctuation">`</span>order_unique_sn<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>order_sn<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">29</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> utf8mb3 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8mb3_general_ci ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Records of order_oper_log</span><span class="token comment">-- ----------------------------</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>order_oper_log<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">,</span> <span class="token string">'111'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>order_oper_log<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'60f0e378-698e-45f5-ba5d-ef2c08efb9b7'</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>order_oper_log<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'80a2aecd-ec6e-4f09-a186-579ebd221bba'</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>order_oper_log<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'e245548f-0e28-4f28-bc9f-1fa3f298dfac'</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>order_oper_log<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'3eaf357a-c753-4057-8b88-e7738eb37b48'</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生产者：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">orderlyProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">"orderly-producer-group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">MqConstant</span><span class="token punctuation">.</span><span class="token constant">NAME_SRV_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 发送顺序消息 发送时要确保有序 并且要发到同一个队列里面</span>    msgModels<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>msgModel <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"orderlyTopic"</span><span class="token punctuation">,</span> msgModel<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 发 相同的订单号去相同的队列</span>            producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MessageQueueSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token class-name">MessageQueue</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">&gt;</span></span> mqs<span class="token punctuation">,</span> <span class="token class-name">Message</span> msg<span class="token punctuation">,</span> <span class="token class-name">Object</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// 选择队列</span>                    <span class="token keyword">int</span> hashCode <span class="token operator">=</span> arg<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 取模</span>                    <span class="token keyword">int</span> i <span class="token operator">=</span> hashCode <span class="token operator">%</span> mqs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> mqs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> msgModel<span class="token punctuation">.</span><span class="token function">getOrderSn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发送完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>消费者</p><p>将消息监听设置为<code>MessageListenerOrderly</code>单线程消费</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">orderlyConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">"orderly-consumer-group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">MqConstant</span><span class="token punctuation">.</span><span class="token constant">NAME_SRV_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"orderlyTopic"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// MessageListenerConcurrently 并发模式 多线程的 重试16次</span>    <span class="token comment">// MessageListenerOrderly 顺序模式 单线程</span>    consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerOrderly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">ConsumeOrderlyStatus</span> <span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">ConsumeOrderlyContext</span> consumeOrderlyContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程id: "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">ConsumeOrderlyStatus</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="发送带Tag的消息"><a href="#发送带Tag的消息" class="headerlink" title="发送带Tag的消息"></a>发送带Tag的消息</h1><p>生产者</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 生产者</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tagProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">"tag-producer-group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">MqConstant</span><span class="token punctuation">.</span><span class="token constant">NAME_SRV_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Message</span> message1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"tagTopic"</span><span class="token punctuation">,</span> <span class="token string">"vip1"</span><span class="token punctuation">,</span> <span class="token string">"我是v1的文章"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Message</span> message2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"tagTopic"</span><span class="token punctuation">,</span> <span class="token string">"vip2"</span><span class="token punctuation">,</span> <span class="token string">"我是v2的文章"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message1<span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发送成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>消费者在消费消息的时候可以加入过滤，指定哪些带了tag的消息会被消费，哪些不会</p><p>消费者消费tag为vip1的消息</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 消费者 vip1</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tagConsumer1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">"tag-consumer-group-a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">MqConstant</span><span class="token punctuation">.</span><span class="token constant">NAME_SRV_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"tagTopic"</span><span class="token punctuation">,</span> <span class="token string">"vip1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">ConsumeConcurrentlyStatus</span> <span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">ConsumeConcurrentlyContext</span> consumeConcurrentlyContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是vip1的消费者"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span><span class="token constant">CONSUME_SUCCESS</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>消费者消费vip1和vip2的消息</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 消费者 vip2</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tagConsumer2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">"tag-consumer-group-b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">MqConstant</span><span class="token punctuation">.</span><span class="token constant">NAME_SRV_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// String[] tags = subString.split("\\|\\|"); 源码里面是通过||区分标签的</span>    consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"tagTopic"</span><span class="token punctuation">,</span> <span class="token string">"vip1 || vip2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">ConsumeConcurrentlyStatus</span> <span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">ConsumeConcurrentlyContext</span> consumeConcurrentlyContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是vip2的消费者"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span><span class="token constant">CONSUME_SUCCESS</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="发送带Key的消息"><a href="#发送带Key的消息" class="headerlink" title="发送带Key的消息"></a>发送带Key的消息</h1><p>自定义唯一Key<code>String key = UUID.randomUUID().toString();</code></p><p>生产者</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Key 业务参数 我们自身要确保唯一 * 为了查阅和去重 * @throws Exception */</span><span class="token comment">// 生产者</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">keyProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">"key-producer-group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">MqConstant</span><span class="token punctuation">.</span><span class="token constant">NAME_SRV_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"keyTopic"</span><span class="token punctuation">,</span> <span class="token string">"vip1"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token string">"我是vip1的文章"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发送成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>消费者</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 消费者</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">keyConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">"key-consumer-gruop"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">MqConstant</span><span class="token punctuation">.</span><span class="token constant">NAME_SRV_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"keyTopic"</span><span class="token punctuation">,</span> <span class="token string">"vip1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">ConsumeConcurrentlyStatus</span> <span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">ConsumeConcurrentlyContext</span> consumeConcurrentlyContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">MessageExt</span> messageExt <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是keyTopic的vip1消费者"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>messageExt<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"业务的标识: "</span> <span class="token operator">+</span> messageExt<span class="token punctuation">.</span><span class="token function">getKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span><span class="token constant">CONSUME_SUCCESS</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="消息重试"><a href="#消息重试" class="headerlink" title="消息重试"></a>消息重试</h1><p>生产者</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 生产者 * @throws Exception */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">retryProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">"retry-producer-group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">MqConstant</span><span class="token punctuation">.</span><span class="token constant">NAME_SRV_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 生产者发送消息 重试次数</span>    producer<span class="token punctuation">.</span><span class="token function">setRetryTimesWhenSendFailed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">setRetryTimesWhenSendAsyncFailed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"retryTopic"</span><span class="token punctuation">,</span> <span class="token string">"vip1"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token string">"我是vip1的文章"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发送成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>  消息重试的时间是根据延迟等级来推进的</p><p>  1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h</p><ul><li>延迟等级（一共有十八个等级）</li><li>默认重试16次</li><li>1.能否自定义重试次数？</li><li>2.如果重试了16次（并发模式）顺序模式下（int最大值次）还是失败？是一个死信消息 则会放在一个死信主题中去：%DLQ%retry-consumer-group</li><li>3.当消息处理失败的时候，该如何正确的处理？</li></ul></blockquote><p>消费者</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 消息重试的时间是根据延迟等级来推进的 * 1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h * 延迟等级（一共有十八个等级） * 默认重试16次 * 1.能否自定义重试次数？ * 2.如果重试了16次（并发模式）顺序模式下（int最大值次）还是失败？是一个死信消息 则会放在一个死信主题中去：%DLQ%retry-consumer-group * 3.当消息处理失败的时候，该如何正确的处理？ * @throws Exception */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">retryConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">"retry-consumer-group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">MqConstant</span><span class="token punctuation">.</span><span class="token constant">NAME_SRV_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"retryTopic"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设定重试次数</span>    consumer<span class="token punctuation">.</span><span class="token function">setMaxReconsumeTimes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">ConsumeConcurrentlyStatus</span> <span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">ConsumeConcurrentlyContext</span> consumeConcurrentlyContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">MessageExt</span> messageExt <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>messageExt<span class="token punctuation">.</span><span class="token function">getReconsumeTimes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>messageExt<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 业务报错 返回null 返回RECONSUME_LATER 都会重试</span>            <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span><span class="token constant">RECONSUME_LATER</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>消费者自定义重试次数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * * @throws Exception */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">retryDeadConsumer2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">"retry-dead-consumer-group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">MqConstant</span><span class="token punctuation">.</span><span class="token constant">NAME_SRV_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"retryTopic"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设定重试次数</span>    consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">ConsumeConcurrentlyStatus</span> <span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">ConsumeConcurrentlyContext</span> consumeConcurrentlyContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">MessageExt</span> messageExt <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 业务处理</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment">// 对业务处理的代码进行try-catch</span>                <span class="token function">handleDb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 重试</span>                <span class="token keyword">int</span> reconsumeTimes <span class="token operator">=</span> messageExt<span class="token punctuation">.</span><span class="token function">getReconsumeTimes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>reconsumeTimes <span class="token operator">&gt;=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// 重试到一定次数就不要重试了</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通知人工接入处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span><span class="token constant">CONSUME_SUCCESS</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span><span class="token constant">RECONSUME_LATER</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span><span class="token constant">CONSUME_SUCCESS</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleDb</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="消费死信队列"><a href="#消费死信队列" class="headerlink" title="消费死信队列"></a>消费死信队列</h1><p>死信队列topic：<code>%DLQ%retry-consumer-group</code></p><p>消费者</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 消费死信队列的消费者 * 直接监听死信主题的消息，记录并通知人工接入处理 * @throws Exception */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">retryDeadConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">"retry-dead-consumer-group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">MqConstant</span><span class="token punctuation">.</span><span class="token constant">NAME_SRV_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"%DLQ%retry-consumer-group"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设定重试次数</span>    consumer<span class="token punctuation">.</span><span class="token function">setMaxReconsumeTimes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">ConsumeConcurrentlyStatus</span> <span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">ConsumeConcurrentlyContext</span> consumeConcurrentlyContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">MessageExt</span> messageExt <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通知人工接入处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>messageExt<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span><span class="token constant">CONSUME_SUCCESS</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> RocketMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> RocketMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>友链头像</title>
      <link href="/2024/04/10/%E5%8F%8B%E9%93%BE%E5%A4%B4%E5%83%8F/"/>
      <url>/2024/04/10/%E5%8F%8B%E9%93%BE%E5%A4%B4%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404100951218.png"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"爱划水的鸟"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"这个人很懒，什么都没留下~ (´・ω・`)"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://xenenen.top"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404100951218.png" alt="66883941ec6b1cec8f6ae2095d1397b"></p>]]></content>
      
      
      <categories>
          
          <category> avatar </category>
          
      </categories>
      
      
        <tags>
            
            <tag> avatar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>live2d</title>
      <link href="/2024/04/09/live2d/"/>
      <url>/2024/04/09/live2d/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/live2d/css/live2d.css<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>landlord<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>live2d<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>280<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>250<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>live2d<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hide-button<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>隐藏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/jquery/2.2.4/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> message_Path <span class="token operator">=</span> <span class="token string">'/live2d/'</span>    <span class="token keyword">var</span> home_Path <span class="token operator">=</span> <span class="token string">'https://qetuop91.github.io/'</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/live2d/js/live2d.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/live2d/js/message.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">loadlive2d</span><span class="token punctuation">(</span><span class="token string">"live2d"</span><span class="token punctuation">,</span> <span class="token string">"/live2d/model/tia/model.json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// loadlive2d("live2d", "/live2d/model/nn/nn.model3.json");</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> live2d </category>
          
      </categories>
      
      
        <tags>
            
            <tag> live2d </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建造者模式</title>
      <link href="/2024/04/09/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2024/04/09/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h1><blockquote><p>使用多个简单的对象一步一步构建成一个复杂的对象。将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示</p></blockquote><blockquote><p><strong>解决了什么？</strong></p><p>一个复杂对象的创建工作，通常由各个部分的子对象用一定的算法构成，由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将他们组合在一起的算法相对稳定。</p><p><strong>什么时候使用？</strong></p><p>一些基本部件不会变，而其组合经常变化的时候</p><p><strong>怎么实现？</strong></p><p>将变和不变分离开</p></blockquote><blockquote><p><strong>优点</strong></p><ul><li>分离构建过程和表示，使得构建过程更加灵活，可以构建不同的表示</li><li>可以更好地控制和构建过程，隐藏具体构建细节</li><li>代码复用性高，可以在不同的构建过程中重复使用相同的构建者</li></ul></blockquote><blockquote><p><strong>缺点</strong></p><ul><li>如果产品的属性较少，建造者模式可能会导致代码冗余</li><li>建造者模式增加了系统的类和对象数量</li></ul></blockquote><blockquote><p><strong>使用场景</strong></p><ol><li>需要生成的对象具有复杂的内部结构</li><li>需要生成的对象内部属性本身互相依赖</li></ol></blockquote><blockquote><p><strong>Considerations</strong></p><p>与工厂模式的区别是，建造者模式更加关注与零件装配的顺序</p></blockquote><p><strong>代码</strong></p><p>“基类”</p><p>Item.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 一个Item需要由食品名、打包方式、价格构成</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Item</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Packing</span> <span class="token function">packing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Packing.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 打包方式会根据不同的食品进行区分，所以并不在这里进行实现，而是定义接口，等到具体情况再进行区分实现</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Packing</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">pack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Meal.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token comment">// 菜单类，需要有添加菜品、计算总价、展示价格单的功能</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Meal</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">&gt;</span></span> items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addItem</span><span class="token punctuation">(</span><span class="token class-name">Item</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>      items<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">getCost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">float</span> cost <span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Item</span> item <span class="token operator">:</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>          cost <span class="token operator">+=</span> item<span class="token punctuation">.</span><span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> cost<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Item</span> item <span class="token operator">:</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Item: "</span> <span class="token operator">+</span> item<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Packing: "</span> <span class="token operator">+</span> item<span class="token punctuation">.</span><span class="token function">packing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Price: "</span> <span class="token operator">+</span> item<span class="token punctuation">.</span><span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据不同的打包方式实现Packing</p><p>Bottle.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 食物打包方式（装冷饮用的Bottle）</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bottle</span> <span class="token keyword">implements</span> <span class="token class-name">Packing</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">pack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Bottle"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Wrapper.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 食物的打包方式（装汉堡的包装纸）</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Wrapper</span> <span class="token keyword">implements</span> <span class="token class-name">Packing</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">pack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Wrapper"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现Item接口的子类（冷饮套餐和食物套餐）</p><p>ColdDrink.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 冷饮套餐，需要有打包方式及价格</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ColdDrink</span> <span class="token keyword">implements</span> <span class="token class-name">Item</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Packing</span> <span class="token function">packing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Bottle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">float</span> <span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Burger.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 汉堡套餐（需要有打包方式和价格）</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Burger</span> <span class="token keyword">implements</span> <span class="token class-name">Item</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Packing</span> <span class="token function">packing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Wrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">float</span> <span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体的食物类</p><p>VegBurger.java（继承Burger类）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 蔬菜汉堡，汉堡下的分类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VegBurger</span>  <span class="token keyword">extends</span> <span class="token class-name">Burger</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"Veg Burger"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">25.0f</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ChickenBurger.java（继承Burger类）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 鸡肉汉堡，汉堡下的分类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChickenBurger</span> <span class="token keyword">extends</span> <span class="token class-name">Burger</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"Chicken Burger"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">50.5f</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Coke.java（继承ColdDrink类）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 可口可乐，冷饮下的分类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Coke</span> <span class="token keyword">extends</span> <span class="token class-name">ColdDrink</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"Coke"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">30.0f</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Pepsi.java（继承ColdDrink类）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 百事可乐，冷饮下的分类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pepsi</span> <span class="token keyword">extends</span> <span class="token class-name">ColdDrink</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"Pepsi"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">30.0f</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构建套餐</p><p>MealBuilder.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 构建菜单类，用户并不实际使用Meal类，而是使用MealBuilder类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MealBuilder</span> <span class="token punctuation">{</span>    <span class="token comment">// 素菜套餐</span>    <span class="token keyword">public</span> <span class="token class-name">Meal</span> <span class="token function">prepareVegMeal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Meal</span> meal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Meal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        meal<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VegBurger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        meal<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Coke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> meal<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 非素套餐</span>    <span class="token keyword">public</span> <span class="token class-name">Meal</span> <span class="token function">prepareNonVegMeal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Meal</span> meal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Meal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        meal<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChickenBurger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        meal<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pepsi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> meal<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Meal</span> <span class="token function">prepareAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Meal</span> meal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Meal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        meal<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VegBurger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        meal<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChickenBurger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        meal<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Coke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        meal<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pepsi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> meal<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试代码</p><p>BuilderPatternDemo.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BuilderPatternDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 调用已经创建好的菜单，而不是自己去创建菜单</span>        <span class="token class-name">MealBuilder</span> mealBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MealBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 从已有菜单中获取素菜套餐</span>        <span class="token class-name">Meal</span> vegMeal <span class="token operator">=</span> mealBuilder<span class="token punctuation">.</span><span class="token function">prepareVegMeal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Veg Meal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Meal类里写了展示菜单的方法</span>        vegMeal<span class="token punctuation">.</span><span class="token function">showItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Total Cost: "</span> <span class="token operator">+</span> vegMeal<span class="token punctuation">.</span><span class="token function">getCost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 从已有菜单中获取非素套餐</span>        <span class="token class-name">Meal</span> nonVegMeal <span class="token operator">=</span> mealBuilder<span class="token punctuation">.</span><span class="token function">prepareNonVegMeal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Non Veg Meal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Meal类里写了展示菜单的方法</span>        nonVegMeal<span class="token punctuation">.</span><span class="token function">showItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Total Cost: "</span> <span class="token operator">+</span> nonVegMeal<span class="token punctuation">.</span><span class="token function">getCost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取全部套餐</span>        <span class="token class-name">Meal</span> allMeal <span class="token operator">=</span> mealBuilder<span class="token punctuation">.</span><span class="token function">prepareAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"All Meal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        allMeal<span class="token punctuation">.</span><span class="token function">showItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Total Cost: "</span> <span class="token operator">+</span> allMeal<span class="token punctuation">.</span><span class="token function">getCost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202403161130758.png" alt="image-20240316113012698"> </p><p>UML类图</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202403161111423.png" alt="image-20240316111146323"> </p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 创建型模式 </tag>
            
            <tag> 建造者模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/2024/04/09/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2024/04/09/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><blockquote><p>涉及到一个单一的类，由该类<strong>负责创建自己的对象</strong>且同时<strong>确保只有一个对象被创建</strong>。</p><p>提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象</p></blockquote><blockquote><p><strong>注意：</strong></p><ol><li>单例类只能有一个实例</li><li>单例类必须创建自己的唯一实例</li><li>单例类必须给所有其他对象提供这一实例</li></ol></blockquote><blockquote><p><strong>解决了什么？</strong><br>一个全局使用的类被频繁的创建与销毁</p><p><strong>什么时候使用？</strong><br>当想控制实例的数目、节省系统资源的时候</p><p><strong>怎么实现？</strong><br>创建一个方法去判断系统是否已经拥有这个单例，有则返回，没有则创建</p></blockquote><blockquote><p><strong>优点</strong></p><ol><li>在内存里只有一个实例，减少了内存的开销，尤其是频繁的对类的创建和销毁</li><li>避免对资源的多重占用（写文件操作）</li></ol></blockquote><blockquote><p><strong>缺点</strong><br>没有接口、不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化</p></blockquote><blockquote><p><strong>使用场景</strong></p><ol><li>要求生产唯一序列号</li><li>WEB中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来</li><li>创建的一个对象需要消耗的资源过多，比如I/O与数据库的连接等</li></ol></blockquote><blockquote><p><strong>Considerations</strong></p><p>getInstance()方法中需要使用同步锁synchronized(Singleton.class)防止多线程同时进入造成instance被多次实例化</p></blockquote><p><strong>代码</strong></p><p>SingleObject（基本实现）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleObject</span> <span class="token punctuation">{</span>    <span class="token comment">//创建一个SingleObject的私有对象</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SingleObject</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//把构造器私有化，不允许外部直接创建该类</span>    <span class="token keyword">private</span> <span class="token class-name">SingleObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SingleObject</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SingleObject被创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="懒汉式，线程不安全的"><a href="#懒汉式，线程不安全的" class="headerlink" title="懒汉式，线程不安全的"></a>懒汉式，线程不安全的</h2><ul><li>是否Lazy初始化：是</li><li>是否多线程安全：否</li><li>因为没有加锁synchronized，所以严格意义上不算单例模式</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 懒汉式 线程不安全的</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleObject</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SingleObject</span> instance<span class="token punctuation">;</span>    <span class="token comment">//私有化空参构造器</span>    <span class="token keyword">private</span> <span class="token class-name">SingleObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment">//在获取对象的时候判断全局instance是否为null</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SingleObject</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SingleObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="懒汉式，线程安全的"><a href="#懒汉式，线程安全的" class="headerlink" title="懒汉式，线程安全的"></a>懒汉式，线程安全的</h2><ul><li>是否Lazy初始化：是</li><li>是否多线程安全：是</li><li>优点：第一次调用才初始化，避免内存浪费</li><li>缺点：必须加锁synchronized才能保证单例，但是加锁会影响效率</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 懒汉式 线程安全的</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleObject</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SingleObject</span> instance<span class="token punctuation">;</span>    <span class="token comment">//私有化空参构造器</span>    <span class="token keyword">private</span> <span class="token class-name">SingleObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment">//在获取对象的时候判断全局instance是否为null</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">SingleObject</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SingleObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h2><ul><li>是否Lazy初始化：否</li><li>是否多线程安全：是</li><li>优点：没有加锁，执行效率提高</li><li>缺点：类在加载的时候就会初始化，浪费内存</li><li>基于classloader机制避免了多线程的同步问题，但是instance在类装载的时候就实例化，虽然导致类装载的原因有很多种，在单例模式中大多是嗲用getInstance方法， 但是也不能确保有其他的方式或者其他的静态方法导致类装载，这时候初始化instance明显没有打到lazy loading（懒加载）的效果</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 饿汉式 线程安全的</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleObject</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SingleObject</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//私有化空参构造器</span>    <span class="token keyword">private</span> <span class="token class-name">SingleObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment">//在获取对象的时候判断全局instance是否为null</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">SingleObject</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="双检锁-双重校验锁（DCL-double-checked-locking）"><a href="#双检锁-双重校验锁（DCL-double-checked-locking）" class="headerlink" title="双检锁/双重校验锁（DCL: double checked locking）"></a>双检锁/双重校验锁（DCL: double checked locking）</h2><ul><li>是否Lazy初始化：是</li><li>是否多线程安全：是</li><li>采用双锁机制，安全且在多线程情况下保持高性能</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 双检锁</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleObject</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token class-name">SingleObject</span> instance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">SingleObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SingleObject</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 线程1、2同时到达判断instance是否为null</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 线程1进去，线程2被阻塞</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">SingleObject</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//1创建完对象后，instance就不为null，2不会进入if，避免多次初始化</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="登记式-静态内部类"><a href="#登记式-静态内部类" class="headerlink" title="登记式/静态内部类"></a>登记式/静态内部类</h2><ul><li>是否Lazy初始化：是</li><li>是否多线程安全：是</li><li>能达到双检锁方式一样的功效，但实现更简单，对静态域使用延迟初始化，应该使用这种方式而不是双检锁。只适用于静态域的情况，双检锁的方式可以在实例域需要延迟初始化的时候使用。</li><li>利用classloader机制保证初始化instance时只有一个线程，跟饿汉式不同的是：饿汉式只要SingletObject类被装载了，那么instance就会被实例化，没有打到懒加载的效果，而这种方式是SingleObject类被装载了，但是instance不一定被初始化，因为SingletonHolder类没有被主动使用，只有显式调用getInstance方法才会显式装载SingletonHolder从而实例化instance</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 登记式/静态内部类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleObject</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHolder</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">SingleObject</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">SingleObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">SingleObject</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">SingletonHolder</span><span class="token punctuation">.</span>instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><ul><li>是否Lazy初始化：否</li><li>是否多线程安全：是</li><li><strong>实现单例模式的最佳方法</strong></li><li>避免多线程同步的问题，而且还自动支持序列化机制，防止反序列化重新创建新的对象，绝对防止多次实例化</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 枚举</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">SingleObject</span> <span class="token punctuation">{</span>    <span class="token constant">INSTANCE</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"枚举类型的实例"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Considerations<br>一般情况下不建议使用懒汉式，不管是线程安全还是线程不安全的，比较建议使用饿汉式。而在我们需要明确实现懒加载（lazy loading）的效果时，才会使用登记式（静态内部类）的方式。在涉及到反序列化创建对象的时候，可以使用枚举的方式，其他的特殊需求可以考虑双检锁的方式。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 创建型模式 </tag>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象工厂模式</title>
      <link href="/2024/04/09/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2024/04/09/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><blockquote><p>是围绕一个超级工厂创建其他工厂，在该模式中，接口是负责创建一个相关对象的工厂，不需要显示指定他们的类，每个生成的工厂都能按照工厂模式提供对象，提供了一种创建一系列相关或相互依赖对象的接口。</p><p><strong>解决了什么？</strong></p><p>主要解决接口选择的问题</p><p><strong>什么时候使用？</strong></p><p>系统的产品有多于一个的产品族，而系统只消费其中某一族的产品</p><p><strong>怎么解决？</strong></p><p>在一个产品族里面定义多个产品</p></blockquote><blockquote><p><strong>优点</strong></p><p>当一个产品族中的多个对象被设计成一起工作的时候，能保证客户端始终只使用同一个产品族中的对象</p><p><strong>缺点</strong></p><p>产品族扩展非常困难，要增加一个系列的某一产品，既要在抽象的Creator里加代码，又要在具体的类里面加代码</p></blockquote><blockquote><p><strong>使用场景</strong></p><p>生成不同操作系统的程序</p></blockquote><p><strong>代码</strong></p><p>创建一个Shape接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建一个Color接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建继承Shape接口的子类</p><p>Square.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">implements</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is Square"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Rectangle.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token keyword">implements</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is Rectangle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Circle.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">implements</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is Circle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建继承Color接口的子类</p><p>Red.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Red</span> <span class="token keyword">implements</span> <span class="token class-name">Color</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is Red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Blue.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Blue</span> <span class="token keyword">implements</span> <span class="token class-name">Color</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is Blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Green.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Green</span> <span class="token keyword">implements</span> <span class="token class-name">Color</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is Green"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建获取接口的抽象工厂</p><p>AbstractFactory.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">Color</span> <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token class-name">String</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">Shape</span> <span class="token function">getShape</span><span class="token punctuation">(</span><span class="token class-name">String</span> shape<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>创建获取抽象工厂的工厂</p><p>该工厂可以根据传入的参数选择创建不同的抽象工厂</p><p>FactoryProducer.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FactoryProducer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">AbstractFactory</span> <span class="token function">getFactory</span><span class="token punctuation">(</span><span class="token class-name">String</span> choice<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>choice<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"SHAPE"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ShapeFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>choice<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"COLOR"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ColorFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试代码</p><ol><li>通过传入shape/circle给工厂获取对应的抽象工厂</li><li>获取到抽象工厂以后，传入不同的参数来获取具体想要拿到的实体类</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AbstractFactoryPatternDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//获取shape工厂</span>        <span class="token class-name">AbstractFactory</span> shapeFactory <span class="token operator">=</span> <span class="token class-name">FactoryProducer</span><span class="token punctuation">.</span><span class="token function">getFactory</span><span class="token punctuation">(</span><span class="token string">"shape"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用shape工厂获取Circle对象</span>        <span class="token class-name">Shape</span> circle <span class="token operator">=</span> shapeFactory<span class="token punctuation">.</span><span class="token function">getShape</span><span class="token punctuation">(</span><span class="token string">"circle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        circle<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用shape工厂获取Rectangle对象</span>        <span class="token class-name">Shape</span> rectangle <span class="token operator">=</span> shapeFactory<span class="token punctuation">.</span><span class="token function">getShape</span><span class="token punctuation">(</span><span class="token string">"rectangle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rectangle<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用shape工厂获取Square对象</span>        <span class="token class-name">Shape</span> square <span class="token operator">=</span> shapeFactory<span class="token punctuation">.</span><span class="token function">getShape</span><span class="token punctuation">(</span><span class="token string">"square"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        square<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取color工厂</span>        <span class="token class-name">AbstractFactory</span> colorFactory <span class="token operator">=</span> <span class="token class-name">FactoryProducer</span><span class="token punctuation">.</span><span class="token function">getFactory</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用color工厂获取Red对象</span>        <span class="token class-name">Color</span> red <span class="token operator">=</span> colorFactory<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        red<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用color工厂获取Blue对象</span>        <span class="token class-name">Color</span> blue <span class="token operator">=</span> colorFactory<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        blue<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用color工厂获取Green对象</span>        <span class="token class-name">Color</span> green <span class="token operator">=</span> colorFactory<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token string">"green"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        green<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>UML类图</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202403161148392.png" alt="image-20240314091504807"> </p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 创建型模式 </tag>
            
            <tag> 抽象工厂模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂模式</title>
      <link href="/2024/04/09/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2024/04/09/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><blockquote><p>定义一个创建对象的接口,让其子类自己实现实例化哪一个工厂类.<strong>在这个设计模式中,创建对象的过程会被延迟到子类进行</strong></p><p><strong>解决了什么?</strong></p><p>解决接口选择的问题</p><p><strong>什么时候使用?</strong></p><p>要明确地计划在不同条件下创建不同实例的时候</p><p><strong>怎么解决?</strong></p><p>让子类去实现工厂接口,返回的也是一个抽象的产品</p></blockquote><blockquote><p><strong>优点</strong></p><ol><li>一个调用者想创建一个对象,只需要知道其名称即可</li><li>扩展性高,如果 要增加一个产品,只需要扩展一个工厂类就可以了</li><li>屏蔽产品的具体实现,调用者只需要关心产品给出的接口</li></ol><p><strong>缺点</strong></p><p>每次增加一个产品的时候都需要增加一个具体类和对象实现工厂,使得系统中类的个数成倍增加,在一定程度上增加了系统的复杂度,同时也增加了系统具体类的依赖</p></blockquote><blockquote><p><strong>使用场景</strong></p><p>日志记录器</p><p>数据库访问</p><p>设计一个链接服务器的框架(需要三个协议:POP3、IMAP、HTTP)</p></blockquote><blockquote><p>包含的几个核心:</p><ul><li>抽象产品</li><li>具体产品</li><li>抽象工厂</li><li>具体工厂</li></ul></blockquote><p><strong>代码</strong></p><p>创建一个接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Sharp</span> <span class="token punctuation">{</span><span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建实现接口的子类</p><p>Square.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">implements</span> <span class="token class-name">Sharp</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is Square"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Circle.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">implements</span> <span class="token class-name">Sharp</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is Circle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Rectangle.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token keyword">implements</span> <span class="token class-name">Sharp</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is Rectangle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建包含这些子类的工厂类</p><p>ShapeFactory.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 工厂类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShapeFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Sharp</span> <span class="token function">getSharp</span><span class="token punctuation">(</span><span class="token class-name">String</span> sharpType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sharpType <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sharpType<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"CIRCLE"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sharpType<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"RECTANGLR"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sharpType<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"SQUARE"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>UML类图</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202403161133152.png" alt="image-20240313222630308"> </p><blockquote><p><strong>Circle、Rectangle、Square实现Sharp接口,ShapeFactory去创建这三个子类的对象,SharpFactoryDemo使用ShapeFatory获取不同的对象</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 创建型模式 </tag>
            
            <tag> 工厂模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>行为型模式</title>
      <link href="/2024/04/09/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2024/04/09/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h1><blockquote><p>这些模式关注对象之间的通信和交互,为了在解决对象之间的责任分配和算法的封装</p></blockquote><ul><li>责任链模式(Chain of Responsibility Pattern)</li><li>命令模式(Command Pattern)</li><li>解释器模式(Interpreter Pattern)</li><li>迭代器模式(Iterator Pattern)</li><li>中介者模式(Mediator Pattern)</li><li>备忘录模式(Memento Pattern)</li><li>观察者模式(Observer Pattern)</li><li>状态模式(State Pattern)</li><li>空对象模式(Null Object Pattern)</li><li>策略模式(Strategy Pattern)</li><li>模板模式(Template Pattern)</li><li>访问者模式(Visitor Pattern)</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 行为型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>结构型模式</title>
      <link href="/2024/04/09/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2024/04/09/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h1><blockquote><p>这些模式关注对象之间的组合和关系,为了在解决如何构建灵活且可复用的类和对象结构</p></blockquote><ul><li>适配器模式(Adapter Pattern)</li><li>桥接模式(Bridge Pattern)</li><li>过滤器模式(Filter、Criteria Pattern)</li><li>组合模式(Composite Pattern)</li><li>装饰器模式(Decorator Pattern)</li><li>外观模式(Favade Pattern)</li><li>享元模式(Flyweight Pattern)</li><li>代理模式(Proxy Pattern)</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 结构型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建型模式</title>
      <link href="/2024/04/09/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2024/04/09/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h1><blockquote><p> 在创建对象的同时隐藏创建逻辑的方式，而不使用new去直接实例化一个对象，使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。</p></blockquote><ul><li>工厂模式(Factory Pattern)</li><li>抽象工厂模式(Abstract Pattern)</li><li>单例模式(Singleton Pattern)</li><li>建造者模式(Builder Pattern)</li><li>原型模式(Prototype Pattern)</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 创建型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2024/04/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2024/04/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><blockquote><p>分成三大类：创建型模式、结构型模式、行为型模式。</p><p>单独讨论的另一类设计模式：J2EE设计模式</p></blockquote><p><strong>六大原则:</strong></p><ol><li><p>开闭原则（OCP）</p><ul><li>对外开放、对修改关闭（热插拔）</li></ul></li><li><p>里氏代换原则（LSP）</p></li><li><p>依赖倒转原则（DIP）</p><ul><li>针对接编程，依赖于抽象而不依赖于具体</li></ul></li><li><p>接口隔离原则（ISP）</p><ul><li>使用多个隔离的接口比使用单个接口好</li><li>降低耦合度</li></ul></li><li><p>迪米特法则（DP）</p><ul><li>一个实体类应该尽可能地减少与其他实体类之间发生相互作用</li></ul></li><li><p>合成复用原则（CRP）</p><ul><li>尽量使用合成/聚合地方式，而不是使用继承</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux8.0 BASH</title>
      <link href="/2024/04/08/Linux8-0-BASH/"/>
      <url>/2024/04/08/Linux8-0-BASH/</url>
      
        <content type="html"><![CDATA[<h1 id="BASH"><a href="#BASH" class="headerlink" title="BASH"></a>BASH</h1><h2 id="系统的合法shell-与-etc-shells功能"><a href="#系统的合法shell-与-etc-shells功能" class="headerlink" title="系统的合法shell 与 /etc/shells功能"></a>系统的合法shell 与 /etc/shells功能</h2><p>通过查看/etc/shells文件可以看到当前系统有多少个可以使用的shell</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310231500423.png" alt="image-20231023150007380"> </p><h2 id="Bash-shell-的功能"><a href="#Bash-shell-的功能" class="headerlink" title="Bash shell 的功能"></a>Bash shell 的功能</h2><p>bash主要的优点：</p><ul><li>历史命令（history）</li><li>命令与文件补全功能：（[Tab]按键的好处）</li><li>命令别名设置功能：（alias）</li><li>任务管理、前台、后台控制：（job control、foreground、background）</li><li>程序化脚本：（shell scripts）</li><li>通配符：（Wildcard）</li></ul><h2 id="查询命令是否为Bash-shell的内置命令：type"><a href="#查询命令是否为Bash-shell的内置命令：type" class="headerlink" title="查询命令是否为Bash shell的内置命令：type"></a>查询命令是否为Bash shell的内置命令：type</h2><p><code>type [-tpa] name</code></p><ul><li>不加任何参数的时候type会显示出name是外部命令还是bash内置命令</li><li>-t：type将name以下面的字眼表示出其意义：<ul><li>file：表示为外部命令</li><li>alias：表示该命令为命令别名所设置的名称</li><li>builtin：表示该命令为bash内置的命令功能</li></ul></li><li>-p：后面接的name为外部命令的时候，才会显示完整的文件名</li><li>-a：会由PATH变量定义的路径中，将所有含name的命令都列出来，包含alias</li></ul><p>查询ls是否为bash内置</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310241413846.png" alt="image-20231024141322761"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310241414536.png" alt="image-20231024141420505"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310241415861.png" alt="image-20231024141507833"> </p><p>查询cd是否为bash内置</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310241416804.png" alt="image-20231024141646773"> </p><p>小结：type这个命令可以帮助我们知道每个命令是否为bash内置命令，type可以用来作为类似which命令的用途。</p><h2 id="命令的执行与快速编辑按钮"><a href="#命令的执行与快速编辑按钮" class="headerlink" title="命令的执行与快速编辑按钮"></a>命令的执行与快速编辑按钮</h2><p>如果命令行太长想分两行来写，可以使用 <code>\[Enter]</code> ，反斜杠和回车键之间不能有空格</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310241421805.png" alt="image-20231024142139769"> </p><p>组合键</p><table><thead><tr><th>组合键</th><th>功能与示范</th></tr></thead><tbody><tr><td>[ctrl]+u/[ctrl]+k</td><td>分别是从光标处向前删除命令串，及向后删除命令串</td></tr><tr><td>[ctrl]+a/[ctrl]+e</td><td>分别是让光标移动到整个命令串的最前面，或最后面</td></tr></tbody></table><h2 id="Shell的变量功能"><a href="#Shell的变量功能" class="headerlink" title="Shell的变量功能"></a>Shell的变量功能</h2><h3 id="变量的使用与设置：echo、变量设置规则、unset"><a href="#变量的使用与设置：echo、变量设置规则、unset" class="headerlink" title="变量的使用与设置：echo、变量设置规则、unset"></a>变量的使用与设置：echo、变量设置规则、unset</h3><p>变量被使用时，前面必须要加上【$】</p><ul><li><p>变量的使用：echo</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310241432883.png" alt="image-20231024143204850"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310241432230.png" alt="image-20231024143246202"> </p></li><li><p>变量的设置规则</p><ul><li><p>变量与变量内容以【=】连接</p><p><code>myname=vbird</code></p></li><li><p>等号两边不能直接接空格</p><p>错误写法：<code>myname = vbird</code> 或 <code>myname=v bird</code></p></li><li><p>变量名称只能是英文字母和数字，但是开头字符不能是数字</p></li><li><p>变量内容如果空格可以使用【””】或【’’】将变量内容括起来</p></li></ul></li><li><p>双引号内的特殊字符如$等，可以保留原有的特性</p><ul><li><code>var="lang is $LANG"</code>则<code>echo $var</code>可以得到lang is zh_CN.UTF-8</li></ul></li><li><p>单引号内的特殊字符则为一般字符（纯文本）</p><ul><li><p><code>var='lang is $LANG'</code>则<code>echo $var</code>可以得到lang is $LANG</p></li><li><p>可使用转义符【\】将一些特殊符号变成一般符号（例如回车、空格、$等）</p></li><li><p>【``】或【$(命令)】用于借由其他额外命令所提供的信息</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310241455751.png" alt="image-20231024145502716"> </p></li><li><p>若该变量为扩增变量内容时，则可用 <code>"$变量名称"</code> 或 <code>${变量}</code> 累加内容</p><p><code>PATH="$PATH":/home/bin</code> 或 <code>PATH=${PATH}:/home/bin</code></p></li><li><p>若该变量需要在其他子程序执行，则需要以export来是变量变成环境变量</p><p><code>export PATH</code></p></li><li><p>通常大写字母为系统默认变量，自行设置变量可以使用小写字符，方便判断</p></li><li><p>取消变量的方法为unset，<code>unset 变量名称</code></p><p>取消myname的设置：<code>unset myname</code></p></li></ul></li></ul><p>什么是子进程？</p><p>在目前shell情况下，启用另一个新的shell，新的那个就是子进程。在一般情况下父进程的自定义变量是没有办法在子进程中使用的，但是如果把变量通过export变成环境变量后，就能够在子进程下面使用了！</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310241520191.png" alt="image-20231024152032153"> 此时开启了另一个shell</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310241520740.png" alt="image-20231024152058705"> 可见并不能输出name里面的内容</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310241521211.png" alt="image-20231024152123175"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310241522747.png" alt="image-20231024152234710"> 通过export将name设置成环境变量后，可以在另一个shell中输出name的内容</p><p>如何进入目前内核的模块目录？</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310241527153.png" alt="image-20231024152747127"> </p><p>双引号和单引号的区别：</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310241531442.png" alt="image-20231024153122415"> </p><h3 id="环境变量的功能"><a href="#环境变量的功能" class="headerlink" title="环境变量的功能"></a>环境变量的功能</h3><p>查看目前的shell环境中有多少默认的环境变量？：<code>env</code> 和 <code>export</code></p><ul><li><p>用env观察文件变量与常见环境变量</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310251001606.png" alt="image-20231025100059482"> </p><ul><li><p>HOME</p><p>代表用户的根目录</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310251013124.png" alt="image-20231025101316049"> </p></li><li><p>SHELL</p><p>目前这个环境使用的SHELL是哪个程序</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310251013669.png" alt="image-20231025101333639"> </p></li><li><p>HISTSIZE</p><p>与历史命令有关，曾经执行过的命令可以被系统记录下来，记录的条数是有这个值来设置的</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310251013133.png" alt="image-20231025101346101"> </p></li><li><p>MAIL</p><p>当我们使用mail这个命令在收信时，系统会去读取的邮箱文件（mailbox）</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310251014223.png" alt="image-20231025101429192"> </p></li><li><p>PATH</p><p>执行文件查找的路径，目录与目录之间用冒号（:）分隔，有与文件的查找是依序由PATH的变量内的目录来查询，所以目录的顺序也是重要的</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310251015488.png" alt="image-20231025101501461"> </p></li><li><p>LANG</p><p>语系数据，以后作讲解</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310251015585.png" alt="image-20231025101548556"> </p></li><li><p>RANDOM</p><p>随机数的变量，目前大多数Linux发行版都有随机数生成器，在BASH环境下，RANDOM变量的内容介于0~32767的数值，使用declare声明数值类型就可以使用了</p><p><code>declare -i number=$RANDOM*10/32768 ; echo $number</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310251023947.png" alt="image-20231025102349917"></p></li></ul></li><li><p>用set观察所有变量（包含环境变量与自定义变量）</p><ul><li>在Linux默认情况中，使用{大写的字母}来设置的变量一般为系统内定需要的变量</li></ul></li><li><p>export：自定义变量转成环境变量</p></li></ul><h3 id="影响显示结果的语系变量（locale）"><a href="#影响显示结果的语系变量（locale）" class="headerlink" title="影响显示结果的语系变量（locale）"></a>影响显示结果的语系变量（locale）</h3><p>使用locale可以查看Linux支持了多少语系</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310251042657.png" alt="image-20231025104248626"> </p><p>可以通过/etc/locale.conf更改整体系统默认语系</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310251049598.png" alt="image-20231025104959566"> </p><h3 id="变量的有效范围"><a href="#变量的有效范围" class="headerlink" title="变量的有效范围"></a>变量的有效范围</h3><p>基本上可以这样看待：</p><p>环境变量=全局变量</p><p>自定义变量=局部变量</p><ul><li>为什么环境变量的数据可以被子进程引用？<ul><li>当启动一个shell，操作系统会分配一内存区域给shell使用，此内存中的变量可以让子进程使用</li><li>如果在父进程利用export功能，可以让自定义变量的内容写入到上述的内存区域当中（环境变量）</li><li>当加载另一个shell时，（即启动子进程），子shell可以将父shell的环境变量所在的内存区域导入自己的环境变量区块当中</li></ul></li></ul><h3 id="变量键盘读取、数组与声明：read、array、declare"><a href="#变量键盘读取、数组与声明：read、array、declare" class="headerlink" title="变量键盘读取、数组与声明：read、array、declare"></a>变量键盘读取、数组与声明：read、array、declare</h3><ul><li><p>read</p><ul><li><p><code>read [-pt] variable</code></p></li><li><p>-p：后面接提示字符</p></li><li><p>-t：后面接等待的【秒数】，不会一直等待使用者</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310251412252.png" alt="image-20231025141144039"></p></li></ul></li><li><p>declare，typeset</p><ul><li><p>declare或typeset是一样的功能，声明变量的类型，如果后面没有接任何参数，那么bash就会主动将所有变量名称和内容通通显示出来</p></li><li><p><code>declare [-aixr] variable</code></p></li><li><p>-a：将后面的变量定义为数组（array）类型</p></li><li><p>-i：将后面的变量定义为整数（integer）类型</p></li><li><p>-x：用法和export一样，将后面的变量变成环境变量</p></li><li><p>-r：将变量设置为readonly类型，该变量不可被更改内容，也不能unset</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310251446706.png" alt="image-20231025144620659"> </p><p><strong>变量类型默认为字符串，如果不指定变量类型，则1+2为一个字符串而不是计算式</strong></p><p><strong>bash环境中的数值运算，默认最多仅能到达整数形态，所以1/3结果是0</strong></p><p>将sum变成环境变量</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310251456997.png" alt="image-20231025144928274"> </p><p>让sum变量变成只读属性，不可修改，只能注销再登录才能恢复该变量的类型</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310251450322.png" alt="image-20231025145045295"> </p><p>让sum变成非环境变量的自定义变量</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310251453260.png" alt="image-20231025145315895"></p></li></ul></li><li><p>数组（array）变量类型</p><p>设置数组的方式：<code>var[index]=content</code></p><p>数组名为var，数组内容为var[1]=小明。。。，index就是数组下标，</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310251504415.png" alt="image-20231025150427380"> </p><p><strong>一般来说建议使用${数组}的方式来读取，比较准确无误</strong></p></li></ul><h3 id="与文件系统及程序的限制关系：ulimit"><a href="#与文件系统及程序的限制关系：ulimit" class="headerlink" title="与文件系统及程序的限制关系：ulimit"></a>与文件系统及程序的限制关系：ulimit</h3><p>有如下场景：如果Linux主机内同时登陆了十个人，且同时开启了100个文件，每个文件大小约为10MB，此时内存需要多大才够他们用？需要10GB，很明显不太现实，所以bash是可以限制用户的某些系统资源的，包括可开启的文件数量，可使用的CPU时间，可使用的内存总量等。</p><p><code>ulimit [-SHacdfltu] [配额]</code></p><ul><li>-H：hard limit，严格的设置，必定不能超过这个设置的数值</li><li>-S：soft limit，警告的设置，可以超过这个设置值，但是超过会有警告信息</li><li>-a：后面不接任何选项与参数，可列出所有的限制额度</li><li>-c：限制每个内核文件的最大容量（内核文件：当某些程序发生错误时，系统可能会将该程序在内存中的信息写成文件，这种文件就是内核文件）</li><li>-d：程序可使用的最大段内存（segment）容量</li><li>-f：此shell可以建立的最大文件容量（一般为2GB）单位为Kbytes</li><li>-l：k而用于锁定（lock）的内存量</li><li>-t：可使用的最大CPU时间（单位是秒）</li><li>-u：单一使用者可以使用的最大进程（process）数量</li></ul><h2 id="命令别名与历史命令"><a href="#命令别名与历史命令" class="headerlink" title="命令别名与历史命令"></a>命令别名与历史命令</h2><h3 id="命令别名设置：alias、unalias"><a href="#命令别名设置：alias、unalias" class="headerlink" title="命令别名设置：alias、unalias"></a>命令别名设置：alias、unalias</h3><p><strong>命令使用格式</strong>：<code>alias lm='ls -al | more'</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310271418807.png" alt="image-20231027141806691"> </p><p>以后输入lm就相当于执行了<code>ls -al | more</code></p><p><strong>防误删除的方法</strong>：<code>alias rm='rm -i'</code>，这样每次删除文件之前都会确认是否删除该文件</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310271419118.png" alt="image-20231027141919090"> </p><p><strong>查看目前存在的命令别名</strong>：<code>alias</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310271419983.png" alt="image-20231027141945957"> </p><p><strong>使用vi打开vim</strong>：<code>alias vi='vim'</code> </p><p><strong>删除别名</strong>：unalias</p><p>把刚刚创建的别名lm删除：<code>unalias lm</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310271428766.png" alt="image-20231027142829738"> </p><p>1</p><p><strong>命令别名和变量有什么不同？</strong></p><p>命令别名是新创建一个命令，我们可以直接执行该命令，至于变量则需要使用类似<code>echo</code>命令才能够调用出变量的内容。</p><h3 id="历史命令：history"><a href="#历史命令：history" class="headerlink" title="历史命令：history"></a>历史命令：history</h3><p><code>history [n]</code></p><p><code>history [-c]</code></p><p><code>history [-raw] histfiles</code></p><ul><li>n：数字，意思是列出最近n条命令行列表</li><li>-c：将目前的shell中的所有history内容全部清除</li><li>-a：将目前新增的history命令新增入histfiles中，如果没有加histfiles，则默认写入~/.bash_history</li><li>-r：将histfiles的内容读到目前这个shell的history中</li><li>-w：将目前的history记录内容写入到histfiles中</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310271504750.png" alt="image-20231027150359653"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310271504389.png" alt="image-20231027150454363"> </p><p>将目前的数据写入histfile中</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310271508721.png" alt="image-20231027150838691"> </p><p>因为没有histfile，所以默认写入~/.bash_history</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310271510834.png" alt="image-20231027151028804"> </p><ul><li>当我们以bash登录Linux主机之后，系统会主动地由家目录的<del>/.bash_history读取以前曾经执行过的命令，</del>/.bash_history记录的数据条数与HISTFILESIZE变量的值有关</li></ul><p><code>!number</code>、<code>!command</code>、<code>!!</code></p><ul><li>number：执行第几条命令的意思</li><li>command：由最近的命令开始向前查找【命令串开头为command】的那个命令，并执行</li><li>!!：执行上一个命令（相当于按向上键后，按回车）</li></ul><h2 id="Bash-shell的操作环境"><a href="#Bash-shell的操作环境" class="headerlink" title="Bash shell的操作环境"></a>Bash shell的操作环境</h2><h3 id="路径与命令查找顺序"><a href="#路径与命令查找顺序" class="headerlink" title="路径与命令查找顺序"></a>路径与命令查找顺序</h3><p>系统中其实有不少的ls命令，那怎么知道命令运行的顺序？</p><ol><li>以相对/绝对路径执行命令，例如【/bin/ls】或【./ls】</li><li>由alias找到该命令来执行</li><li>由bash内置的（builtin）命令来执行</li><li>通过$PATH这个变量的顺序查找到的第一个命令来执行</li></ol><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310301356326.png" alt="image-20231030135614233"> </p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux7.0 vim程序编辑器</title>
      <link href="/2024/04/08/Linux7-0-vim%E7%A8%8B%E5%BA%8F%E7%BC%96%E8%BE%91%E5%99%A8/"/>
      <url>/2024/04/08/Linux7-0-vim%E7%A8%8B%E5%BA%8F%E7%BC%96%E8%BE%91%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="vim程序编辑器"><a href="#vim程序编辑器" class="headerlink" title="vim程序编辑器"></a>vim程序编辑器</h1><h2 id="vi与vim"><a href="#vi与vim" class="headerlink" title="vi与vim"></a>vi与vim</h2><p>为什么要学vim？</p><ul><li>所有的UNIX-like系统都会内置vi文本编辑器，其他的文本编辑器不一定会存在</li><li>vim具有程序编辑的能力，可以主动地以字体颜色辨别语法的正确性，方便程序设计</li></ul><h2 id="vi的使用"><a href="#vi的使用" class="headerlink" title="vi的使用"></a>vi的使用</h2><p><strong>vi分三种模式，一般命令模式、编辑模式、命令行模式</strong></p><ul><li>一般命令模式（command mode）：<ul><li>默认的模式，可以使用【上下左右】按键来移动光标，使用【删除字符】或【删除整行】来处理文件内容，也可以使用【复制、粘贴】来处理文件内容</li></ul></li><li>编辑模式（insert mode）：<ul><li>在一般模式中可以进行删除、复制、粘贴等操作，但是无法编辑文件内容，需要按下【i、l、o、O、a、A、r、R】等任何一个字母后才会进入编辑模式。如果要回到一般模式就要按下【ESC】</li></ul></li><li>命令行模式（command-line mode）：<ul><li>在一般模式，输入【: / ?】三个中任何一个按钮，就可以将光标移动到最下面一行，在这个模式中，可以进行读取、保存、批量替换字符、退出vi、显示行号等操作</li></ul></li></ul><p>详细的按键设置及其功能见《鸟哥的Liunx私房菜（基础学习篇第四版）》P293~P296</p><h2 id="可视区块（Visual-Block）"><a href="#可视区块（Visual-Block）" class="headerlink" title="可视区块（Visual Block）"></a>可视区块（Visual Block）</h2><table><thead><tr><th>v</th><th>字符选择，会将光标经过的地方反白</th></tr></thead><tbody><tr><td>V</td><td>行选择，会将光标经过的行反白</td></tr><tr><td>[ctrl] + v</td><td>可视区块，可以用矩形的方式选择数据</td></tr><tr><td>y</td><td>将反白的地方复制起来</td></tr><tr><td>d</td><td>将反白的地方删除掉</td></tr><tr><td>p</td><td>将刚刚复制的区块，在光标所在的地方粘贴</td></tr></tbody></table><h2 id="vim常用命令示意图"><a href="#vim常用命令示意图" class="headerlink" title="vim常用命令示意图"></a>vim常用命令示意图</h2><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310231433850.jpg" alt="0b032ba58634867aac9579f1e589ad8"> </p><h2 id="中文编码问题"><a href="#中文编码问题" class="headerlink" title="中文编码问题"></a>中文编码问题</h2><p>通常需要考虑的方面：</p><ol><li>Linux系统默认支持的语系数据：与/etc/locale.conf有关</li><li>与终端（bash）的语系：LANG、LC_ALL这几个变量有关</li><li>文件原本的编码</li><li>打开终端的软件，例如GNOME下的窗口界面</li></ol><p>修正语系编码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>feliks@study ~<span class="token punctuation">]</span> $ <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>zh_CN.gb18030<span class="token punctuation">[</span>feliks@study ~<span class="token punctuation">]</span> $ <span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">LC_ALL</span></span><span class="token operator">=</span>zh_CN.gb18030<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后在终端工具栏的【终端】 –&gt; 【设置字符编码】 –&gt; 【中文（简体）】 选项</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux6.0 文件与文件系统的压缩</title>
      <link href="/2024/04/08/Linux6-0-%E6%96%87%E4%BB%B6%E4%B8%8E%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%8E%8B%E7%BC%A9/"/>
      <url>/2024/04/08/Linux6-0-%E6%96%87%E4%BB%B6%E4%B8%8E%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%8E%8B%E7%BC%A9/</url>
      
        <content type="html"><![CDATA[<h1 id="文件与文件系统的压缩"><a href="#文件与文件系统的压缩" class="headerlink" title="文件与文件系统的压缩"></a>文件与文件系统的压缩</h1><p><strong>Linux系统常见的压缩命令</strong></p><p>几个常见的压缩文件扩展名</p><ul><li>*.Z：compress程序压缩的文件</li><li>*.zip：zip程序压缩的文件</li><li>*.gz：gzip程序压缩的文件</li><li>*.bz2：bzip2程序压缩的文件</li><li>*.xz：xz程序压缩的文件</li><li>*.tar：tar程序打包的文件，并没有压缩过</li><li>*.tar.gz：tar程序打包的文件，并且经过gzip的压缩</li><li>*.tar.bz2：tar程序打包的文件，并且经过bzip2的压缩</li><li>*.tar.xz：tar程序打包的文件，并且经过xz的压缩</li></ul><h2 id="gzip，zcat-zmore-zless-zgrep"><a href="#gzip，zcat-zmore-zless-zgrep" class="headerlink" title="gzip，zcat/zmore/zless/zgrep"></a>gzip，zcat/zmore/zless/zgrep</h2><p>gzip可以解压缩compress、zip、gzip等软件所压缩的文件，gzip建立的压缩文件为*.gz</p><p><code>gzip [-cdtv#] 文件名</code></p><ul><li>-c：将压缩的数据输出到屏幕上，可通过数据流重定向来处理</li><li>-d：解压缩的参数</li><li>-t：可以用来检验一个压缩文件的一致性，看看文件有无错误</li><li>-v：可以显示出原文件/压缩文件的压缩比等信息</li><li>-#：#是数字的意思，代表压缩等级，-1最快，但是压缩比最差，-9最慢，但是压缩比最好，默认是-6</li></ul><p>找出/etc下面容量最大的文件，并且复制到/tmp里面，然后以gzip进行压缩</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310141607533.png" alt="image-20231014160747430"> </p><p>使用gzip的时候默认情况下原本的文件会被压缩成为.gz后缀的文件，源文件就不存在了</p><p>由于services是文本文件，请将其压缩文件的内容读取出来</p><p><code>zcat services.gz</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310141619351.png" alt="image-20231014161910303"> </p><p>将services.gz解压缩</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310141623348.png" alt="image-20231014162305319"> </p><p>与gzip -v相反，gzip -d解压缩后会把原来的压缩文件删除</p><p>将services用最高压缩比压缩并保留源文件</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310141625948.png" alt="image-20231014162553924"> </p><p>找出‘http’这个关键字在services.gz中出现在哪几行</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310141628398.png" alt="image-20231014162830349"> </p><h2 id="bzip2，bzcat-bzmore-bzless-bzgrep"><a href="#bzip2，bzcat-bzmore-bzless-bzgrep" class="headerlink" title="bzip2，bzcat/bzmore/bzless/bzgrep"></a>bzip2，bzcat/bzmore/bzless/bzgrep</h2><p>如果说gzip是为了替换compress并提供更好的压缩比而成立的，那么bzip2是为了替换gzip并提供更佳的压缩比而成立的</p><p><code>bzip2 [-cdkzv#] 文件名</code></p><p><code>bzcat 文件名.bz2</code></p><ul><li>-c：将压缩的过程产生的数据输出到屏幕上</li><li>-d：解压缩的参数</li><li>-k：保留原始文件，而不会删除原来的文件</li><li>-z：压缩的参数（默认值）</li><li>-v：可以显示出源文件/压缩文件的压缩比等信息</li><li>-#：与gzip一致，-9最佳，-1最快</li></ul><p>将services文件用bzip2压缩</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310150121781.png" alt="image-20231014232939310"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310150121944.png" alt="image-20231014232954549"> </p><h2 id="xz，xzcat-xzmore-xzless-xzgrep"><a href="#xz，xzcat-xzmore-xzless-xzgrep" class="headerlink" title="xz，xzcat/xzmore/xzless/xzgrep"></a>xz，xzcat/xzmore/xzless/xzgrep</h2><p>xz拥有比bzip2更高的压缩比</p><p><code>xz [-dtlkc#] 文件名</code></p><p><code>xcat 文件名.xz</code></p><ul><li>-d：就是解压缩</li><li>-t：测试压缩文件的完整性，看看有无错误</li><li>-l：列出压缩文件的相关信息</li><li>-k：保留原本的文件不删除</li><li>-c：在屏幕上输出</li><li>-#：#是数字，-9最佳，-1最快</li></ul><p><strong>如果时间不是首要的考虑，那么xz这种有更高压缩比的工具更适合使用，如果要考虑时间的问题，那还是用gzip吧</strong></p><h2 id="打包命令：tar"><a href="#打包命令：tar" class="headerlink" title="打包命令：tar"></a>打包命令：tar</h2><p>tar可以将多个目录或文件打包成一个大文件，同时还可以通过gzip、bzip2、xz的支持</p><h3 id="常用选项与参数"><a href="#常用选项与参数" class="headerlink" title="常用选项与参数"></a>常用选项与参数</h3><p><strong>打包与压缩</strong>：<code>tar [-z|-j|-J] [cv] [-f 待建立新的文件名] filename</code></p><p><strong>查看文件名</strong>：<code>tar [-z|-j|-J] [tv] [-f 已有的tar文件名]</code></p><p><strong>解压缩</strong>：<code>tar [-z|-j|-J] [xv] [-f 已有的tar文件名] [-C 目录]</code></p><ul><li>-c：建立打包文件，可搭配-v来查看过程中被打包的文件名</li><li>-t：查看打包文件的内容含有哪些文件名，重点在查看文件名</li><li>-x：解包或解压缩的功能，可以搭配-C在特定目录解压，特别留意的是**-c、-t、-x不可同时出现在一串命令行中**</li><li>-z：通过gzip的支持进行压缩/解压缩：此时文件名最好为：***.tar.gz **</li><li>-j：通过bzip2的支持进行压缩/解压缩：此时文件名最好为：***.tar.bz2 **</li><li>-J：通过xz的支持进行压缩/解压缩哦：此时文件名最好为：***.tar.xz <strong>，特别留意，</strong>-z、-j、-J不可以同时出现在遗传命令行中**</li><li>-v：在压缩/解压缩的过程中，将正在处理的文件名显示出来</li><li>-f filename：-f后面要立刻接要被处理的文件名，建议-f单独写一个选项（比较不会忘记）</li><li>-C 目录：这个选项用在解压缩，如果要在特定目录解压缩，可以使用这个选项</li><li>-p（小写）：保留备份数据的原本权限和属性，常用于备份（-c）重要的配置文件</li><li>-P（大写）：保留绝对路径，就是允许备份数据中含有根目录存在的意思</li><li>–exclude=FILE：在压缩过程中，不要将FILE打包</li></ul><p>我常用的解压缩命令：<code>tar -xvzf filename</code>，加入了-z，支持gzip</p><ul><li>压缩：<strong>tar -jcv -f filename.tar.bz2 要被压缩的文件或目录</strong></li><li>查询：<strong>tar -jtv -f filename.tar.bz2</strong></li><li>解压缩：<strong>tar -jxv -f filename.tar.bz2 -C 要解压缩的目录</strong></li></ul><p>使用tar加入-z、-j或-J的参数来备份/etc/目录</p><p><code>time tar -zpcv -f /root/etc.tar.gz /etc</code>（-p保留原本文件的权限与属性）</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310150121236.png" alt="image-20231015012110133"> </p><p><code>time tar -jpcv -f /root/etc.tar.bz2 /etc</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310150124908.png" alt="image-20231015012415881"> </p><p><code>time tar -Jpcv -f /root/etc.tar.xz /etc</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310150130312.png" alt="image-20231015013022287"> </p><p>可以看到xz压缩后的文件大小相比其他两个是最小的，但是时间雀食优点久</p><h3 id="为什么要去掉根目录？"><a href="#为什么要去掉根目录？" class="headerlink" title="为什么要去掉根目录？"></a>为什么要去掉根目录？</h3><p>我们使用tar备份的数据可能会需要就压缩回来使用，此时tar记录的文件名就是解压缩后的实际文件名，用/etc/xxx举例子，如果拿掉根目录，我们在/tmp下解开就会变成/tmp/etc/xxx，而如果不去掉根目录，解压出来就会是绝对路径，即解压后的文件会被放到/etc/xxx中，把原来etc下的数据覆盖掉。所以不要随便用-P参数</p><h3 id="将备份的数据解压缩，并考虑特定目录的解压缩操作（-C的应用）"><a href="#将备份的数据解压缩，并考虑特定目录的解压缩操作（-C的应用）" class="headerlink" title="将备份的数据解压缩，并考虑特定目录的解压缩操作（-C的应用）"></a>将备份的数据解压缩，并考虑特定目录的解压缩操作（-C的应用）</h3><p>在本目录下进行解压缩的操作：<code>tar -jxv -f /root/etc.tar.bz2</code>，但是如果我想让其在/tmp目录下解压缩，那就得cd/tmp再执行上述命令，会显得有点麻烦，这时可以使用-C的选项：<code>tar -jxv -f /root/etc.tar.bz2 -C /tmp</code></p><h3 id="仅解开单一文件"><a href="#仅解开单一文件" class="headerlink" title="仅解开单一文件"></a>仅解开单一文件</h3><p>管道|配合grep可以截取关键词，</p><p><code>tar -jtv -f /root/etc.tar.bz2 | grep 'shadow'</code></p><p>语法：</p><p><code>tar -jtv -f 打包文件.tar.bz2 待解开文件名</code></p><p><code>tar -jtv -f /root/etc.tar.bz2 etc/shadow</code></p><h3 id="打包某目录但不含该目录下的某些文件"><a href="#打包某目录但不含该目录下的某些文件" class="headerlink" title="打包某目录但不含该目录下的某些文件"></a>打包某目录但不含该目录下的某些文件</h3><p><code>tar -jcv -f 打包文件.tar.bz2 --exclude=不包含的文件名</code></p><p><strong>基本名称</strong></p><p>tarfile：tar打包出来的文件.tar后缀的就是tarfile</p><p>tarball：带有别的压缩的支持例如<code>.tar.bz2</code>格式的，就是tarball</p><p><strong>利用管道命令与数据流</strong></p><p>将/etc整个目录进行打包的同时在/tmp下解开</p><p><code>tar -cvf - /etc | tar -xvf -</code></p><p>-就表示这个被打包的文件</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux5.0 磁盘与文件系统管理</title>
      <link href="/2024/04/08/Linux5-0-%E7%A3%81%E7%9B%98%E4%B8%8E%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/"/>
      <url>/2024/04/08/Linux5-0-%E7%A3%81%E7%9B%98%E4%B8%8E%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux磁盘与文件系统管理"><a href="#Linux磁盘与文件系统管理" class="headerlink" title="Linux磁盘与文件系统管理"></a>Linux磁盘与文件系统管理</h1><h2 id="磁盘的分区、格式化、检验与挂载"><a href="#磁盘的分区、格式化、检验与挂载" class="headerlink" title="磁盘的分区、格式化、检验与挂载"></a>磁盘的分区、格式化、检验与挂载</h2><p>当我们想要在系统里面新增一块磁盘时</p><ol><li>对磁盘进行划分，以建立可用的磁盘分区</li><li>对该磁盘分区进行格式化（format），以建立系统可用的文件系统</li><li>对刚建好的文件系统进行检验</li><li>在Linux上，需要建立挂载点（目录），并将其挂载上来</li></ol><h3 id="观察磁盘分区状态"><a href="#观察磁盘分区状态" class="headerlink" title="观察磁盘分区状态"></a>观察磁盘分区状态</h3><h4 id="lsblk（列出系统上的所有磁盘列表）"><a href="#lsblk（列出系统上的所有磁盘列表）" class="headerlink" title="lsblk（列出系统上的所有磁盘列表）"></a>lsblk（列出系统上的所有磁盘列表）</h4><ul><li><p>-d：仅列出磁盘本身，并不会列出该磁盘的分区数据</p></li><li><p>-f：同时列出该磁盘内的文件系统名称</p></li><li><p>-i：使用ASCII的字符输出，不要使用复杂的编码</p></li><li><p>-m：同时输出该设备在/dev下面的权限信息（rwx的数据）</p></li><li><p>-p：列出该设备的完整文件名，而不是仅列出最后的名字</p></li><li><p>-t：列出该磁盘设备的详细数据，包括磁盘阵列机制，预读写的数据量大小等</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310081010722.png" alt="image-20231008081308748"> </p><ul><li><p>NAME：设备的文件名，省略/dev等前导目录</p></li><li><p>MAJ:MIN：主要与次要设备代码（内核识别的设备都是这两个代码来实现的）</p></li><li><p>RM：是否为可卸载设备：例如光盘、USB磁盘</p></li><li><p>SIZE：容量</p></li><li><p>RO：是否为只读设备</p></li><li><p>TYPE：是磁盘（disk）、分区（partition）还是只读存储器（rom）等输出</p></li><li><p>MOUNTPOINT：挂载点</p><p>）</p></li></ul></li></ul><h4 id="blkid（列出设备的UUID参数）"><a href="#blkid（列出设备的UUID参数）" class="headerlink" title="blkid（列出设备的UUID参数）"></a>blkid（列出设备的UUID参数）</h4><ul><li>UUID？<ul><li>UUID是全局唯一标识符（universally unique identifier），这个标识符可以拿来作为挂在或是使用这个设备或文件系统</li></ul></li></ul><h4 id="parted（列出磁盘的分区表类型与分区信息）"><a href="#parted（列出磁盘的分区表类型与分区信息）" class="headerlink" title="parted（列出磁盘的分区表类型与分区信息）"></a>parted（列出磁盘的分区表类型与分区信息）</h4><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310081034102.png" alt="image-20231008103455070"> </p><p>列出/dev/sda磁盘的相关信息</p><h2 id="磁盘分区：gdisk-fdisk"><a href="#磁盘分区：gdisk-fdisk" class="headerlink" title="磁盘分区：gdisk/fdisk"></a>磁盘分区：gdisk/fdisk</h2><p><strong>注意：MBR分区表使用fdisk分区，GPT分区表使用gdisk分区</strong></p><p>① 先通过<code>lsblk</code>或<code>blkid</code>先找到磁盘</p><p>② 使用<code>parted /dev/xxx print</code>来找出内部的分区表类型</p><p>③ 再根据分区表类型判断使用<code>gdisk</code>还是<code>fdisk</code></p><h3 id="gdisk"><a href="#gdisk" class="headerlink" title="gdisk"></a>gdisk</h3><p>常用参数：</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310091407844.png" alt="image-20231009140726801"> </p><ul><li><p>d：删除一个分区 </p></li><li><p>n：增加一个分区</p></li><li><p>p：打印出该磁盘的分区表（常用）</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310091412498.png" alt="image-20231009141232127"> </p></li><li><p>q：不保存分区就直接离开gdisk</p></li><li><p>w：保存分区操作后离开gdisk</p></li></ul><p>该磁盘一共有40GB左右的容量，一共有83886080个扇区，实际上只使用到60708863号扇区</p><p><strong>强调：只要不按下w，直接按q退出就相安无事，此外也不要在MBR分区上使用gdisk，如果命令按错了分区记录会消失，也不要在GPT分区上使用fdisk</strong></p><h4 id="用gdisk新增分区"><a href="#用gdisk新增分区" class="headerlink" title="用gdisk新增分区"></a>用gdisk新增分区</h4><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310091428253.png" alt="image-20231009142805203"> </p><p>First sector：新增磁盘的开始扇区</p><p>Last sector：通过<code>+1G</code>这种操控容量的方式会自动计算结束扇区</p><p>Hex code or GUID：默认是Linux文件系统的8300</p><p>以同样的方法增加两个分区，一个是1G的vfat文件系统（Windows），一个是0.5G的swap（Linux Swap）</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310091434499.png" alt="image-20231009143451444"> </p><p>此时保存退出后系统并不会立刻加载新的分区表，因为Linux担心系统出问题，所以分区表并没有被更新，因此有两种方法：</p><ol><li>重新启动</li><li>通过partprobe来处理</li></ol><h4 id="partprobe更新Linux内核的分区表信息"><a href="#partprobe更新Linux内核的分区表信息" class="headerlink" title="partprobe更新Linux内核的分区表信息"></a>partprobe更新Linux内核的分区表信息</h4><p><code>partprobe -s</code>：更新Linux内核分区表信息</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310091443288.png" alt="image-20231009144356266"> </p><p>查看实际的磁盘分区状态：</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310091444550.png" alt="image-20231009144434520"> </p><p>内核的分区记录：</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310091445531.png" alt="image-20231009144503501"> </p><h4 id="用gdisk删除一个分区"><a href="#用gdisk删除一个分区" class="headerlink" title="用gdisk删除一个分区"></a>用gdisk删除一个分区</h4><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310091457616.png" alt="image-20231009145700564"> </p><p>然后记得用<code>partprobe -s</code>刷新分区表</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310091459915.png" alt="image-20231009145954838"> </p><h2 id="文件系统挂载与卸载"><a href="#文件系统挂载与卸载" class="headerlink" title="文件系统挂载与卸载"></a>文件系统挂载与卸载</h2><ul><li>单一文件系统不应该被重复挂载在不同的挂载点（目录）中</li><li>单一目录不应该重复挂载多个文件系统</li><li>要作为挂载点的目录，理论上应该都是空目录才行</li></ul><h3 id="mount"><a href="#mount" class="headerlink" title="mount"></a>mount</h3><p><code>mount -a</code></p><p><code>mount [-l]</code></p><p><code>mount [-t 文件系统] LABEL='' 挂载点</code></p><p><code>mount [-t 文件系统] UUID='' 挂载点</code></p><p><code>mount[-t 文件系统] 设备文件名 挂载点</code></p><ul><li>-a：依照配置文件/etc/fstab的数据将所有未挂载的磁盘都挂载上来</li><li>-l：单纯的输入mount会显示目前挂载的信息，加上-l可增列Label名称</li><li>-t：可以加上文件系统种类来指定想挂载的类型，常见的Linux支持类型有：xfs、ext3、ext4、reiserfs、vfat、iso9660（光盘格式）、nfs、cifs、smbfs（后面三种是网络文件系统类型）</li></ul><p><strong>通过<code>blkid</code>查看设备的UUID，更推荐使用UUID进行挂载，因为UUID是唯一的</strong></p><ul><li>挂载xfs/ext4/vfat等文件系统</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310121440141.png" alt="image-20231012144031082"> </p><ul><li>挂载CD或DVD光盘<ul><li>光驱一挂载之后就无法退出光盘了，除非将他卸载才能够退出（图形化界面会自动将光盘挂载到/media目录）</li></ul></li><li>挂载vfat中文移动磁盘（USB磁盘）:<code>mount -o codepage=950, iocharset=utf8 UUID="xxxxxxxxx" /data/usb</code><ul><li>vfat格式可以使用codepage来处理，中文语系的代码为950</li><li>默认的CentOS7并不支持NTFS文件系统格式</li></ul></li><li>重新挂载根目录与挂在不特定目录：<code>mount -o remount, rw, auto /</code><ul><li>重新挂载（remount）是个非常重要的机制，如果根目录出现【只读】或者挂载的参数要改变就可以用它</li><li>将目录挂载到另一个目录下：<code>mount --bind /var /data/var</code></li></ul></li><li>umount（将设备文件卸载）<ul><li>-f：强制卸载。可用在类似网络文件系统（NFS）无法读取到的情况下</li><li>-l：立刻卸载文件系统，比-f还牛逼</li><li>-n：不更新/etc/mtab情况下卸载</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux4.0 文件与目录管理</title>
      <link href="/2024/04/08/Linux4-0-%E6%96%87%E4%BB%B6%E4%B8%8E%E7%9B%AE%E5%BD%95%E7%AE%A1%E7%90%86/"/>
      <url>/2024/04/08/Linux4-0-%E6%96%87%E4%BB%B6%E4%B8%8E%E7%9B%AE%E5%BD%95%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux文件与目录管理"><a href="#Linux文件与目录管理" class="headerlink" title="Linux文件与目录管理"></a>Linux文件与目录管理</h1><h2 id="目录与路径"><a href="#目录与路径" class="headerlink" title="目录与路径"></a>目录与路径</h2><h3 id="目录的相关操作"><a href="#目录的相关操作" class="headerlink" title="目录的相关操作"></a>目录的相关操作</h3><table><thead><tr><th>.</th><th align="left">代表此层目录</th></tr></thead><tbody><tr><td>..</td><td align="left">代表上一层目录</td></tr><tr><td>-</td><td align="left">代表前一个工作目录</td></tr><tr><td>~</td><td align="left">代表目前使用者身份所在的家目录</td></tr><tr><td>~ account</td><td align="left">代表account这个使用者的家目录（account是账号名）</td></tr></tbody></table><p>常见的处理目录的命令</p><ul><li><p>cd：切换目录</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309211527193.png" alt="image-20230921152726137"> </p></li><li><p>pwd：显示当前目录</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309211530834.png" alt="image-20230921153004807"> </p><p>-P可以获得正确的目录路径</p><p>/var/mail是/var/spool/mail的链接文件</p></li><li><p>mkdir：建立一个新目录</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309211535605.png" alt="image-20230921153509581"> </p><ul><li>-p：帮助你直接将所需要的目录递归创建</li><li>-m：设置文件权限，不使用默认权限</li><li>默认情况下目录是要一层一层创建的</li><li>图中test目录就是默认权限，而test2目录在创建时赋了711权限</li></ul></li><li><p>rmdir：删除一个空目录</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309211540035.png" alt="image-20230921154029005"> </p><ul><li>-p：连同上层空的目录一起删除</li></ul></li></ul><h3 id="关于执行文件路径的变量：-PATH"><a href="#关于执行文件路径的变量：-PATH" class="headerlink" title="关于执行文件路径的变量：$PATH"></a>关于执行文件路径的变量：$PATH</h3><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309211545003.png" alt="image-20230921154509981"> </p><p>为什么可以在任何地方执行/bin/ls命令？</p><p>因为无论是root还是用户自身账号都有/bin或/usr/bin这个目录在PATH变量内。/bin在CentOS7中就是链接的/usr/bin</p><h2 id="文件与目录管理"><a href="#文件与目录管理" class="headerlink" title="文件与目录管理"></a>文件与目录管理</h2><h3 id="文件与目录的查看：ls"><a href="#文件与目录的查看：ls" class="headerlink" title="文件与目录的查看：ls"></a>文件与目录的查看：ls</h3><p>当我们执行ls命令时，默认显示的只有：非隐藏的文件名、以文件名进行排序及文件名代表的颜色显示而已</p><ul><li>-a：全部文件，连同隐藏文件（开头为.的文件）一起列出来</li><li>-d：仅列出目录本身，而不是列出目录内的文件数据</li><li>-l：详细信息显示，包含文件的属性和权限等数据</li></ul><h3 id="复制、删除与移动：cp、rm、mv"><a href="#复制、删除与移动：cp、rm、mv" class="headerlink" title="复制、删除与移动：cp、rm、mv"></a>复制、删除与移动：cp、rm、mv</h3><ul><li><p>cp（复制文件）</p><ul><li><p>-a：相当于-dr –preserver=all的意思</p><ul><li><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309211611744.png" alt="image-20230921161100718"> </p></li><li><p>直接复制不加任何选项的话，文件的某些属性/权限会被改变</p></li><li><p>如果想要将文件的所有特性一起复制过来就要加-a</p></li></ul></li><li><p>-i：若目标文件已存在，在覆盖时会先询问操作的进行</p><ul><li><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309211604759.png" alt="image-20230921160451735"> </p></li><li><p>用root身份将home目录下的.bashrc复制到/tmp下，并更名为bashrc</p></li><li><p>由于第二次加上了-i选项，所以覆盖前会询问是否覆盖</p></li></ul></li><li><p>-p：连同文件的属性（权限、用户、时间）一起复制，而非使用默认属性</p></li><li><p>-r：递归复制，用于目录的复制操作</p><ul><li><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309211624437.png" alt="image-20230921162455415"> </li><li><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309211625042.png" alt="image-20230921162544018"> </li><li><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309211626642.png" alt="image-20230921162607621"> </li><li>复制/etc/这个目录下的所有内容到/tmp下面，-r选项是可以复制目录，但是文件和目录的权限可能会被改变</li></ul></li></ul></li><li><p>rm（删除文件或目录）</p><ul><li>-f：忽略不存在的文件，不会出现警告信息</li><li>-i：在删除前会询问使用者是否操作<ul><li><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309211639622.png" alt="image-20230921163946580"> </li><li>可以在文件名后面加上通配符*，就可以删掉以文件名开头的所有文件</li><li>将上面cp例子中建立的/tmp/etc这个目录删掉</li><li><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309211644272.png" alt="image-20230921164407249"> </li><li>删除一个带有-开头的文件</li><li><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309211646794.png" alt="image-20230921164601770"></li></ul></li><li>-r：递归删除（危险的选项）</li></ul></li><li><p>mv（移动文件与目录，或重命名）</p><ul><li>-f：强制，如果目标文件已存在，不会询问而直接覆盖</li><li>-i：目标文件已经存在时，询问是否覆盖</li><li>-u：目标文件已经存在时，且source比较新，才会更新</li><li><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309211649311.png" alt="image-20230921164944291"> 将某个文件移动到某个目录</li><li><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309211650159.png" alt="image-20230921165046137"> 对目录重命名</li><li><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309211651646.png" alt="image-20230921165144627"> 建立两个文件，再全部移动/tmp/mvtest2中</li><li><strong>如果有多个源文件或目录，则最后一个目标文件一定是目录</strong></li></ul></li></ul><h3 id="获取路径的文件名与目录名称"><a href="#获取路径的文件名与目录名称" class="headerlink" title="获取路径的文件名与目录名称"></a>获取路径的文件名与目录名称</h3><ul><li>获取文件名：basename</li><li>获取目录名：dirname</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309211655663.png" alt="image-20230921165552644"> </p><h2 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h2><ul><li>cat：由第一行开始显示文件内容</li><li>tac：从最后一行开始显示，可以看出tac是cat的倒着写</li><li>nl：显示的时候同时输出行号</li><li>more：一页一页地显示文件内容</li><li>less：与more类似，但是比more更好的是可以往前翻页</li><li>head：只看前面几行</li><li>tail：只看后面几行</li><li>od：以二进制的方式读取文件内容</li></ul><h3 id="直接查看文件内容"><a href="#直接查看文件内容" class="headerlink" title="直接查看文件内容"></a>直接查看文件内容</h3><p>直接查看文件内容可以用cat/tac/nl这几个命令</p><h4 id="cat-concatenate"><a href="#cat-concatenate" class="headerlink" title="cat(concatenate)"></a>cat(concatenate)</h4><ul><li>-A：相当于-vET的整合选项，可列出一些特殊字符而不是空白而已</li><li>-b：列出行号，仅针对非空白行做行号显示，空白行不标行号</li><li>-E：将结尾的换行符$显示出来</li><li>-n：打印出行号，连同空白行也会有行号，与-b的选项不同</li><li>-T：将【tab】按键以^I（大写i）显示出来</li><li>-v：列出一些看不出来的特殊字符</li></ul><p><strong>查看/etc/issue这个文件的内容</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309241011660.png" alt="image-20230924101120625"> </p><p><strong>加上打印行号</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309241012420.png" alt="image-20230924101253397"> </p><p><strong>不显示空白行的行号</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309241020912.png" alt="image-20230924102015892"> </p><p><strong>将/etc/man_db.conf的内容完整的显示出来（包含特殊字符）</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309241014300.png" alt="image-20230924101453264"> </p><h4 id="tac（反向列示）"><a href="#tac（反向列示）" class="headerlink" title="tac（反向列示）"></a>tac（反向列示）</h4><p>最后一行到第一行反向在屏幕上显示出来</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309241022786.png" alt="image-20230924102204762"> </p><h4 id="nl（添加行号打印）"><a href="#nl（添加行号打印）" class="headerlink" title="nl（添加行号打印）"></a>nl（添加行号打印）</h4><ul><li>-b：指定行号指定的方式，主要有两种：<ul><li>-b a：表示不论是否为空行，也同样列出行号（类似cat -n）</li><li>-b t：如果有空行，空的那一行不要列出行号</li></ul></li><li>-n：列出行号表示的方法，主要有三种<ul><li>-n ln：行号在屏幕的最左方显示</li><li>-n rn：行号在自己栏位的最右方显示，且不加0</li><li>-n rz：行号在自己栏位的最右方显示，且加0</li></ul></li><li>-w：行号栏位的占用的字符数</li></ul><p><strong>用nl列出/etc/issue的内容</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309241031439.png" alt="image-20230924103123413"> </p><p><strong>加上行号，包括空白行</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309241033388.png" alt="image-20230924103309361"> </p><p><strong>让行号前面自动补上0</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309241034144.png" alt="image-20230924103438123"> </p><p><strong>自动补0默认是6位数，把他改成三位数</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309241056258.png" alt="image-20230924105641233"> </p><h3 id="可翻页查看（more-less）"><a href="#可翻页查看（more-less）" class="headerlink" title="可翻页查看（more &amp; less）"></a>可翻页查看（more &amp; less）</h3><h4 id="more（一页一页翻动）"><a href="#more（一页一页翻动）" class="headerlink" title="more（一页一页翻动）"></a>more（一页一页翻动）</h4><p>在more程序运行过程中：</p><ul><li>空格键（space）：代表向下翻一页</li><li>Enter：代表向下翻一行</li><li>/字符串：代表在这个显示的内容当中，向下查找字符串这个关键词</li><li>:f：立刻显示出文件名以及目前显示的行数</li><li>q：代表立刻离开more，不再显示该文件的内容</li><li>b或【ctrl】+b：代表往回翻页，只对文件有用，对管道无用</li></ul><h4 id="less"><a href="#less" class="headerlink" title="less"></a>less</h4><p>less的用法比起more又更加有弹性，在more的时候，我们并没有办法像前面饭，只能往后面看，less就可以使用【pageup】【pagedown】等按键的功能来往前往后翻看文件。在less程序运行过程中</p><ul><li>空格键：：向下翻动一页</li><li>【pagedown】：向下翻动一页</li><li>【pageup】：向上翻动一页</li><li>/字符串：向下查找字符串的功能</li><li>?字符串：向上查找字符串的功能</li><li>n：重复前一个查找（与/或?有关）</li><li>N：反向的重复前一个查找（与/或?有关）</li><li>g：前进到这个数据的第一行</li><li>G：前进到这个数据的最后一行</li><li>q：离开less这个程序</li></ul><h3 id="数据截取（head-tail）"><a href="#数据截取（head-tail）" class="headerlink" title="数据截取（head &amp; tail）"></a>数据截取（head &amp; tail）</h3><h4 id="head（取出前面几行）"><a href="#head（取出前面几行）" class="headerlink" title="head（取出前面几行）"></a>head（取出前面几行）</h4><ul><li><p>-n：后面接数字，代表显示几行的意思（不加-n的话默认显示前十行），如果是负数，例如-100，文件一共有131行，则只显示前31行</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309241536978.png" alt="image-20230924141755703"></p></li></ul><h4 id="tail（取出后面几行）"><a href="#tail（取出后面几行）" class="headerlink" title="tail（取出后面几行）"></a>tail（取出后面几行）</h4><ul><li><p>-n：后面接数字，代表显示几行的意思（不加-n默认显示后十行）</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309241536428.png" alt="image-20230924142250458"> </p><p>不知道man_db.conf有多少行但是想显示100行之后的数据</p></li><li><p>-f：表示持续刷新显示后面所接文件中的内容，要等到按下【ctrl】+ c才会结束</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309241536782.png" alt="image-20230924142715502"> </p></li><li><p>显示/etc/man_db.conf的第11行到20行？</p><p><code>head -n 20 /etc/man_db.conf | tail -n 10</code>：先取前20行，再去后10行</p></li><li><p>显示/etc/man_db.conf的第11行到20行且列出正确的行号？</p><p><code>cat -n /etc/man_db.conf | head -n 20 | tail -n 10</code></p></li></ul><h3 id="非纯文本文件：od"><a href="#非纯文本文件：od" class="headerlink" title="非纯文本文件：od"></a>非纯文本文件：od</h3><p>查看非纯文本文件，例如二进制文件时，用上面的命令来读取会导致乱码。利用这个命令可以将数据文件（data file）或者二进制文件（binary file）的内容数据读出来。</p><ul><li>-t：后面接各种参数<ul><li>a：利用默认的字符来输出</li><li>c：利用ASCII字符来输出</li><li>d[size]：利用十进制（decimal）来输出数据，每个整数占用size Bytes</li><li>f[size]：利用浮点数值（floating）来输出数据，每个数占用size Bytes</li><li>o[size]：利用八进制（octal）来输出数据，每个整数占用size Bytes</li><li>x[size]：利用十六进制（hexadecimal）来输出数据，每个整数占用size Bytes</li></ul></li></ul><p>将/usr/bin/passwd的内容使用ASCII方式来显示：</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309241536484.png" alt="image-20230924144825684"> </p><p>将/etc/issue这个文件的内容以八进制列出存储值与ASCII的对照表（最左边一列是以八进制来表示Bytes数，第二栏0000020代表开头是第16个byte(2x8)的内容的意思）</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309241537194.png" alt="image-20230924145841111"> </p><p>如果想立刻找到password这几个字的ASCII对照，该如何通过od命令来判断？</p><p><code>echo password | od -t oCc</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309241537243.png" alt="image-20230924150541264"> </p><h3 id="修改文件时间或创建新文件：touch"><a href="#修改文件时间或创建新文件：touch" class="headerlink" title="修改文件时间或创建新文件：touch"></a>修改文件时间或创建新文件：touch</h3><ul><li>修改时间（mtime）：当文件的【内容数据】变更时，就会更新这个时间，内容数据指的是文件的内容，而不是文件的属性或权限</li><li>状态时间（ctime）：当文件的【状态】改变时，就会更新这个时间，例如权限与属性被更改了就会更新这个时间</li><li>读取时间（atime）：当【文件内容被读取】时，就会更新这个读取时间，例如当我们使用cat命令来读取文件时，就会更新文件的atime</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309241537353.png" alt="image-20230924152805507"> </p><p>在默认情况下，ls显示出来的是该文件的mtime（修改时间）</p><ul><li><p>touch参数</p><ul><li><p>-a：仅自定义access time</p></li><li><p>-c：仅修改文件的时间，若该文件不存在则不建立新文件</p></li><li><p>-d：后面可以接自定义的日期而不用目前的日期，也可以使用–date=”日期或时间”</p></li><li><p>-m：仅修改mtime</p></li><li><p>-t ：后面可以接自定义的时间而不用目前的时间，格式为[YYYYMMDDhhmm]</p></li><li><p>创建一个新文件并观察时间</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309241633399.png" alt="image-20230924163318379"> </p></li><li><p>将~/.bashrc复制成为bashrc，复制完全的属性，检查其日期</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309241637642.png" alt="image-20230924163706613"> </p></li><li><p>将bashrc改到两天前</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309241642638.png" alt="image-20230924164205608"> </p></li><li><p>将上面的bashrc日期改为2013/07/15 2:34</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309241648329.png" alt="image-20230924164835305"></p></li></ul></li></ul><p><strong>无论如何，touch这个命令最常被使用的情况是</strong></p><ul><li>建立一个空文件</li><li>将某个文件日期自定义为目前（mtime与atime）</li></ul><h2 id="文件与目录的默认权限与隐藏权限"><a href="#文件与目录的默认权限与隐藏权限" class="headerlink" title="文件与目录的默认权限与隐藏权限"></a>文件与目录的默认权限与隐藏权限</h2><h3 id="文件默认权限：umask"><a href="#文件默认权限：umask" class="headerlink" title="文件默认权限：umask"></a>文件默认权限：umask</h3><p>umask：指定目前用户在建立文件或目录的时候的权限默认值</p><ul><li><p>直接输入umask就可以看到数字类型的权限设置值（与一般权限有关的是后面三个数字）</p></li><li><p>在后面接上-S这个选项就会以符号类型的方式来显示出权限</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309261407699.png" alt="image-20230926140750613"></p></li></ul><p>在默认情况下</p><ul><li>对于文件：因为文件默认没有可执行的权限（x），所以只有rw两个权限，也就是最大为666<ul><li>-rw-rw-rw-</li></ul></li><li>对于目录：因为x权限与是否可以进入此目录有关，所以默认为所有权限均开放<ul><li>drwxrwxrwx</li></ul></li></ul><p>umask的数字是 <strong>该默认值需要减掉的权限</strong>。如果要拿掉能写的权限就要输入2以此类推</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309261444914.png" alt="image-20230926144457854"> </p><p>文件默认创建是-rw-rw-rw-，因为查出来的umask默认权限是022（后三个数字），groups和others都被拿掉了2（w）这个权限，所以查出来的就是-rwr–r–这个样子</p><p><strong>umask是可以被设置的</strong></p><p>命令格式：<code>umask 权限数字</code></p><p><code>umask 022</code></p><h3 id="文件隐藏属性"><a href="#文件隐藏属性" class="headerlink" title="文件隐藏属性"></a>文件隐藏属性</h3><p>chattr命令只能在ext2、ext3、ext4的Linux传统文件系统上面完整生效</p><h4 id="chattr（配置文件隐藏属性）"><a href="#chattr（配置文件隐藏属性）" class="headerlink" title="chattr（配置文件隐藏属性）"></a>chattr（配置文件隐藏属性）</h4><p><code>chattr [+-=][ASacdistu] 文件或目录名称</code></p><p>比较常用的几个选项</p><ul><li>a：文件只能增加数据，而不能删除也不能修改数据，只有root才能设置这个属性</li><li>i：可以让一个文件不能被删除、改名、设置连接也无法写入或新增数据，对于系统安全性有很大的助益，只有root才能设置此权限</li><li>S：当你进行任何文件的修改，该修改会同步写入磁盘中</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309261508317.png" alt="image-20230926150849258"> </p><p>设置了i属性后连root都无法删除，只能取消i属性才能删掉</p><h4 id="lsattr（显示文件隐藏属性）"><a href="#lsattr（显示文件隐藏属性）" class="headerlink" title="lsattr（显示文件隐藏属性）"></a>lsattr（显示文件隐藏属性）</h4><p><code>lsattr [-adR] 文件或目录</code></p><ul><li>a：将隐藏文件的属性也显示出来</li><li>d：如果接的是目录，仅列出目录本身的属性而非目录内的文件名</li><li>R：连同子目录的数据也一并列出来</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309261515843.png" alt="image-20230926151512773"> </p><h3 id="文件特殊权限：SUID、SGID、SBIT"><a href="#文件特殊权限：SUID、SGID、SBIT" class="headerlink" title="文件特殊权限：SUID、SGID、SBIT"></a>文件特殊权限：SUID、SGID、SBIT</h3><ul><li><p>SUID</p><p>当s这个标志出现在文件拥有者的x权限上时，例如【-rwsr-xr-x】此时就被称为Set UID，成为SUID的特殊权限</p><ul><li>SUID权限仅对二进制程序（binary program）有效</li><li>执行者对于该程序需要具有x的可执行权限</li><li>本权限仅在执行该程序的过程中有效</li><li>执行者将具有该程序拥有者（owner）的权限</li></ul></li></ul><p>例如：feliks对于passwd这个程序来说是具有x的权限，表示feliks能执行passwd；passwd的拥有者是root这个账号；feliks执行passwd的过程中，会暂时获得root权限，这是/etc/shadow就可以被feliks所执行的passwd所修改。</p><p><strong>SUID仅仅只能使用在二进制程序上，不能够用在shell脚本上面</strong></p><ul><li><p>SGID</p><p>当s这个标志出现在用户组的x权限上，此时称为Set GID</p><p>与SUID不一样的是，SGID可以针对文件或目录来设置</p><p>对文件来说：</p><ul><li>SGID对二进制程序有用</li><li>程序执行者对于该程序来说，需具备x的权限</li><li>执行者在执行的过程中会将获得该程序用户组的支持</li></ul><p>例如：文件locate的权限【-rwx–s–x 1 root slocate】，当我们用feliks这个账户去执行locate时，feliks就会获得slocate用户组的支持</p><p>对目录来说：</p><ul><li>用户如果对此目录有r和x的权限，该用户也能够进入此目录</li><li>用户在此目录下的有效用户组（effective group）将会变成该目录的用户组</li><li>用途：如果用户在此目录下具有w的权限（可以新建文件），则用户所建立的新文件，该新文件的用户组与目录的用户组一致</li></ul></li><li><p>SBIT</p><p>Sticky Bit只针对目录有效，对于文件已经没有效果了，SBIT对于目录的作用是</p><ul><li>当用户对于此目录具有w、x权限，即具有写入的权限</li><li>当用户在该目录建立文件或目录时，仅有自己与root才有权力删除该文件</li></ul><p>例如：在一个目录A内，甲对于A有groups和others的身份，并且拥有该目录的w权限，这表示甲可以对A目录内任何人创建的目录或文件均可删除，但是如果给A加上SBIT权限，则甲只能针对自己建立的文件或目录进行删除、更名、移动等操作</p></li></ul><h3 id="观察文件类型：file"><a href="#观察文件类型：file" class="headerlink" title="观察文件类型：file"></a>观察文件类型：file</h3><p>可以让我们知道文件属于ASCII文件还是数据（data）文件还是二进制（binary）文件</p><p><code>file 文件路径</code></p><h2 id="命令与文件的查找"><a href="#命令与文件的查找" class="headerlink" title="命令与文件的查找"></a>命令与文件的查找</h2><h3 id="脚本文件的查找"><a href="#脚本文件的查找" class="headerlink" title="脚本文件的查找"></a>脚本文件的查找</h3><ul><li><p>which（查找【执行文件】）</p><ul><li><p>-a：将所有由PATH目录中可以找到的命令列出，而不知第一个被找到的命令名称</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309271107930.png" alt="image-20230927110734873"> </p></li><li><p>which命令是找不到history命令的，因为history是bash内置的命令，which默认是找PATH内所设置的目录</p></li></ul></li></ul><h3 id="文件的查找"><a href="#文件的查找" class="headerlink" title="文件的查找"></a>文件的查找</h3><ul><li><p>whereis</p><ul><li><code>whereis [-bmsu] 文件或目录名</code></li><li>-l：可以列出whereis会去查询的几个主要目录</li><li>-b：只找binary（二进制）格式的文件</li><li>-m：只找在说明文件manual路径下的文件</li><li>-s：执照source源文件</li><li>-u：查找不在上述三个项目当中的其他特殊文件</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309271116437.png" alt="image-20230927111606399"> </p></li><li><p>locate / updatedb</p><ul><li>-i：忽略大小写的差异</li><li>-c：不输出文件名，仅计算找到的文件数量</li><li>-l：仅输出几行，例如五行则是<code>-l 5</code></li><li>-S：输出locate所使用的数据库文件的相关信息，包括该数据库记录的文件/目录数量等</li><li>-r：后面可接正则表达式的显示方式</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309271120697.png" alt="image-20230927112046673"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309271121632.png" alt="image-20230927112126603"> </p></li><li><p>updatedb：根据/etc/updatedb.conf的设置去查找系统硬盘内的文件，并更新/var/lib/mlocate内的数据库文件</p></li><li><p>locate：依据/var/lib/mlocate内的数据库记录，找出用户所输入关键词的文件名</p></li><li><p>find</p><ul><li><code>find [PATH] [option] [action]</code></li><li>-mtime n：n是数字，意义是在n天前的【一天之内】被修改过内容的文件</li><li>-mtime +n：列出在n天之前（不包含n天本身）被修改过内容的文件</li><li>-mtime -n：列出在n天之内（包含n天本身）被修改过内容的文件</li><li>-newer file：file是一个实际存在的文件，列出比file还要新的文件</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309271129825.png" alt="image-20230927112947789"> </p><p>寻找/etc下的文件，文件日期比/etc/passwd新就列出</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309271132720.png" alt="image-20230927113216687"> </p><ul><li>-uid n：n为数字，这个数字是使用者的账号ID，UID记录在/etc/passwd里面</li><li>-gid n：n为数字，哦这个数字是用户组名称的ID，GID记录在/etc/group里面</li><li>-user name：name为使用者账号名称</li><li>-group name：name为用户组名称</li><li>-nouser：查找文件的拥有者不在/etc/passwd当中</li><li>-nogroup：查找文件的拥有用户组不存在于/etc/group的文件</li></ul><p>查找home下面属于feliks的文件</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309301427860.png" alt="image-20230930142704801"> </p><ul><li><p><strong>-name filename</strong>：查找文件名称为filename的文件</p></li><li><p><strong>-size [+-]SIZE</strong>：查找比SIZE还要大或小的文件，这个SIZE的规格如下</p><ul><li>c：代表Bytes</li><li>k：代表1024Bytes（查找比50kb还要大的文件【-size +50k】）</li></ul></li><li><p><strong>-type TYPE</strong>：查找文件的类型为TYPE的，类型主要有：</p><ul><li>一般正规文件：f</li><li>设备文件：b,c</li><li>目录：d</li><li>链接文件：l</li><li>socket：s</li><li>FIFO：p</li></ul></li><li><p><strong>-perm mode</strong>：查找文件权限【刚好等于】mode的文件</p></li><li><p><strong>-perm -mode</strong>：查找文件权限【必须要全部囊括mode的权限】的文件（例如要找【-rwxr–r–】的文件，因为【-rwxr-xr-x】囊括了【-rwxr–r–】权限，所以也会被查出来）</p></li><li><p><strong>-perm /mode</strong>：查找文件权限【包含任一mode的权限】的文件（例如要查找【-rwxr-xr-x】，但是【rw——-】也会被查出来，因为有【-rw】属性存在）</p><p>找出文件名为passwd的文件</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310070805485.png" alt="image-20231007080529174"> </p><p>找出文件名钟包含了passwd这个关键字的文件</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310070807508.png" alt="image-20231007080734453"> </p><p>找出/run目录下文件类型为socket的文件名有哪些</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310070810093.png" alt="image-20231007081005040"> </p><p>查找文件当中含有SGID、SUID或SBIT的属性</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310072001719.png" alt="image-20231007200121664"></p></li></ul></li></ul><h2 id="复习（权限与命令之间的关系）"><a href="#复习（权限与命令之间的关系）" class="headerlink" title="复习（权限与命令之间的关系）"></a>复习（权限与命令之间的关系）</h2><ol><li>让用户能进入某目录成为可工作目录的基本权限？<ul><li>可使用的命令：cd等变换工作目录的命令</li><li>目录需要的权限：<strong>用户对这个目录至少需要有x的权限</strong></li><li>额外需求：如果用户想要在这个目录内利用ls查看文件名，则还需要用户对此目录有r的权限</li></ul></li><li>用户在某个目录内读取一个文件的基本权限？<ul><li>可使用的命令：cat、more、less等</li><li>目录需要的权限：用户对这个目录至少需要有x的权限</li><li>文件需要的权限：<strong>用户对文件至少需要有r的权限</strong></li></ul></li><li>让用户可以修改一个文件的基本权限是？<ul><li>可使用的命令：nano或vi编辑器</li><li>目录需要的权限：用户在该文件所在的目录至少要有x的权限</li><li>文件需要的权限：<strong>用户对该文件至少要有r、w权限</strong></li></ul></li><li>让一个用户可以建立一个文件的基本权限是什么<ul><li>目录需要的权限：<strong>用户在该目录要具有w、x的权限，重点是w</strong></li></ul></li><li>让用户进入某目录并执行该目录下的某个命令的基本权限？<ul><li>目录需要的权限：用户在该目录至少要有x的权限</li><li>文件需要的权限：用户在该文件至少要有x的权限</li></ul></li></ol><ul><li>文件具有SUID的特殊权限时，代表当用户执行此二进制程序时，在执行过程中用户会暂时具有程序拥有者的权限</li><li>目录具有SGID的特殊权限时，代表用户再这个目录下面新建的文件的用户组都会于该目录的组名相同</li><li>目录具有SBIT的特殊权限时，代表用户在这个目录下面新建的文件只有自己与root能删除</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux3.0 目录配置</title>
      <link href="/2024/04/08/Linux3-0-%E7%9B%AE%E5%BD%95%E9%85%8D%E7%BD%AE/"/>
      <url>/2024/04/08/Linux3-0-%E7%9B%AE%E5%BD%95%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux目录配置"><a href="#Linux目录配置" class="headerlink" title="Linux目录配置"></a>Linux目录配置</h1><h3 id="Linux目录配置的依据——FHS"><a href="#Linux目录配置的依据——FHS" class="headerlink" title="Linux目录配置的依据——FHS"></a>Linux目录配置的依据——FHS</h3><table><thead><tr><th></th><th>可分享（shareable）</th><th>不可分享（unshareable）</th></tr></thead><tbody><tr><td>不变（static）</td><td>/usr（软件存放处）</td><td>/etc（配置文件）</td></tr><tr><td></td><td>/opt（第三方辅助软件）</td><td>/boot（启动与内核文件）</td></tr><tr><td>可变（variable）</td><td>/var/mail（用户邮箱）</td><td>/var/run（程序相关）</td></tr><tr><td></td><td>/var/spool/news（新闻组）</td><td>/var/lock（程序相关）</td></tr></tbody></table><ul><li>shareable：可以分享给其他系统挂在使用的目录</li><li>unshareable：自己机器上面运行的设备文件或是与程序有关的socket文件等，仅与自身机器相关</li><li>static：不会经常变动的数据</li><li>variable：经常修改的数据，日志文件、一般用户可自行接收的新闻组等</li><li>/（root，根目录）：与启动系统有关<ul><li>所在的分区越小越好</li></ul></li><li>/usr（unix software resource）：与软件安装/执行有关<ul><li>Unix操作系统软件资源所放置的目录</li></ul></li><li>/var（variable）：与系统运行过程有关<ul><li>缓存、日志文件以及某些软件运行所产生的文件，主要是一些经常性变动的文件</li></ul></li></ul><h3 id="目录树（directory-tree）"><a href="#目录树（directory-tree）" class="headerlink" title="目录树（directory tree）"></a>目录树（directory tree）</h3><p>特性：</p><ul><li>目录树的启始点为根目录（/， root）</li><li>每一个目录不止能使用本地分区的文件系统，也可以使用网络上的文件系统</li><li>每个文件在此目录树中的文件名（包含完整路径）都是独一无二的</li></ul><h3 id="绝对路径-相对路径"><a href="#绝对路径-相对路径" class="headerlink" title="绝对路径&amp;相对路径"></a>绝对路径&amp;相对路径</h3><ul><li>./：代表当前目录</li><li>../：代表上一层目录</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux2.0 文件权限概念</title>
      <link href="/2024/04/08/Linux2-0-%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E6%A6%82%E5%BF%B5/"/>
      <url>/2024/04/08/Linux2-0-%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux文件权限概念"><a href="#Linux文件权限概念" class="headerlink" title="Linux文件权限概念"></a>Linux文件权限概念</h1><p>作为一个初学者，文件的权限与属性是学习Linux相当重要的一环，如果屏幕中出现了【Permission deny】的时候，肯定是权限设置错误。</p><h2 id="Linux文件属性"><a href="#Linux文件属性" class="headerlink" title="Linux文件属性"></a>Linux文件属性</h2><p>【ls】是一个查看文件的命令</p><p>【su -】切换身份为root</p><p>登录自己账户系统后，使用【su -】切换身份，执行【ls -al】看看</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309200832684.png" alt="image-20230920083217640"> </p><p><strong>本章后续的chgrp、chown等命令可能都需要使用root的身份才能够处理，所以建议用root的身份来学习，但是不建议直接用root登录系统，建议使用【su -】来切换身份，离开root则使用exit回到Feliks（自己的账号）即可</strong></p><p>ls是list的意思，重点在显示文件的文件名和相关属性，而选项【-al】则表示列出所有的文件详细的权限与属性（包含隐藏文件，就是文件名第一个字符为【.】的文件）</p><p>-rw-r–r–. 1 root root 1857 8月 15 11:39 initial-setup-ks.cfg</p><ul><li><p>第一栏-rw-r–r–：文件的类型与权限（permission）</p><ul><li>第一个字符代表这个文件是目录、文件或链接文件等:</li><li>当为【d】则是目录，例如图里的【.config】文件</li><li>当为【-】则是文件，例如图里的【initial- setup- ks.cfg】文件</li><li>若是【l】则表示为链接文件（link file）</li><li>若是【b】则表示为设备文件里面的 可供存储的周边设备</li><li>若是【c】则表示为设备文件里面的串行端口设备，例如键盘、鼠标等</li><li>接下来的字符是三个为一组且均为【rwx】的三个参数的组合。<ul><li>第一组：文件拥有者可具备的权限</li><li>第二组：加入此用户组的账号的权限</li><li>第三组：非本人且没有加入本用户组的其他账号的权限</li><li>r：可读（read）</li><li>w：可写（write）</li><li>x：可执行（execute）</li><li>如果没有权限则是【-】</li></ul></li></ul><p>例：【-rwxr-xr–】意义？</p><p>[-] :1  [rwx] : 234  [r-x] : 567  [r–] : 890</p><p>1是代表这个文件名为目录或文件</p><p>234是拥有者的权限（可读可写可执行）</p><p>567是同用户组的用户权限（可读可执行）</p><p>890是其他用户权限（可读）</p></li><li><p>第二栏1：表示有多少文件名链接到此节点（inode）</p><ul><li>每个文件都会将他的权限与属性记录到文件系统的inode中，</li></ul></li><li><p>第三栏root：表示这个文件（或目录）的拥有者账号</p></li><li><p>第四栏root：表示这个文件的所属用户组</p><ul><li>在Linux系统中，一个账号会加入一个或多个用户组中。</li></ul></li><li><p>第五栏1857：表示这个文件的容量大小，默认单位是Bytes</p></li><li><p>第六栏：表示这个文件的创建日期或者是最近的修改日期</p><ul><li>如果这个文件被修改的时间距离现在太久，那么时间部分会仅显示年份而已</li><li>显示完整的时间格式：【ls -l –full-time】</li></ul></li><li><p>第七栏：表示文件名</p></li></ul><p><strong>文件和目录是不一样的，目录如果没有x权限则不能进入</strong></p><h2 id="如何修改文件属性与权限"><a href="#如何修改文件属性与权限" class="headerlink" title="如何修改文件属性与权限"></a>如何修改文件属性与权限</h2><ul><li><p>chgrp：修改文件所属用户组</p></li><li><p>chown：修改文件拥有者</p></li><li><p>chmod：修改文件的权限，SUID、SGID、SBIT等特性</p></li></ul><h3 id="修改所属用户组chgrp"><a href="#修改所属用户组chgrp" class="headerlink" title="修改所属用户组chgrp"></a>修改所属用户组chgrp</h3><p><strong>change group的缩写</strong></p><p>命令：<code>chgrp -R dirname/filename</code></p><ul><li>-R：进行递归（recursive）修改，连同子目录下的所有文件、目录都更新成为这个用户组的意思，常常用来修改某一目录内所有的文件的情况</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309201058714.png" alt="image-20230920105857692"> </p><p>文件的用户组被修改成了users</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309241652837.png" alt="image-20230920110008058"> </p><p>因为testing组不存在，所以修改用户组失败</p><h3 id="修改文件拥有者chown"><a href="#修改文件拥有者chown" class="headerlink" title="修改文件拥有者chown"></a>修改文件拥有者chown</h3><p><strong>change owner的缩写</strong></p><p>命令：</p><p><code>chown -R 账号名称 文件或目录  </code></p><p><code>chown -R 账号名称:用户组名称 文件或目录  </code></p><ul><li>-R：进行递归（recursive）修改，连同子目录下的所有文件都修改</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309201107487.png" alt="image-20230920110753464"> </p><p>文件的拥有者被修改成了bin这个账号</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309201109827.png" alt="image-20230920110923809"> </p><p>把文件的拥有者和用户组改回root</p><p><strong>事实上，chown也可以使用【chown user.group file】，但是有些人喜欢设置账号的时候加小数点，这样会造成系统的误判，所以还是比较建议使用【:】</strong></p><p><strong>什么时候使用chgrp、chown？比如要把文件复制给另一个人的时候，会把拥有者和用户组也给复制过去，这时就要用chgrp和chown来修改别人才能修改</strong></p><h3 id="修改权限chmod"><a href="#修改权限chmod" class="headerlink" title="修改权限chmod"></a>修改权限chmod</h3><p>权限的设置方法有两种：数字或者符号</p><h4 id="数字类型修改文件权限"><a href="#数字类型修改文件权限" class="headerlink" title="数字类型修改文件权限"></a>数字类型修改文件权限</h4><p>r:4</p><p>w:2</p><p>x:1</p><p>rwx权限=4+2+1=7</p><p>例如：【-rwxrwx—】owner=rwx=7group=rwx=7others=—=0</p><p>所以权限数字就是770</p><p>命令：</p><p><code>chmod -R xyz 文件或目录</code></p><ul><li>xyz：就是上面的数字类型的权限属性，rwx属性数值相加</li><li>-R：进行递归（recursive）修改，连同子目录下的所有文件都会修改</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309201418200.png" alt="image-20230920141837160"> </p><h4 id="符号类型修改文件权限"><a href="#符号类型修改文件权限" class="headerlink" title="符号类型修改文件权限"></a>符号类型修改文件权限</h4><p>u：user</p><p>g：group</p><p>o：other</p><p>a：all</p><p>+：加入</p><p>-：移除</p><p>=：设置</p><p>命令：</p><p><code>chmod u=rwx,g=rwx,o=rwx [filename]</code></p><p>如果要设置文件【-rwxr-xr-x】</p><p><code>chmod u=rwx,go=rx .bashrc</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309201427645.png" alt="image-20230920142734622"> </p><p>只想增加某个文件所有人都可以写入的权限：</p><p><code>chmod a+w .bashrc</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309201431222.png" alt="image-20230920143151195"> </p><h2 id="目录与文件的权限意义"><a href="#目录与文件的权限意义" class="headerlink" title="目录与文件的权限意义"></a>目录与文件的权限意义</h2><ul><li><p>权限对文件的重要性</p><ul><li>文件是实际含有数据的地方，包括一般文本文件，数据库文件，二进制可执行文件（binary program）等</li><li>r（read）：可读取此文件的实际内容，如读取文本文件的文字内容等</li><li>w（write）：可以编辑、新增或是修改该文件的内容（但不包含删除文件）</li><li>x（execute）：该文件具有可以被系统执行的权限</li></ul><p><strong>在Linux下，文件是否能被执行，是借由是否具有x这个权限来决定的，和文件名后缀没有绝对的关系</strong></p></li><li><p>权限对目录的重要性</p><ul><li><p>目录主要的内容在记录文件名列表，文件名与目录有强烈的关联</p></li><li><p>r（read contents in directory）：表示具有读取目录结构列表的权限，有该权限代表可以查询该目录下的文件名数据，可以利用ls命令将目录的内容列表展示出来</p></li><li><p>w（modify contents of directory）：表示具有改动该目录结构列表的权限</p><ul><li>建立新的文件与目录的权限</li><li>删除已经存在的文件和目录权限（无论该文件的权限是什么）</li><li>将已存在的文件或目录进行更名的权限</li><li>移动该目录内的文件、目录位置的权限</li></ul></li><li><p>x（access directory）：目录的x权限代表用户是否能进入该目录成为工作目录的用途</p><ul><li><p>工作目录就是当前所在的目录</p></li><li><p>例：有目录是<code>drwxr--r-- root root</code>这样的权限，系统有个账号为vbird，并不支持root组，那vbird对此目录有何权限？</p><p>答：vbird对此目录仅具有r的权限，因此vbird可以查询此目录下的文件名列表，但是因为没有x权限，所以不能切换到此目录内</p></li></ul></li></ul></li></ul><h2 id="Linux文件种类与扩展名"><a href="#Linux文件种类与扩展名" class="headerlink" title="Linux文件种类与扩展名"></a>Linux文件种类与扩展名</h2><p>除了前面的一般文件【-】和目录文件【d】之外还有别的种类的文件</p><ul><li><p>文件种类</p><ul><li>常规文件<ul><li>纯文本文件（ASCII）：是Linux系统中最多的一种文件类型，可以直接执行【cat ~/ .bashrc】就可以看到文件的内容</li><li>二进制文件（binary）</li><li>数据文件（data）</li></ul></li><li>目录（directory）：第一个属性为【d】</li><li>链接文件（link）：第一个属性为【l】</li><li>设备与设备文件（device）<ul><li>区块（block）设备文件：第一个属性为【b】，硬盘和软盘就是</li><li>字符（character）设备文件：第一个属性为【c】，串行端口的接口设备，硬盘和鼠标就是</li></ul></li><li>数据接口文件（sockets）：第一个属性为【s】</li><li>数据输送文件（FIFO，pipe）：first-in-first-out，管道，第一个属性为【p】</li></ul></li><li><p>Linux文件扩展名：一个Linux文件能否被执行，与他的第一栏是个属性有关，与文件名没有一点关系，只要权限有【x】，则代表这个文件具有可以被执行的能力</p><ul><li>.sh：脚本或批处理文件</li><li>.Z .tar .tar.gz .zip .tgz：压缩文件</li></ul></li><li><p>Linux文件名长度限制</p><ul><li>单一文件或目录最大容许文件名是255字节</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux1.0 用户与用户组</title>
      <link href="/2024/04/08/Linux1.0%20%E7%94%A8%E6%88%B7%E4%B8%8E%E7%94%A8%E6%88%B7%E7%BB%84/"/>
      <url>/2024/04/08/Linux1.0%20%E7%94%A8%E6%88%B7%E4%B8%8E%E7%94%A8%E6%88%B7%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="用户与用户组"><a href="#用户与用户组" class="headerlink" title="用户与用户组"></a>用户与用户组</h1><h2 id="1-文件拥有者"><a href="#1-文件拥有者" class="headerlink" title="1.文件拥有者"></a>1.文件拥有者</h2><p>由于Linux是一个多人多任务的系统，因此可能常常会有多人同时使用这台主机来进行工作的情况，为了考虑每个人的隐私权以及每个人喜好的工作环境，因此文件拥有者这个角色就显得尤为重要</p><h3 id="添加新的用户账号"><a href="#添加新的用户账号" class="headerlink" title="添加新的用户账号"></a>添加新的用户账号</h3><p><code>useradd</code> 选项 用户名</p><ul><li>-c comment 指定一段注释性描述</li><li>-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录</li><li>-g 用户组 指定用户所属的用户组</li><li>-G 用户组，用户组 指定用户所属的附加组</li><li>-s Shell文件 指定用户的登录Shell</li><li>-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号</li></ul><p>例：</p><p>创建一个用户sam，其中-d和-m选项用来为登录名sam产生一个主目录/home/sam</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202403261511264.png" alt="image-20240326151054166"> </p><p>创建一个用户gem，该用户的登录Shell是/bin/sh，属于group用户组，同时又属于adm和root用户组，其中group用户组是其主组</p><p>① 创建用户组</p><p>② 创建用户</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202403261516118.png" alt="image-20240326151600042"> </p><h3 id="删除用户账号"><a href="#删除用户账号" class="headerlink" title="删除用户账号"></a>删除用户账号</h3><p><code>userdel</code> 选项 用户名</p><p>-r 把用户的主目录一起删除</p><p>例：</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202403261521134.png" alt="image-20240326152150103"> </p><h3 id="修改账号"><a href="#修改账号" class="headerlink" title="修改账号"></a>修改账号</h3><p><code>usermod</code> 选项 用户名</p><ul><li>-c comment 指定一段注释性描述</li><li>-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录</li><li>-g 用户组 指定用户所属的用户组</li><li>-G 用户组，用户组 指定用户所属的附加组</li><li>-s Shell文件 指定用户的登录Shell</li><li>-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号</li><li>-o 可以重复使用其他用户的标识号</li></ul><p>例：</p><p>将sam的登录shell改为ksh，主目录改为/home/z，用户组改为developer</p><p><code>usermod -s /bin/ksh -d /home/z -g developer sam</code></p><h3 id="用户口令管理"><a href="#用户口令管理" class="headerlink" title="用户口令管理"></a>用户口令管理</h3><p><code>passwd</code> 选项  用户名</p><ul><li>-l 锁定口令，即禁用账号</li><li>-u 口令解锁</li><li>-d 使账号无口令</li><li>-f 强迫用户下次登陆时修改口令</li></ul><p>例：</p><p>为用户指定空口令</p><p><code>passwd -d sam</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202403271046966.png" alt="image-20240327104615873"> </p><p>删除sam的密码，使sam下一次登陆时系统不允许该用户登录</p><p><code>passwd -l sam</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202403271047714.png" alt="image-20240327104742684"> </p><h2 id="2-用户组的概念"><a href="#2-用户组的概念" class="headerlink" title="2.用户组的概念"></a>2.用户组的概念</h2><p>进行团队协同工作时非常有用。</p><p>用户组相当于一个个社团，内部成员就是用户组内的成员，同时一个账号可以有多个用户组的支持，可以理解为多个社团有同一个指导老师</p><h3 id="新增用户组"><a href="#新增用户组" class="headerlink" title="新增用户组"></a>新增用户组</h3><p><code>groupadd</code> 选项 用户组</p><ul><li>-g GID 指定新用户组的组标识号（GID）</li><li>-o 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同</li></ul><p>例：</p><p>向系统中新增组group1，新租的组标识号使当前已有的最大组标识号的基础上加一</p><p><code>groupadd group1</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202403271419882.png" alt="image-20240327141926804"> </p><p>向系统中增加了一个新组group2，同时指定新组的组标识号是101</p><p><code>groupadd -g 101 group2</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202403271421211.png" alt="image-20240327142107182"> </p><h3 id="删除一个已有的用户组"><a href="#删除一个已有的用户组" class="headerlink" title="删除一个已有的用户组"></a>删除一个已有的用户组</h3><p><code>groupdel</code> 用户组</p><p>例：</p><p>删除组group1</p><p><code>groupdel gruop1</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202403271436290.png" alt="image-20240327143643249"> </p><h3 id="修改用户组的属性"><a href="#修改用户组的属性" class="headerlink" title="修改用户组的属性"></a>修改用户组的属性</h3><p><code>groupmod</code> 选项 用户组</p><ul><li>-g GID 为用户组指定新的组标识号</li><li>-o 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同</li><li>-n 新用户组 将用户组的名字改为新名字</li></ul><p>例：</p><p>将group2的组标识号改为102</p><p><code>groupmod -g 102 group2</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202403271440777.png" alt="image-20240327144027748"> </p><p>将group2的组标识号改为10000，组名修改为group3</p><p><code>groupmod -g 10000 -n group3 group2</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202403271441457.png" alt="image-20240327144135427"> </p><p><strong>如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限</strong></p><p>用户可以在登陆后，使用newgrp切换到其他用户组，参数就是目的用户组</p><p><code>newgrp root</code></p><p>将当前用户切换到root用户组，前提是root用户组确实是该用户的主组或附加组。</p><h2 id="3-其他人的概念"><a href="#3-其他人的概念" class="headerlink" title="3.其他人的概念"></a>3.其他人的概念</h2><p>不是该用户组的成员都是其他人，在Linux里，任何一个文件都具有用户（User）、所属群组（Group）、其他人（Others）三种身份的个别权限。</p><p>root是万能的！。</p><p><strong>Linux用户身份与用户组记录的文件</strong></p><p>在Linux系统中，默认情况下所有系统上的账号与一般身份用户，还有那个root的相关信息，都记录在/etc/passwd这个文件内，至于个人的密码则是记录在/etc/shadow这个文件内，此外，Linux所有的组名都记录在/etc/group中。这三个文件可以说是Linux系统里面账号密码用户组信息的集中地，不要随便删除。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis7基础</title>
      <link href="/2024/04/08/Redis7%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/04/08/Redis7%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis入门概述"><a href="#Redis入门概述" class="headerlink" title="Redis入门概述"></a>Redis入门概述</h1><p>redis能干嘛？</p><ol><li><p>分布式缓存，挡在mysql数据库前的带刀护卫</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921837.png" alt="image-20231023223346032"> </p></li><li><p>内存存储和持久化（RDB+AOF），redis支持将内存中的数据写到硬盘上，同时不影响继续服务</p></li><li><p>高可用架构搭配</p><ul><li>单机</li><li>主从</li><li>哨兵</li><li>集群</li></ul></li><li><p>缓存穿透、击穿、雪崩</p></li><li><p>分布式锁</p></li><li><p>队列</p></li><li><p>排行榜+点赞</p></li></ol><p>总体功能概述</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921991.png" alt="image-20231023224035644"> </p><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ol><li><p>性能极高：Redis读的速度：110000次/秒，写的速度：81000次/秒</p></li><li><p>Redis数据类型丰富，不仅仅支持键值对类型的数据，同时还提供：</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921869.png" alt="image-20231023224257302"> </p></li><li><p>Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启时直接加载硬盘中的数据进行使用</p></li><li><p>Redis支持数据备份，即master-slave模式</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921042.png" alt="image-20231023224910603"> </p><h2 id="Redis7新特性"><a href="#Redis7新特性" class="headerlink" title="Redis7新特性"></a>Redis7新特性</h2><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921189.png" alt="image-20231023230446939"> </p><p><strong>关闭redis服务器</strong>：</p><ul><li>单实例关闭：<code>redis-cli -a 123456 shutdown</code></li><li>多实例关闭，指定端口关闭：redis-cli -p 6379 shutdown</li></ul><h1 id="Redis10大数据类型"><a href="#Redis10大数据类型" class="headerlink" title="Redis10大数据类型"></a>Redis10大数据类型</h1><p><strong>数据类型是value的数据类型，key的类型都是字符串</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921367.png" alt="image-20231024213951213"> </p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li><p><code>keys *</code>：查看当前库所有key</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921777.png" alt="image-20231024221029566"> </p></li><li><p><code>exists key</code>：判断某个key是否存在</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921696.png" alt="image-20231024221100601"> </p></li><li><p><code>type key</code>：查看你的key是什么类型</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921702.png" alt="image-20231024221121886"> </p></li><li><p><code>del key</code>：删除指定的key数据</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921712.png" alt="image-20231024221147761"> </p></li><li><p><code>unlink key</code>：非阻塞删除，仅仅将keys从keyspace元数据中删除，真正的删除会在后续异步中操作</p></li><li><p><code>ttl key</code>：查看还有多少秒过期，-1表示永不过期，-2表示已过期</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921338.png" alt="image-20231024221219613"> </p></li><li><p><code>expire key 秒钟</code>：为给定的key设置过期时间</p><ul><li>Redis 的过期时间设置有四种形式：<ol><li>EXPIRE 秒——设置指定的过期时间(秒)，表示的是时间间隔。</li><li>PEXPIRE 毫秒——设置指定的过期时间，以毫秒为单位，表示的是时间间隔。</li><li>EXPIREAT 时间戳-秒——设置指定的 Key 过期的 Unix 时间，单位为秒，表示的是时间/时刻。</li><li>PEXPIREAT 时间戳-毫秒——设置指定的 Key 到期的 Unix 时间，以毫秒为单位，表示的是时间/时刻。</li></ol></li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921323.png" alt="image-20231024223228890"> </p></li><li><p><code>move key dbindex [0-15]</code>：将当前数据库的key移动到给定的数据库db当中</p><ul><li>redis默认携带着16个数据库，默认使用0号数据库</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921029.png" alt="image-20231024223504384"> </p></li><li><p><code>select dbindex</code>：切换数据库[0-15]，默认为0</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310242235415.png" alt="image-20231024223553397"> </p></li><li><p><code>dbsize</code>：查看当前数据库key的数量</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310242236041.png" alt="image-20231024223634020"> </p></li><li><p><code>flushdb</code>：清空当前库</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310242237326.png" alt="image-20231024223705308"> </p></li><li><p><code>flushall</code>：通杀全部库</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310242237686.png" alt="image-20231024223737668"></p></li></ul><h2 id="字符串（String）"><a href="#字符串（String）" class="headerlink" title="字符串（String）"></a>字符串（String）</h2><p>string是redis最基本的类型，一个key对应一个value。</p><p>string类型是二进制安全的，意思是redis的string可以包含任何数据，比如jpg图片或者序列化的对象 。</p><p>string类型是Redis最基本的数据类型，一个redis中字符串value最多可以是512M</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310281127026.png" alt="image-20231028112706990"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921925.png" alt="image-20231028112739153"> </p><h3 id="最常用的命令"><a href="#最常用的命令" class="headerlink" title="最常用的命令"></a>最常用的命令</h3><h4 id="set-key-value"><a href="#set-key-value" class="headerlink" title="set key value"></a>set key value</h4><p><code>set key value [NX|XX] [GET] [EX seconds|PX milliseconds|EXAT unix-time-seconds|PXAT unix-time-milliseconds|KEEPTTL]</code></p><ul><li><p><code>EX seconds</code>：以秒为单位设置过期时间</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921930.png" alt="image-20231026230101867"> </p></li><li><p><code>PX milliseconds</code>：以毫秒为单位设置过期时间</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921922.png" alt="image-20231026230209223"> </p></li><li><p><code>EXAT timestamp</code>：设置以秒为单位的UNIX时间戳所对应的时间为过期时间</p></li><li><p><code>PXAT milliseconds-timestamp</code>：设置以毫秒为单位的UNIX时间戳所对应的时间为过期时间</p></li><li><p><code>NX</code>：键不存在的时候设置键值</p></li><li><p><code>XX</code>：键存在的时候设置键值</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921912.png" alt="image-20231026225730606"> </p></li><li><p><code>KEEPTTL</code><strong>（重要）</strong>：<strong>保留设置前指定键的生存时间</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921919.png" alt="image-20231026230631576"> </p></li><li><p><code>GET</code>：返回指定键原本的值，若键不存在时返回nil</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921751.png" alt="image-20231026225917226"></p></li></ul><h4 id="get-key"><a href="#get-key" class="headerlink" title="get key"></a>get key</h4><h3 id="同时设置-获取多个键值"><a href="#同时设置-获取多个键值" class="headerlink" title="同时设置/获取多个键值"></a>同时设置/获取多个键值</h3><h4 id="MSET-key-value-key-value-……"><a href="#MSET-key-value-key-value-……" class="headerlink" title="MSET key value [key value ……]"></a>MSET key value [key value ……]</h4><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921959.png" alt="image-20231026231216551"> </p><h4 id="MGET-key-key-……"><a href="#MGET-key-key-……" class="headerlink" title="MGET key [key ……]"></a>MGET key [key ……]</h4><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921019.png" alt="image-20231026231234380"> </p><h4 id="mset-mget-msetnx"><a href="#mset-mget-msetnx" class="headerlink" title="mset/mget/msetnx"></a>mset/mget/msetnx</h4><p>msetnx只有在全部键都不存在的情况下才会执行成功</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921032.png" alt="image-20231026231452451"> </p><h3 id="获取指定区间范围内的值"><a href="#获取指定区间范围内的值" class="headerlink" title="获取指定区间范围内的值"></a>获取指定区间范围内的值</h3><h4 id="getrange"><a href="#getrange" class="headerlink" title="getrange"></a>getrange</h4><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921108.png" alt="image-20231026232015484"> </p><h4 id="setrange"><a href="#setrange" class="headerlink" title="setrange"></a>setrange</h4><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921115.png" alt="image-20231026232031029"> </p><h3 id="数值增减"><a href="#数值增减" class="headerlink" title="数值增减"></a>数值增减</h3><p><strong>一定要是数字才能进行增减</strong></p><h4 id="递增数字（INCR-key）"><a href="#递增数字（INCR-key）" class="headerlink" title="递增数字（INCR key）"></a>递增数字（INCR key）</h4><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921797.png" alt="image-20231028110147135"> </p><h4 id="增加指定的整数（INCRBY-key-increment）"><a href="#增加指定的整数（INCRBY-key-increment）" class="headerlink" title="增加指定的整数（INCRBY key increment）"></a>增加指定的整数（INCRBY key increment）</h4><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921885.png" alt="image-20231028110322042"> </p><h4 id="递减数值（DECR-key）"><a href="#递减数值（DECR-key）" class="headerlink" title="递减数值（DECR key）"></a>递减数值（DECR key）</h4><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921921.png" alt="image-20231028110337433"> </p><h4 id="减少指定的整数（DECRBY-key-increment）"><a href="#减少指定的整数（DECRBY-key-increment）" class="headerlink" title="减少指定的整数（DECRBY key increment）"></a>减少指定的整数（DECRBY key increment）</h4><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921919.png" alt="image-20231028110350473"> </p><h3 id="获取字符串长度和内容追加"><a href="#获取字符串长度和内容追加" class="headerlink" title="获取字符串长度和内容追加"></a>获取字符串长度和内容追加</h3><h4 id="STRLEN-key"><a href="#STRLEN-key" class="headerlink" title="STRLEN key"></a>STRLEN key</h4><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921927.png" alt="image-20231028110837268"> </p><h4 id="APPEND-key-value"><a href="#APPEND-key-value" class="headerlink" title="APPEND key value"></a>APPEND key value</h4><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921991.png" alt="image-20231028110848004"> </p><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921764.png" alt="image-20231028111639555"> </p><h4 id="setex（相当于set-expire）"><a href="#setex（相当于set-expire）" class="headerlink" title="setex（相当于set+expire）"></a>setex（相当于set+expire）</h4><p>设置键值对的过期时间</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921761.png" alt="image-20231028111859429"> </p><h4 id="setnx"><a href="#setnx" class="headerlink" title="setnx"></a>setnx</h4><p>当键不存在的时候才会创建成功</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921816.png" alt="image-20231028111915443"> </p><h3 id="getset（先get再set）"><a href="#getset（先get再set）" class="headerlink" title="getset（先get再set）"></a>getset（先get再set）</h3><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921871.png" alt="image-20231028112102913"> </p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>文章点赞、点赞某个商品等情况均可使用<code>INCR key</code></p><h2 id="列表（List）"><a href="#列表（List）" class="headerlink" title="列表（List）"></a>列表（List）</h2><p>Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）</p><p>它的底层实际是个双端链表，最多可以包含 2^32 - 1 个元素 (4294967295, 每个列表超过40亿个元素)</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921830.png" alt="image-20231028112604471"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921895.png" alt="image-20231028112802727"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921606.png" alt="image-20231028112822195"> </p><h3 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="lpush-rpush-lrange"><a href="#lpush-rpush-lrange" class="headerlink" title="lpush/rpush/lrange"></a>lpush/rpush/lrange</h4><p>从左边进</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921738.png" alt="image-20231028113527125"> </p><p>从右边进</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921656.png" alt="image-20231028113543717"> </p><p>遍历的时候两个顺序有所不同</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921740.png" alt="image-20231028113610635"> </p><p><strong>没有rrange，只有lrange</strong></p><h4 id="lpop-rpop"><a href="#lpop-rpop" class="headerlink" title="lpop/rpop"></a>lpop/rpop</h4><p>lpop：从左边弹出</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921742.png" alt="image-20231028113806734"> </p><p>rpop：从右边弹出</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921783.png" alt="image-20231028113846973"> </p><h4 id="lindex"><a href="#lindex" class="headerlink" title="lindex"></a>lindex</h4><p>按照索引下标获得元素（从上到下）</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921557.png" alt="image-20231028114649622"> </p><h4 id="llen"><a href="#llen" class="headerlink" title="llen"></a>llen</h4><p>获取列表中元素个数</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921696.png" alt="image-20231028114719317"> </p><h4 id="lrem-key-数字N-v1"><a href="#lrem-key-数字N-v1" class="headerlink" title="lrem key 数字N v1"></a>lrem key 数字N v1</h4><p>删除N个 值等于v1的元素</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921653.png" alt="image-20231028114921587"> </p><p>删除了list3里面3个值等于v2的元素</p><h4 id="ltrim-key-开始index-结束index"><a href="#ltrim-key-开始index-结束index" class="headerlink" title="ltrim key 开始index 结束index"></a>ltrim key 开始index 结束index</h4><p>截取指定范围的值后再赋值给key</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921846.png" alt="image-20231028115744232"> </p><p>截取5~9号元素赋值给list3（从0开始算）</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921763.png" alt="image-20231028115819108"> </p><h4 id="rpoplpush-源列表-目标列表"><a href="#rpoplpush-源列表-目标列表" class="headerlink" title="rpoplpush 源列表 目标列表"></a>rpoplpush 源列表 目标列表</h4><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921853.png" alt="image-20231028151048798"> </p><p>将list1中的元素弹出，并弹入给list2中</p><p>list1中的元素从最后一个元素开始弹出</p><h4 id="lset-key-index-value"><a href="#lset-key-index-value" class="headerlink" title="lset key index value"></a>lset key index value</h4><p>将列表中index位置的值改成value</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921552.png" alt="image-20231028151659457"> </p><p>将3号索引位置的值改成”Java”</p><h4 id="linsert-key-before-after-已有值-插入的新值"><a href="#linsert-key-before-after-已有值-插入的新值" class="headerlink" title="linsert key before/after 已有值 插入的新值"></a>linsert key before/after 已有值 插入的新值</h4><p>在”Java”前插入”PHP”</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921510.png" alt="image-20231028151959451"> </p><p>在”Java”后插入”Mysql”</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921667.png" alt="image-20231028152034892"> </p><h2 id="哈希表（Hash）"><a href="#哈希表（Hash）" class="headerlink" title="哈希表（Hash）"></a>哈希表（Hash）</h2><p>Redis hash 是一个 string 类型的 field（字段） 和 value（值） 的映射表，hash 特别适合用于存储对象。</p><p>Redis 中每个 hash 可以存储 2^32 - 1 键值对（40多亿）</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921679.png" alt="image-20231028152656920"> </p><p>仍然还是KV键值对的模式，但是value用来存放一对键值对</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921684.png" alt="image-20231028153010474"> </p><h3 id="常用命令-2"><a href="#常用命令-2" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="hset-hget-hmset-hmget-hgetall-hdel"><a href="#hset-hget-hmset-hmget-hgetall-hdel" class="headerlink" title="hset/hget/hmset/hmget/hgetall/hdel"></a>hset/hget/hmset/hmget/hgetall/hdel</h4><p>hset：</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921710.png" alt="image-20231028153435724"> </p><p>hget：</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921391.png" alt="image-20231028153505778"> </p><p>hmset和hset一致</p><p>hmget：可以一次性获取键值对中map里多个键对应的值</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921361.png" alt="image-20231028153930046"> </p><p>hgetall：遍历map所有键和值</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921516.png" alt="image-20231028154242748"> </p><p>hdel：删除键值对</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921436.png" alt="image-20231028154507785"> </p><p>找到age并且把age对应的值也一并删除了</p><h4 id="hlen"><a href="#hlen" class="headerlink" title="hlen"></a>hlen</h4><p>获取某个key内的全部数量</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921574.png" alt="image-20231028154700452"> </p><p>user:001里面只剩下id和name</p><h4 id="hexists-key-在key里面的某个值的key"><a href="#hexists-key-在key里面的某个值的key" class="headerlink" title="hexists key 在key里面的某个值的key"></a>hexists key 在key里面的某个值的key</h4><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921704.png" alt="image-20231028154904963"> </p><p>在user:001这个key里面有name和id两个key，没有score这个key</p><h4 id="hkeys-hvals"><a href="#hkeys-hvals" class="headerlink" title="hkeys/hvals"></a>hkeys/hvals</h4><p>hkeys：获取当前key下的所有key</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921186.png" alt="image-20231028155035935"> </p><p>hvals：获取当前key下的所有key对应的value值</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921666.png" alt="image-20231028155152041"> </p><h4 id="hincrby-hincrbyfloat"><a href="#hincrby-hincrbyfloat" class="headerlink" title="hincrby/hincrbyfloat"></a>hincrby/hincrbyfloat</h4><p>hincrby：让某个值以<strong>整数形式</strong>自增</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921664.png" alt="image-20231028155442902"> </p><p>hincrbyfloat：让某个值以<strong>浮点数形式</strong>自增</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921235.png" alt="image-20231028155648274"> </p><h4 id="hsetnx"><a href="#hsetnx" class="headerlink" title="hsetnx"></a>hsetnx</h4><p>若没有则赋值，若有则无效</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921237.png" alt="image-20231028155810277"> </p><h2 id="集合（Set）"><a href="#集合（Set）" class="headerlink" title="集合（Set）"></a>集合（Set）</h2><p>Redis 的 Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据，集合对象的编码可以是 intset 或者 hashtable。</p><p>Redis 中Set集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。</p><p>集合中最大的成员数为 2^32 - 1 (4294967295, 每个集合可存储40多亿个成员)</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921482.png" alt="image-20231028160255264"> </p><p>单值多value且无重复</p><h3 id="常用命令-3"><a href="#常用命令-3" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="SADD-key-member-member-…"><a href="#SADD-key-member-member-…" class="headerlink" title="SADD key member [member …]"></a>SADD key member [member …]</h4><p>添加元素</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921888.png" alt="image-20231028161653323"> </p><p>由于set的性质不能在集合中插入重复的元素，所以只有五个元素被插入进集合中</p><h4 id="SMEMBERS-key"><a href="#SMEMBERS-key" class="headerlink" title="SMEMBERS key"></a>SMEMBERS key</h4><p>遍历集合中的所有元素</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921030.png" alt="image-20231028162512557"> </p><h4 id="SISMEMBER-key-member"><a href="#SISMEMBER-key-member" class="headerlink" title="SISMEMBER key member"></a>SISMEMBER key member</h4><p>判断元素是否在集合中</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921028.png" alt="image-20231028162526420"> </p><h4 id="SREM-key-member-member-…"><a href="#SREM-key-member-member-…" class="headerlink" title="SREM key member [member …]"></a>SREM key member [member …]</h4><p>删除元素</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921291.png" alt="image-20231028164925685"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921304.png" alt="image-20231028162811721"> </p><h4 id="scard"><a href="#scard" class="headerlink" title="scard"></a>scard</h4><p>获取集合里面的元素个数</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921489.png" alt="image-20231028162843430"> </p><h4 id="SRANDMEMBER-key-数字"><a href="#SRANDMEMBER-key-数字" class="headerlink" title="SRANDMEMBER key [数字]"></a>SRANDMEMBER key [数字]</h4><p>从集合中随机<strong>展现设置的数字个数</strong>元素，元素不删除</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921891.png" alt="image-20231028162922640"> </p><h4 id="SPOP-key-数字"><a href="#SPOP-key-数字" class="headerlink" title="SPOP key [数字]"></a>SPOP key [数字]</h4><p>从集合中随机<strong>弹出</strong>一个元素，弹出一个删一个</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921889.png" alt="image-20231028163328829"> </p><h4 id="smove-key1-key2-在key1里已存在的某个值"><a href="#smove-key1-key2-在key1里已存在的某个值" class="headerlink" title="smove key1 key2 在key1里已存在的某个值"></a>smove key1 key2 在key1里已存在的某个值</h4><p>将key1里已存在的某个值赋给key2</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921894.png" alt="image-20231028163429005"> </p><p>set1中只有1 2 5 三个元素，set2中只有3 4 6三个元素</p><p>把set1中的2移给set2，此时的set1</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921392.png" alt="image-20231028164216988"> </p><h4 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h4><h5 id="差集"><a href="#差集" class="headerlink" title="差集"></a>差集</h5><p>属于集合A但不属于集合B的元素构成的集合</p><p><code>SDIFF key [key ...]</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921387.png" alt="image-20231028173433117"> </p><h5 id="并集"><a href="#并集" class="headerlink" title="并集"></a>并集</h5><p>属于集合A或者属于集合B合并后的元素</p><p><code>SUNION key [key ...]</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921390.png" alt="image-20231028173531764"> </p><h5 id="交集"><a href="#交集" class="headerlink" title="交集"></a>交集</h5><p>属于集合A也属于集合B共同拥有的元素构成的集合</p><p><code>SINTER key [key ...]</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921589.png" alt="image-20231028173641390"> </p><p><code>SINTERCARD numkeys key [key ...] [LIMIT limit]</code></p><p>numkeys：有多少个key</p><p><code>SINTERCARD 2 seta setb</code>：有2个key</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921984.png" alt="image-20231028174143775"> </p><p>seta和setb两个集合的交集元素有3个</p><p>交集元素有三个但是只让他显示一条</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921985.png" alt="image-20231028174421598"> </p><h3 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>抽奖</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921411.png" alt="image-20231028174639836"> </p><ul><li>微信朋友圈点赞查看同赞朋友</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921203.png" alt="image-20231028174910631"> </p><ul><li>QQ可能认识的人</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921421.png" alt="image-20231028175023418"> </p><h2 id="有序集合（ZSet）"><a href="#有序集合（ZSet）" class="headerlink" title="有序集合（ZSet）"></a>有序集合（ZSet）</h2><p>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。</p><p>不同的是每个元素都会关联一个double类型的分数，redis正是通过分数来为集合中的成员进行从小到大的排序。</p><p>zset的成员是唯一的,但分数(score)却可以重复。</p><p>zset集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。 集合中最大的成员数为 2^32 - 1</p><p><strong>zset在set的基础上，每个val值前加一个score分数值，之前set是k1 v1 v2 v3，现在zset是k1 score1 v1 score2 v2。</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921708.png" alt="image-20231028215212310"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921151.png" alt="image-20231028215240393"> </p><h3 id="常用命令-4"><a href="#常用命令-4" class="headerlink" title="常用命令"></a>常用命令</h3><p>向有序集合中加入一个元素和该元素的分数</p><h4 id="ZADD-key-score-member-score-member-…"><a href="#ZADD-key-score-member-score-member-…" class="headerlink" title="ZADD key score member [score member …]"></a>ZADD key score member [score member …]</h4><p>添加元素</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921706.png" alt="image-20231029105506583"> </p><h4 id="ZRANGE-key-start-stop-WITHSCORES"><a href="#ZRANGE-key-start-stop-WITHSCORES" class="headerlink" title="ZRANGE key start stop [WITHSCORES]"></a>ZRANGE key start stop [WITHSCORES]</h4><p>按照元素分数从小到大的顺序返回索引从start到stop之间的所有元素</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921408.png" alt="image-20231029105532053"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921420.png" alt="image-20231029105607518"> </p><h4 id="ZREVRANGE-key-start-stop-WITHSCORES"><a href="#ZREVRANGE-key-start-stop-WITHSCORES" class="headerlink" title="ZREVRANGE key start stop [WITHSCORES]"></a>ZREVRANGE key start stop [WITHSCORES]</h4><p>按照元素分数从大到小的顺序返回索引从start到stop之间的所有元素</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921477.png" alt="image-20231029105810822"> </p><h4 id="ZRANGEBYSCORE-key-min-max-WITHSCORES-LIMIT-offset-count"><a href="#ZRANGEBYSCORE-key-min-max-WITHSCORES-LIMIT-offset-count" class="headerlink" title="ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]"></a>ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]</h4><p>获取指定分数范围</p><ul><li><code>withscore</code>：显示每对键值对的分数</li><li><code>(</code>：不包含</li><li><code>limit</code>：返回限制，limit 开始下标步 多少步</li></ul><p>显示60~90（包含60和90）分的元素</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921514.png" alt="image-20231029110058452"> </p><p>显示60~90（不包含60）的元素</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921505.png" alt="image-20231029110130626"> </p><p>显示大于60小于90的元素（60和90都取不到）</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921200.png" alt="image-20231029110210779"> </p><p>加上limit，要求一次显示多少条（有点像分页查询）</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921223.png" alt="image-20231029110320301"> </p><h4 id="ZSCORE-key-member"><a href="#ZSCORE-key-member" class="headerlink" title="ZSCORE key member"></a>ZSCORE key member</h4><p>获取元素的分数</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921381.png" alt="image-20231029110419739"> </p><h4 id="ZCARD-key"><a href="#ZCARD-key" class="headerlink" title="ZCARD key"></a>ZCARD key</h4><p>获取集合中元素的数量</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921230.png" alt="image-20231029110505866"> </p><h4 id="ZREM-key-某score下对应的value值"><a href="#ZREM-key-某score下对应的value值" class="headerlink" title="ZREM key 某score下对应的value值"></a>ZREM key 某score下对应的value值</h4><p>删除元素</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921286.png" alt="image-20231029110607850"> 删除了”v6”和”v5”</p><h4 id="ZINCRBY-key-increment-member"><a href="#ZINCRBY-key-increment-member" class="headerlink" title="ZINCRBY key increment member"></a>ZINCRBY key increment member</h4><p>增加某个元素的分数</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921387.png" alt="image-20231029110752362"> </p><h4 id="ZCOUNT-key-min-max"><a href="#ZCOUNT-key-min-max" class="headerlink" title="ZCOUNT key min max"></a>ZCOUNT key min max</h4><p>获取指定分数范围内的元素个数</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921392.png" alt="image-20231029111719270"> </p><h4 id="ZMPOP"><a href="#ZMPOP" class="headerlink" title="ZMPOP"></a>ZMPOP</h4><p>从键名列表中的第一个非空排序集中弹出一个或多个元素，他们的成员是分数对</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921394.png" alt="image-20231029114418696"> </p><p>按key的输入顺序从左到右选择第一个非空的有序集合删除并返回元素，numkeys为输入的key数量，必须要等于输入key数，否则会报错，参数为min则从最小开始，参数为max则从最大的开始，count为弹出元素的最大数量，默认是1</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921417.png" alt="image-20231029115854348"> </p><h4 id="ZRANK-key-values"><a href="#ZRANK-key-values" class="headerlink" title="ZRANK key values"></a>ZRANK key values</h4><p>获得下标值</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921371.png" alt="image-20231029120152326"> </p><h4 id="ZREVRANK-key-values"><a href="#ZREVRANK-key-values" class="headerlink" title="ZREVRANK key values"></a>ZREVRANK key values</h4><p>逆序获得下标值</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921379.png" alt="image-20231029120244520"> </p><h3 id="应用场景-2"><a href="#应用场景-2" class="headerlink" title="应用场景"></a>应用场景</h3><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921362.png" alt="image-20231029105408000"> </p><h2 id="位图（bitmap）"><a href="#位图（bitmap）" class="headerlink" title="位图（bitmap）"></a>位图（bitmap）</h2><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921307.png" alt="image-20231024215740300"> </p><p>用在哪？</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921312.png" alt="image-20231029161820053"> </p><p>说明：<strong>用String类型作为底层数据结构实现的一种统计二值状态的数据类型，位图的本质是数组</strong>，它是基于String数据类型的按位的操作。该数组有多个二进制位组成，每个二进制位都对应一个偏移量（就是索引）。</p><p>Bitmap支持的最大位数是<strong>2^32</strong>位，它可以极大的节约存储空间，使用512M内存就可以存储多达42.9亿的字节信息（2^32 = 4294967296）</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921380.png" alt="image-20231029162555281"> </p><h3 id="常用命令-5"><a href="#常用命令-5" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="setbit-key-offset-value"><a href="#setbit-key-offset-value" class="headerlink" title="setbit key offset value"></a>setbit key offset value</h4><p>setbit 键 偏移位 只能0或1</p><p><strong>Bitmap的偏移量是从0开始算的</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921332.png" alt="image-20231029165025330"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921336.png" alt="image-20231029165245577"> </p><h4 id="getbit"><a href="#getbit" class="headerlink" title="getbit"></a>getbit</h4><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921396.png" alt="image-20231029165503402"> </p><h4 id="strlen"><a href="#strlen" class="headerlink" title="strlen"></a>strlen</h4><p>统计字节数占用多少</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921306.png" alt="image-20231029172503087"> </p><p>不是统计字符串长度，而是占据几个字节，超过8位后自己按照8位一组<strong>一byte</strong>再扩容</p><p>0<del>7 8</del>15</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921300.png" alt="image-20231029172716876"> 你看，扩容了</p><h4 id="bitcount-key-start-end"><a href="#bitcount-key-start-end" class="headerlink" title="bitcount key [start end]"></a>bitcount key [start end]</h4><p>全部键里面含有1的有多少个</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921369.png" alt="image-20231029173411168"> </p><p><strong>bitmap是按八个为一组算的，bitcount算的是byte为单位，所以不像setbit和getbit一样可以定位到bit</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921302.png" alt="image-20231029220933100"> </p><p>如上，0<del>1是八个一组，1</del>2是八个一组</p><h4 id="bitop"><a href="#bitop" class="headerlink" title="bitop"></a>bitop</h4><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921409.png" alt="image-20231029174919198"> </p><ul><li>operation：<ul><li>and：交集</li><li>or：并集</li><li>not</li><li>xor</li></ul></li><li>destkey：将生成的结果集要存放的key</li></ul><p>用来判断连续几天签到的用户有多少</p><p>比如先创建两个用户</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921374.png" alt="image-20231029174238991"> </p><p>0号和1号用户都存进uid:map里面</p><p>0、1、2、3号用户在20231029这天都签到了</p><p>0、1号用户在20231030这天签到了</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921157.png" alt="image-20231029174544164"> </p><p>求连续两天签到的用户有多少个（把两个表相交的用户存进新的表k3中）</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921159.png" alt="image-20231029174807195"> </p><h4 id="setbit和getbit的案例说明"><a href="#setbit和getbit的案例说明" class="headerlink" title="setbit和getbit的案例说明"></a>setbit和getbit的案例说明</h4><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921151.png" alt="image-20231029221129350"> </p><h2 id="基数统计（HyperLogLog）"><a href="#基数统计（HyperLogLog）" class="headerlink" title="基数统计（HyperLogLog）"></a>基数统计（HyperLogLog）</h2><p>HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定且是很小的。</p><p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基 数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</p><p>但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p><h3 id="常用命令-6"><a href="#常用命令-6" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="PFADD-key-element-element-…"><a href="#PFADD-key-element-element-…" class="headerlink" title="PFADD key element [element …]"></a>PFADD key element [element …]</h4><p>添加指定元素到HyperLogLog中</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921299.png" alt="image-20231030154208283"> </p><h4 id="PFCOUNT-key-key-…"><a href="#PFCOUNT-key-key-…" class="headerlink" title="PFCOUNT key [key …]"></a>PFCOUNT key [key …]</h4><p>返回给定HyperLogLog的基数估算值（去重）</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921301.png" alt="image-20231030154227639"> </p><h4 id="PFMERGE-destkey-sourcekey-sourcekey-…"><a href="#PFMERGE-destkey-sourcekey-sourcekey-…" class="headerlink" title="PFMERGE destkey sourcekey [sourcekey …]"></a>PFMERGE destkey sourcekey [sourcekey …]</h4><p>将多个HyperLogLog合并为一个HyperLogLog</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921319.png" alt="image-20231030154252584"> </p><h2 id="地理空间（GEO）"><a href="#地理空间（GEO）" class="headerlink" title="地理空间（GEO）"></a>地理空间（GEO）</h2><p>Redis GEO 主要用于存储地理位置信息，并对存储的信息进行操作，包括：</p><p>添加地理位置的坐标。</p><p>获取地理位置的坐标。</p><p>计算两个位置之间的距离。</p><p>根据用户给定的经纬度坐标来获取指定范围内的地理位置集合</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921180.png" alt="image-20231031111832791"> </p><p><strong>获取某个地址的经纬度：</strong></p><p><a href="https://lbs.qq.com/getPoint/">https://lbs.qq.com/getPoint/</a></p><h3 id="常用命令-7"><a href="#常用命令-7" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="GEOADD-key-longitude-latitude-member-longitude-latitude-member-…"><a href="#GEOADD-key-longitude-latitude-member-longitude-latitude-member-…" class="headerlink" title="GEOADD key longitude latitude member [longitude latitude member …]"></a>GEOADD key longitude latitude member [longitude latitude member …]</h4><p>多个经度（longitude）、纬度（latitude）、位置名称（member）添加到指定的key中</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921074.png" alt="image-20231031120157425"> </p><p><strong>解决中文乱码问题</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921157.png" alt="image-20231031120257838"> </p><h4 id="GEOPOS-key-member-member-…"><a href="#GEOPOS-key-member-member-…" class="headerlink" title="GEOPOS key member [member …]"></a>GEOPOS key member [member …]</h4><p>从键里面返回所有给定元素的位置（经度和纬度）</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921154.png" alt="image-20231031120744276"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921178.png" alt="image-20231031121030784"> </p><h4 id="GEODIST-key-member1-member2-m-km-ft-mi"><a href="#GEODIST-key-member1-member2-m-km-ft-mi" class="headerlink" title="GEODIST key member1 member2 [m|km|ft|mi]"></a>GEODIST key member1 member2 [m|km|ft|mi]</h4><p>返回两个给定位置之间的距离</p><ul><li>m：米</li><li>km：千米</li><li>ft：英尺</li><li>mi：英里</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921207.png" alt="image-20231101084255354"> </p><p>不加双引号也可以</p><h4 id="GEORADIUS"><a href="#GEORADIUS" class="headerlink" title="GEORADIUS"></a>GEORADIUS</h4><p>以给定的经纬度为中心，返回与中心的距离不超过给定最大距离的所有位置元素</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921854.png" alt="image-20231101084823466"> </p><ul><li>WITHDIST：返回位置元素的同时，将位置元素与中心之间的距离也一并返回。距离的单位和用户给定的范围单位保持一致</li><li>WITHCOORD：将位置元素的经度和纬度也一并返回</li><li>WITHHASH：以52位有符号整数的形式（Integer），返回位置元素经过元素geohash编码的有序集合分值。这个选项主要用于底层应用或者调试，史记中的作用不大</li><li>COUNT：限定返回的记录数</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921038.png" alt="image-20231101221705540"> </p><h4 id="GEORADIUSBYMEMBER"><a href="#GEORADIUSBYMEMBER" class="headerlink" title="GEORADIUSBYMEMBER"></a>GEORADIUSBYMEMBER</h4><p>跟GEORADIUS类似</p><p>直接输入名字判断在其周围范围内的坐标</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921170.png" alt="image-20231101221946747"> </p><h4 id="GEOHASH-key-member-member-…"><a href="#GEOHASH-key-member-member-…" class="headerlink" title="GEOHASH key member [member …]"></a>GEOHASH key member [member …]</h4><p>返回一个或多个位置元素的Geohash表示</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921204.png" alt="image-20231101220455404"> </p><h2 id="流（Stream）"><a href="#流（Stream）" class="headerlink" title="流（Stream）"></a>流（Stream）</h2><p>Redis Stream 是 Redis 5.0 版本新增加的数据结构。</p><p>Redis Stream 主要用于消息队列（MQ，Message Queue），Redis 本身是有一个 Redis 发布订阅 (pub/sub) 来实现消息队列的功能，但它有个缺点就是消息无法持久化，如果出现网络断开、Redis 宕机等，消息就会被丢弃。</p><p>简单来说发布订阅 (pub/sub) 可以分发消息，但无法记录历史消息。</p><p>而 Redis Stream 提供了消息的持久化和主备复制功能，可以让任何客户端访问任何时刻的数据，并且能记住每一个客户端的访问位置，还能保证消息不丢失</p><h3 id="在redis5-0之前"><a href="#在redis5-0之前" class="headerlink" title="在redis5.0之前"></a>在redis5.0之前</h3><ul><li>使用List实现消息队列</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921249.png" alt="image-20231101223005015"> </p><ul><li>pub/sub</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921389.png" alt="image-20231101223114642"> </p><p>Stream：Redis版本的MQ消息中间件 + 阻塞队列</p><p><strong>实现消息队列，Stream支持消息的持久化、支持自动生成全局唯一ID、支持ack确认消息的模式、支持消费组模式等，让消息队列更加稳定和可靠</strong></p><h3 id="底层结构及原理说明"><a href="#底层结构及原理说明" class="headerlink" title="底层结构及原理说明"></a>底层结构及原理说明</h3><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921546.png" alt="image-20231101224331260"> </p><h3 id="队列相关命令"><a href="#队列相关命令" class="headerlink" title="队列相关命令"></a>队列相关命令</h3><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921804.png" alt="image-20231101224519811"> </p><h4 id="XADD"><a href="#XADD" class="headerlink" title="XADD"></a>XADD</h4><p>添加消息到队列末尾</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921872.png" alt="image-20231101230401836"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921960.png" alt="image-20231101230517488"> </p><ul><li><strong>消息ID</strong>必须要比上一个<strong>消息ID</strong>大（是消息ID，不是id值）</li><li>消息ID默认用星号表示自动生成规矩</li></ul><h4 id="XRANGE"><a href="#XRANGE" class="headerlink" title="XRANGE"></a>XRANGE</h4><p>获取消息队列（可以指定范围），忽略删除的消息</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921957.png" alt="image-20231102220121790"> </p><p>可以在后面加上count限制显示多少条数据</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921034.png" alt="image-20231102220228109"> </p><h4 id="XREVRANGE"><a href="#XREVRANGE" class="headerlink" title="XREVRANGE"></a>XREVRANGE</h4><p>和XRANGE相比区别在于反向获取，ID从大到小</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921480.png" alt="image-20231102220647892"> </p><h4 id="XDEL"><a href="#XDEL" class="headerlink" title="XDEL"></a>XDEL</h4><p>删除消息</p><p>删除messageID=”1698850723494-0”的数据</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921507.png" alt="image-20231102221043982"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921591.png" alt="image-20231102234519698"> </p><h4 id="XTRIM"><a href="#XTRIM" class="headerlink" title="XTRIM"></a>XTRIM</h4><p>限制Stream的长度，如果已经超长会进行截取</p><ul><li><p>MAXLEN：允许的最大长度，对Stream流进行修剪限制长度</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921702.png" alt="image-20231102235454966"> </p></li><li><p>MINID：允许的最小id，从某个id值开始比该id值小的将会被抛弃</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921705.png" alt="image-20231102235649337"></p></li></ul><h4 id="XLEN"><a href="#XLEN" class="headerlink" title="XLEN"></a>XLEN</h4><p>获取Stream中的消息长度</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921735.png" alt="image-20231102234633777"> </p><h4 id="XREAD"><a href="#XREAD" class="headerlink" title="XREAD"></a>XREAD</h4><p>获取消息（阻塞/非阻塞），返回大于指定ID的消息</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921998.png" alt="image-20231105203501223"> </p><ul><li><p>COUNT：最多读取多少条消息</p></li><li><p>BLOCK：是否以阻塞的方式读取消息，默认不阻塞，如果milliseconds设置为0，表示永远阻塞</p></li><li><p>非阻塞：</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921189.png" alt="image-20231105215057785"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921233.png" alt="image-20231105215216538"> </p><ul><li>$代表特殊ID，表示以当前Stream已经存的最大ID作为最后一个ID，当前Stream中不存在大于当前最大ID的消息，因此返回nil</li><li>0-0代表从最小的ID开始获取Stream中的消息，当不指定count，将会返回Stream中的所有消息，注意也可以使用0（00/000也都是可以的）</li></ul></li><li><p>阻塞：</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921333.png" alt="image-20231105215743876"> </p><p>新建客户端，在新的客户端中往mystream中添加消息</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921344.png" alt="image-20231106140417757"> </p><p>此时原来的客户端就会接收到，并且变成非阻塞状态</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921417.png" alt="image-20231106140618729"></p></li></ul><p><strong>总结：</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921875.png" alt="image-20231106140743587"> </p><h3 id="消费组相关指令"><a href="#消费组相关指令" class="headerlink" title="消费组相关指令"></a>消费组相关指令</h3><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921905.png" alt="image-20231101224625822"> </p><h4 id="XGROUP-CREATE"><a href="#XGROUP-CREATE" class="headerlink" title="XGROUP CREATE"></a>XGROUP CREATE</h4><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921917.png" alt="image-20231106141300393"> </p><ul><li>$：表示从流的尾部开始消费</li><li>0：表示从流的头部开始消费</li></ul><p><strong>创建消费者组的时候必须指定ID，ID为0表示从头开始消费，为$表示只消费新的消息，队尾是新来的</strong></p><h4 id="XREADGROUP-GROUP"><a href="#XREADGROUP-GROUP" class="headerlink" title="XREADGROUP GROUP"></a>XREADGROUP GROUP</h4><ul><li><p>“&gt;”：表示从第一条尚未被消费的信息开始读取</p></li><li><p>消费组groupA内的消费者consumer1从mystream消息队列中读取所有消息</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921983.png" alt="image-20231106170726061"> </p><p><strong>stream中的消息一旦被消费组里的一个消费者读取了，就不能再被该消费组内的其他消费者读取了，即同一个消费组里的消费者不能消费同一条信息，刚才的xreadgroup命令再执行一次，此时读到的就会是空值（nil）</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921028.png" alt="image-20231106171033766"> </p></li><li><p>不同消费组的消费者可以消费同一条消息</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921210.png" alt="image-20231106191411026"> </p><p>因为是groupB组的，所以能读取</p></li><li><p>消费组的目的在于：</p><ul><li>让组内的多个消费者共同分担读取消息，所以，通常会让每个消费者读取部分消息，从而实现消息读取负载在多个消费者间是均衡分布的。</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921574.png" alt="image-20231106191755687"></p></li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921774.png" alt="image-20231106192210197"> </p><h4 id="XPENDING"><a href="#XPENDING" class="headerlink" title="XPENDING"></a>XPENDING</h4><ul><li><p>查询每个消费组内所有消费者已读取但未确认的消息</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921576.png" alt="image-20231106192927258"> </p></li><li><p>查看某个消费者具体读取了哪些数据</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921770.png" alt="image-20231106193107455"></p></li></ul><h4 id="XACK"><a href="#XACK" class="headerlink" title="XACK"></a>XACK</h4><p>向队列确认消息处理已经完成</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921810.png" alt="image-20231106193547897"> </p><p><strong>已经确认过的消息会被删除，不会出现在队列里</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921813.png" alt="image-20231106193707008"> </p><h4 id="XINFO-GEOUPS"><a href="#XINFO-GEOUPS" class="headerlink" title="XINFO GEOUPS"></a>XINFO GEOUPS</h4><p>查询消费者组的信息</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921317.png" alt="image-20231106194108138"> </p><h4 id="XINFO-STREAM"><a href="#XINFO-STREAM" class="headerlink" title="XINFO STREAM"></a>XINFO STREAM</h4><p>查询消息队列的信息</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921313.png" alt="image-20231106194145429"> </p><h4 id="XINFO-CONSUMERS"><a href="#XINFO-CONSUMERS" class="headerlink" title="XINFO CONSUMERS"></a>XINFO CONSUMERS</h4><p>查询消费者组里消费者的信息</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921553.png" alt="image-20231106194206819"> </p><h4 id="XGROUP-SETID"><a href="#XGROUP-SETID" class="headerlink" title="XGROUP SETID"></a>XGROUP SETID</h4><p>设置消费者组最后递送消息的ID</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921556.png" alt="image-20231106195447646"> </p><h4 id="XGROUP-DELCONSUMER"><a href="#XGROUP-DELCONSUMER" class="headerlink" title="XGROUP DELCONSUMER"></a>XGROUP DELCONSUMER</h4><p>删除消费者组</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921651.png" alt="image-20231106200047777"> </p><h4 id="XCLAIM"><a href="#XCLAIM" class="headerlink" title="XCLAIM"></a>XCLAIM</h4><p>转移消息的归属权（将长期未处理/无法处理的消息转交给其他消费者组进行处理）</p><h3 id="四个特殊符号"><a href="#四个特殊符号" class="headerlink" title="四个特殊符号"></a>四个特殊符号</h3><h4 id=""><a href="#" class="headerlink" title="- +"></a>- +</h4><p>最小和最大可能出现的ID</p><h4 id="-1"><a href="#-1" class="headerlink" title="$"></a>$</h4><p>表示只消费新的消息，当前流中最大的ID，可用于将要到来的消息</p><h4 id="-2"><a href="#-2" class="headerlink" title=">"></a>&gt;</h4><p>用于<strong>XREADGROUP</strong>命令，表示迄今还没有发送给组中使用者信息，会更新消费者组的最后ID</p><h4 id="-3"><a href="#-3" class="headerlink" title="*"></a>*</h4><p>用于<strong>XADD</strong>命令，让系统自动生成ID</p><h1 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h1><p>官网：<a href="https://redis.io/docs/manual/presistence">https://redis.io/docs/manual/presistence</a></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921760.png" alt="image-20231107123453191"> </p><h2 id="RDB（Redis-DataBase）"><a href="#RDB（Redis-DataBase）" class="headerlink" title="RDB（Redis DataBase）"></a>RDB（Redis DataBase）</h2><p><strong>RDB持久性以指定的时间间隔执行数据集的时间点快照</strong></p><p>实现类似照片记录效果的方式，就是把某一时刻的数据和状态以文件的形式写到磁盘上，也就是</p><p>快照。这样一来即使故障宕机，快照文件也不会丢失，数据的可靠性也就得到了保证。</p><p>这个快照文件就称为RDB文件(dump.rdb)，其中，RDB就是Redis DataBase的缩写。</p><p><strong>使用RDB的优势？</strong></p><ul><li>适合大规模的数据恢复</li><li>按照业务定时备份</li><li>对数据完整性和一致性要求不高</li><li>RDB文件在内存中的加载速度要比AOF快得多</li></ul><p><strong>使用RDB的劣势？</strong></p><ul><li><p>在一定间隔时间做一次备份，如果redis意外挂掉了，就会丢失从当前到最近一次快照期间的数据，快照之间的数据会丢失</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921009.png" alt="image-20231108211306395"> </p></li><li><p>内存数据的全量同步，如果数据量太大会导致I/O严重影响服务器性能</p></li><li><p>RDB依赖于主进程的fork，在更大的数据集中，可能会导致服务请求的瞬间延迟。fork的时候内存中的数据被克隆了一份，大约两倍的膨胀性，需要慎重考虑</p></li></ul><p><strong>怎么检查和修复RDB？</strong></p><ul><li><p><code>redis-check-rdb rdbfilename</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921038.png" alt="image-20231108221047221"></p></li></ul><h3 id="自动触发"><a href="#自动触发" class="headerlink" title="自动触发"></a>自动触发</h3><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921207.png" alt="image-20231107143842527"> </p><p>修改myredis下的redis.conf，添加<code>save 5 2</code>，每五秒触发两次修改，并且修改rdb默认保存路径为自定义的<code>/myredis/dumpfiles</code>，保存的文件名修改为<code>dump6379.rdb</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921217.png" alt="image-20231107150332371"> </p><p>在五秒内改动两条数据</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921573.png" alt="image-20231107214356971"> </p><p>在dumpfiles文件夹自动创建dump6379.rdb文件</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921640.png" alt="image-20231107214538587"> </p><p><strong>如何恢复？</strong></p><p>将备份文件（dump.rdb）移动到redis安装目录并启动服务即可</p><p><strong>备份成功后用flushdb清空redis看看是否可以恢复数据</strong></p><ul><li>结论：执行FLUSHALL/FLUSHDB命令也会产生dump.rdb文件，但里面是空的，没有意义</li><li>下次启动的时候redis会自动从dump.rdb文件中自动读取上一次备份的数据</li></ul><p><strong>物理恢复，一定服务器和备份分机隔离</strong></p><h3 id="手动触发"><a href="#手动触发" class="headerlink" title="手动触发"></a>手动触发</h3><p>redis提供了两个命令来生成RDB文件：save和bgsave</p><h4 id="save"><a href="#save" class="headerlink" title="save"></a>save</h4><p>在主程序中执行<strong>会阻塞</strong>当前redis服务器，知道持久化工作完成，执行save命令期间，redis不能处理其他命令，在实际工作中禁止使用</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921668.png" alt="image-20231107222704865"> </p><p>将dumpfiles里的rdb文件删掉</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921662.png" alt="image-20231107223053637"> </p><p>添加一条键值对，并且手动save</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921879.png" alt="image-20231107223152268"> </p><p>此时dumpfiles里就会创建一个备份的rdb文件</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921291.png" alt="image-20231107223229719"> </p><h4 id="bgsave"><a href="#bgsave" class="headerlink" title="bgsave"></a>bgsave</h4><p>redis会在后台异步进行快照操作，<strong>不阻塞</strong>快照的同时还可以响应客户端的请求，该触发方式会fork一个子进程，由子进程复制持久化过程</p><p>redis默认会使用bgsave对当前内存中的所有数据快照，这个操作是子进程在后台完成的，这就允许主进程同时可以修改数据</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921344.png" alt="image-20231107224722591"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921443.png" alt="image-20231107223715659"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921475.png" alt="image-20231107223746456"> </p><h5 id="fork？"><a href="#fork？" class="headerlink" title="fork？"></a>fork？</h5><ul><li><p>类似git里从当前主分支拉取代码但是不影响主分支的修改</p></li><li><p>在Linux程序中，fork()会产生一个和父进程完全相同的子进程，但是子进程在此后都会exec系统调用，出于效率考虑，尽量避免膨胀</p></li></ul><h5 id="lastsave"><a href="#lastsave" class="headerlink" title="lastsave"></a>lastsave</h5><p>可以通过lasrsave命令获取最后一次成功执行快照的时间</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921470.png" alt="image-20231107225248003"> </p><p>使用<code>data -d @时间戳</code>的方式解析时间戳</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921548.png" alt="image-20231107225302807"> </p><h2 id="AOF（Append-Only-File）"><a href="#AOF（Append-Only-File）" class="headerlink" title="AOF（Append Only File）"></a>AOF（Append Only File）</h2><h4 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h4><ul><li><strong>以日志的形式来记录每个写操作</strong>，将Redis执行过的所有指令记录下来（读操作不记录），只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，即，redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作</li><li>默认情况下redis是没有开启AOF的，开启AOF需要设置配置：appendonly yes</li></ul><h4 id="AOF持久化流程"><a href="#AOF持久化流程" class="headerlink" title="AOF持久化流程"></a>AOF持久化流程</h4><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921870.png" alt="image-20231113102047971"> </p><h4 id="AOF缓冲区三种写回策略"><a href="#AOF缓冲区三种写回策略" class="headerlink" title="AOF缓冲区三种写回策略"></a>AOF缓冲区三种写回策略</h4><ul><li>Always：同步写回，每个写命令执行完立刻同步地将日志协会磁盘</li><li>exerysec：每秒写回，每个写命令执行完，只是先把日志写到AOF文件的内存缓冲区，每隔1秒把缓冲区中的内容写入磁盘</li><li>no：操作系统控制的写回，每个写命令执行完，只是先把日志写到AOF文件的内存缓冲区，由操作系统决定何时将缓冲区内容写回磁盘</li></ul><p><strong>总结</strong></p><table><thead><tr><th align="center">配置项</th><th align="center">写回时机</th><th align="center">优点</th><th align="center">缺点</th></tr></thead><tbody><tr><td align="center">Always</td><td align="center">同步写回</td><td align="center">可靠性高，数据基本不丢失</td><td align="center">每个写命令都要落盘，性能影响很大</td></tr><tr><td align="center">Everysec</td><td align="center">每秒写回</td><td align="center">性能适中</td><td align="center">宕机时丢失一秒内的数据</td></tr><tr><td align="center">No</td><td align="center">操作系统控制的写回</td><td align="center">性能好</td><td align="center">宕机时丢失数据较多</td></tr></tbody></table><h4 id="启动AOF"><a href="#启动AOF" class="headerlink" title="启动AOF"></a>启动AOF</h4><ol><li>将redis.conf里面的appendonly no改成yes</li><li>写操作继续，生成aof文件到指定的目录</li></ol><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921977.png" alt="image-20231114215825306"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921009.png" alt="image-20231114215842496"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921224.png" alt="image-20231114220908772"> </p><h4 id="AOF文件保存名称"><a href="#AOF文件保存名称" class="headerlink" title="AOF文件保存名称"></a>AOF文件保存名称</h4><ul><li>base基本文件</li><li>incr增量文件（写操作命令会被记录在这个文件里面，不记录读操作命令）</li><li>manifest清单文件</li></ul><h4 id="正常恢复"><a href="#正常恢复" class="headerlink" title="正常恢复"></a>正常恢复</h4><p>正常重启的时候redis就会从aof中将命令全部读回来</p><h4 id="异常恢复"><a href="#异常恢复" class="headerlink" title="异常恢复"></a>异常恢复</h4><ul><li><p>故意乱写正常的AOF文件，模拟网络闪断文件写error</p></li><li><p>重启redis之后就会进行AOF文件的载入（无法启动）</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921266.png" alt="image-20231116150935380"> </p></li><li><p>异常修复命令：<code>redis-check-aof --fix</code> 进行修复</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921311.png" alt="image-20231116151153947"></p></li></ul><h4 id="优势-1"><a href="#优势-1" class="headerlink" title="优势"></a>优势</h4><ul><li>有不同的fsync策略：根本不，每秒fsync，每次查询时fsync。fsync是使用后台线程执行的，当没有fsync正在进行时，主线程将努力执行写入，因此只会丢失一秒钟的写入</li><li>AOF日志是一个仅附加日志，因此不会出现寻道问题，也不会再断电时出现损坏问题，即使由于某种原因（磁盘已满或其他原因）日志以写一半的命令结尾，redis-check-aof工具也可以进行修复</li><li>当AOF变化太大时，redis能够在后台重写aof。重写是完全安全的，因为当redis继续附加到旧文件时，会使用创建当前数据集所需的最少操作集生成一个全新的文件，一旦第二个文件准备就绪，redis就会切换两者并开始附加到新的那一个</li></ul><h4 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h4><ul><li>相同数据集的数据而言，aof文件要远远大于rdb文件，恢复速度也慢于rdb文件</li><li>aof运行效率要慢于rdb，每秒同步策略效率较好，不同步效率与rdb相同</li></ul><h4 id="AOF的重写机制"><a href="#AOF的重写机制" class="headerlink" title="AOF的重写机制"></a>AOF的重写机制</h4><p><strong>由于AOF持久化是redis不断将写命令记录到AOF文件中，随着redis不断进行，AOF文件会越来越大（文件越大，占用服务器内存越大以及AOF恢复要求时间越长）</strong></p><p>为了解决上述问题redis新增的重写机制，即：当AOF文件的大小超过所设定的峰值时，redis就会自动启动AOF文件的内容压缩，只保留可以恢复数据的最小指令集，或者可以<strong>手动使用命令bgrewtiteaof来重写</strong></p><p><strong>触发机制</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921447.png" alt="image-20231116154234017"> </p><ul><li>自动触发<ul><li>满足配置文件中的选项后，redis会记录上一次重写时的AOF大小，默认配置时当AOF文件大小是上次rewrite后大小的一倍且文件大于64M时</li></ul></li><li>手动触发<ul><li>客户端向服务器发送bgrewriteaof命令</li></ul></li></ul><p><strong>重写机制的原理</strong></p><ol><li>在重写开始前，redis会创建一个“重写子进程”，这个子进程会读取现有的AOF文件，并将其包含的指令进行分析压缩并写入到一个临时文件中</li><li>同时主进程会将数据接收到的写指令一边累积到内存缓冲区中，一边继续写入到原有的AOF文件中，这样是保证原有的AOF文件的可用性，避免在重写过程中出现意外</li><li>当“重写子进程”完成重写工作后，它会给父进程发一个信号，当父进程接收到信号后就会将内存中缓存的写指令追加到新AOF文件中</li><li>追加结束后，redis就会用新的AOF文件来代替旧的AOF文件，之后再有新的写指令，就会追加到新的AOF文件中</li><li>重写AOF文件的操作，并没有读取旧的AOF文件，而是将整个内存中的数据库内容用命令的方式重写了一个新的AOF文件，类似于快照</li></ol><p><strong>总结</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921439.png" alt="image-20231116233426499"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921776.png" alt="image-20231116233540271"> </p><h3 id="RDB-AOF混合持久化"><a href="#RDB-AOF混合持久化" class="headerlink" title="RDB+AOF混合持久化"></a>RDB+AOF混合持久化</h3><p><strong>当RDB和AOF同时启用的时候，会优先使用AOF，如果没有AOF再使用RDB</strong></p><h4 id="同时开启两种持久化方式"><a href="#同时开启两种持久化方式" class="headerlink" title="同时开启两种持久化方式"></a>同时开启两种持久化方式</h4><ul><li>在这种情况下，<strong>当redis重启的时候会优先载入AOF文件来恢复原始的数据，</strong>因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整</li><li>RDB的数据不实时i，同时使用两者时服务器重启也只会AOF文件。（保留RDB以防万一）</li></ul><h4 id="纯缓存模式"><a href="#纯缓存模式" class="headerlink" title="纯缓存模式"></a>纯缓存模式</h4><p>关闭RDB+AOF：</p><ul><li><code>save ""</code>：禁用RDB，禁用的时候仍然可以使用save、bgsave生成rdb文件</li><li><code>appendonly no</code>：禁用AOF，禁用的时候仍然可以使用bgrewriteaof生成aof文件</li></ul><h1 id="Redis事务"><a href="#Redis事务" class="headerlink" title="Redis事务"></a>Redis事务</h1><p><strong>数据库事务是什么？</strong></p><p>事务是一个或一系列操作的最小逻辑单元，在这个逻辑单元中的所有语句，要不都执行成功，要么都执行失败，不存在任何中间状态，一旦事务执行失败，那么所有的操作都会被撤销，一旦事务执行成功，那么所有的操作结果都会被保存。</p><p><strong>Redis事务是什么？</strong></p><p>可以一次执行多个命令，本质是一组命令的集合。一个事务中的所有命令都会序列化，<strong>按顺序地串行化执行而不会被其他命令插入，不许加塞</strong></p><p><strong>能干什么？</strong></p><p>一个队列中，一次性、顺序性、排他性的执行一系列命令</p><p><strong>Redis事务VS数据库事务</strong></p><table><thead><tr><th>特性</th><th>解释</th></tr></thead><tbody><tr><td>1.单独的隔离操作</td><td>Redis的事务仅仅是保证事务里的操作会被连续独占的执行，redis命令执行是单线程架构，在执行完事务内所有指令前是不可能再去同时执行其他客户端的请求的</td></tr><tr><td>2.没有隔离级别的概念</td><td>因为事务提交前任何指令都不会被实际执行，也就不存在“事务内的查询要看到事务里的更新，在事务外查询不能看到”这种问题了</td></tr><tr><td>3.不保证原子性</td><td>Redis的事务<strong>不保证原子性</strong>，也就是不保证所有指令同时成功或同时失败，只有决定是否开始执行全部指令的能力，没有执行到一半进行回滚的能力</td></tr><tr><td>4.排他性</td><td>Redis会保证一个事务内的命令依次执行，而不会被其他命令插入</td></tr></tbody></table><h2 id="常用命令-8"><a href="#常用命令-8" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="DISCARD"><a href="#DISCARD" class="headerlink" title="DISCARD"></a>DISCARD</h3><p>取消事务，放弃执行事务块内的所有命令</p><h3 id="EXEC"><a href="#EXEC" class="headerlink" title="EXEC"></a>EXEC</h3><p>执行所有事务块内的命令</p><h3 id="MULTI"><a href="#MULTI" class="headerlink" title="MULTI"></a>MULTI</h3><p>标记一个事务块的开始</p><h3 id="UNWATCH"><a href="#UNWATCH" class="headerlink" title="UNWATCH"></a>UNWATCH</h3><p>取消WATCH命令对所有key的监视</p><h3 id="WATCH-key-key-…"><a href="#WATCH-key-key-…" class="headerlink" title="WATCH key [key …]"></a>WATCH key [key …]</h3><p>监视一个（或多个）key，如果在事务执行前这个（或这些）key被其他命令所改动，那么事务会被打断</p><h2 id="例1：正常执行"><a href="#例1：正常执行" class="headerlink" title="例1：正常执行"></a>例1：正常执行</h2><ul><li>MULTI</li><li>EXEC</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921882.png" alt="image-20231118151049756"> </p><h2 id="例2：放弃事务"><a href="#例2：放弃事务" class="headerlink" title="例2：放弃事务"></a>例2：放弃事务</h2><ul><li>MULTI</li><li>DISCARD</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921970.png" alt="image-20231118152934491"> </p><h2 id="例3：事务中有命令出错，全都不成功"><a href="#例3：事务中有命令出错，全都不成功" class="headerlink" title="例3：事务中有命令出错，全都不成功"></a>例3：事务中有命令出错，全都不成功</h2><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921962.png" alt="image-20231118153718158"> </p><h2 id="例4：事务中有命令通过编译但是是错误的，出错的语句不执行"><a href="#例4：事务中有命令通过编译但是是错误的，出错的语句不执行" class="headerlink" title="例4：事务中有命令通过编译但是是错误的，出错的语句不执行"></a>例4：事务中有命令通过编译但是是错误的，出错的语句不执行</h2><p><strong>注意和传统数据库事务区别，不一定要么一起成功要么一起失败</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921137.png" alt="image-20231118154405073"> </p><h2 id="例5：WATCH"><a href="#例5：WATCH" class="headerlink" title="例5：WATCH"></a>例5：WATCH</h2><p>Redis使用Watch来提供乐观锁，类似CAS（Check-and-Set）</p><ul><li>悲观锁：每次拿数据的时候都会上锁，这样别人在拿数据的时候就会block直到他拿到锁</li><li>乐观锁：每次拿数据的时候不会上锁，只有在更新的时候会判断期间有没有人去更新这个数据（<strong>乐观锁策略：提交版本必须大于记录当前版本才能执行更新</strong>）</li><li>CAS：使用WATCH监控key，如果key在修改期间被更新过，则本次事务操作会被打断需要重新执行一次</li></ul><p><strong>watch</strong></p><ul><li><p>初始化k1和balance两个key，先监控再开启multi，保证两个key变动在同一个事务内</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921245.png" alt="image-20231119213925399"> </p></li><li><p>有加塞篡改</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921437.png" alt="image-20231119214420289"></p></li></ul><p><strong>一旦执行了exec，之前的监控锁都会被取消；当客户端连接丢失的时候（退出连接），所有东西都会被取消监视</strong></p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><ul><li>开启：以<code>multi</code>开始一个事务</li><li>入队：将多个命令入队到事务中，接到这些命令并不会立即执行，而是放到等待执行的事务队列里面</li><li>执行：由<code>exec</code>命令触发事务</li></ul><h1 id="Redis管道"><a href="#Redis管道" class="headerlink" title="Redis管道"></a>Redis管道</h1><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921746.png" alt="image-20231120123420152"> </p><p><strong>如何优化频繁命令往返造成的性能瓶颈？</strong></p><p>管道（pipeline）可以一次性发送多条命令给服务端，服务端依次处理完毕后，<strong>通过一条响应一次性将结果返回，通过减少客户端与redis的通信次数来实现降低往返延时时间。</strong>pipeline实现的原理是<strong>队列</strong>，先进先出特性就保证数据的顺序性。</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921755.png" alt="image-20231120123827191"> </p><h2 id="管道是什么？"><a href="#管道是什么？" class="headerlink" title="管道是什么？"></a>管道是什么？</h2><p>pipeline是为了解决RTT（Round Trip Time）往返时，仅仅是将命令打包一次性发送，对整个redis的执行不造成其他影响（<strong>批处理命令变种优化措施，类似Redis的原生批命令mget和mset</strong>）</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921675.png" alt="image-20231120125554054"> </p><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><p>pipeline与<strong>原生批量命令</strong>对比</p><ul><li>原生批量命令是原子性（例如mset、mget），<strong>pipeline是非原子性</strong></li><li>原生批量命令一次只能执行一种命令，pipeline支持批量执行不同命令</li><li>原生批量命令是服务端实现，而pipeline需要服务端与客户端共同完成</li></ul><p>pipeline与<strong>事务</strong>对比</p><ul><li>事务具有原子性，管道不具有原子性</li><li>管道一次性将多条命令发送到服务器，事务是一条一条的发，事务只有在接收到exec命令后才会执行，管道不会</li><li>执行事务时会阻塞其他命令的执行，而执行管道中的命令时不会</li></ul><p>使用pipeline注意事项</p><ul><li>pipeline缓冲的指令只是会依次执行，不保证原子性，如果执行中指令发生异常，将会继续执行后续的指令</li><li>使用pipeline组装的命令个数不能太多，不过数据量过大客户端阻塞的时间可能过久，同时服务端此时也被迫回复一个队列答复，占用很多内存</li></ul><h1 id="Redis发布订阅"><a href="#Redis发布订阅" class="headerlink" title="Redis发布订阅"></a>Redis发布订阅</h1><p><strong>是一种消息通信模式：发送者(PUBLISH)发送消息，订阅者(SUBSCRIBE)接收消息，可以实现进程间的消息传递</strong></p><h2 id="能干什么？"><a href="#能干什么？" class="headerlink" title="能干什么？"></a>能干什么？</h2><p>可以订阅任意数量的频道，类似微信关注多个公众号</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921769.png" alt="image-20231122081859211"> </p><ul><li><p>当有新消息通过PUBLISH命令发送给频道channel1时</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921047.png" alt="image-20231122081954410"></p></li></ul><p>发布/订阅其实是一个轻量的队列，只不过数据不会被持久化，一般用来处理<strong>实时性较高的异步消息</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921119.png" alt="image-20231122082051754"> </p><h2 id="常用命令-9"><a href="#常用命令-9" class="headerlink" title="常用命令"></a>常用命令</h2><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921672.png" alt="image-20231122082206626"> </p><h3 id="SUBSCRIBE-channel-channel-…"><a href="#SUBSCRIBE-channel-channel-…" class="headerlink" title="SUBSCRIBE channel [channel …]"></a>SUBSCRIBE channel [channel …]</h3><p>订阅给定的一个或多个频道的消息，<strong>推荐先执行订阅后再发布，订阅成功之前发布的消息是收不到的</strong></p><p>订阅的客户端每次可以收到3个参数的消息</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921666.png" alt="image-20231122083446784"> </p><ul><li>消息的种类</li><li>始发频道的名称</li><li>实际的消息内容</li></ul><p> <img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921670.png" alt="image-20231122091827796"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921823.png" alt="image-20231122091847552"> </p><h3 id="PUBLISH-channel-message"><a href="#PUBLISH-channel-message" class="headerlink" title="PUBLISH channel message"></a>PUBLISH channel message</h3><p>发布消息到执行的频道</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921953.png" alt="image-20231122091754742"> </p><p>订阅了c1频道的可以接收到“helloc1”的这串信息</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921077.png" alt="image-20240113154033800"> </p><h3 id="PSUBSCRIBE-pattern-pattern-…"><a href="#PSUBSCRIBE-pattern-pattern-…" class="headerlink" title="PSUBSCRIBE pattern [pattern …]"></a>PSUBSCRIBE pattern [pattern …]</h3><p>按照模式批量订阅，订阅一个或多个符合给定模式(支持*号?号之类的)的频道</p><h3 id="PUBSUB-subcommand-argument-argument-…"><a href="#PUBSUB-subcommand-argument-argument-…" class="headerlink" title="PUBSUB subcommand [argument [argument …]]"></a>PUBSUB subcommand [argument [argument …]]</h3><ul><li><p>查看订阅与发布系统状态</p></li><li><p>PUBSUB CHANNELS</p><ul><li><p>由活跃频道组成的列表</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921539.png" alt="image-20231122083902587"></p></li></ul></li><li><p>PUBSUB NUMSUB [channel [channel …]]</p><ul><li><p>某个频道有几个订阅者</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921620.png" alt="image-20231122083948609"></p></li></ul></li><li><p>PUBSUB NUMPAT</p><ul><li><p>只统计使用PSUBCRIBE命令执行的，返回客户端订阅的唯一<strong>模式的数量</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921609.png" alt="image-20240113160233802"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921669.png" alt="image-20240113160243172"></p></li></ul></li></ul><h3 id="UNSUBSCRIBE-channel-channel-…"><a href="#UNSUBSCRIBE-channel-channel-…" class="headerlink" title="UNSUBSCRIBE [channel [channel …]]"></a>UNSUBSCRIBE [channel [channel …]]</h3><p>取消订阅</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921735.png" alt="image-20240113172536457"> </p><h3 id="PUNSUBSCRIBE-pattern-pattern-…"><a href="#PUNSUBSCRIBE-pattern-pattern-…" class="headerlink" title="PUNSUBSCRIBE [pattern [pattern …]]"></a>PUNSUBSCRIBE [pattern [pattern …]]</h3><p>退订所有给定模式的频道</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921976.png" alt="image-20240113172833361"> </p><h2 id="PUB-SUB总结"><a href="#PUB-SUB总结" class="headerlink" title="PUB/SUB总结"></a>PUB/SUB总结</h2><p>Redis可以实现消息中间件MQ的功能，通过发布订阅实现消息的引导和分流。（不建议使用，redis就做好分布式缓存功能就行了，专业的事情交给专业的中间件处理）</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>发布的消息在Redis系统中不能持久化，因此，必须先执行订阅再等消息发布，如果先发布了信息，那么该消息由于没有订阅者，消息将被直接丢弃</li><li>消息只管发送对于发布者而言消息是即发即失的，不管接收，也没有ACK机制，无法保证消息的消费成功</li></ul><p>以上的缺点导致了Redis的PUB/SUB模式就像个小玩具，在生产环境中几乎无用武之地，为此，Redis5.0版本新增了Stream数据结构，不但支持多播，还支持数据持久化，相比PUB/SUB更加强大</p><h1 id="Redis复制（replica）"><a href="#Redis复制（replica）" class="headerlink" title="Redis复制（replica）"></a>Redis复制（replica）</h1><p><strong>官网</strong>：<a href="https://redis.io/docs/management/replication/">https://redis.io/docs/management/replication/</a></p><h2 id="是什么？-1"><a href="#是什么？-1" class="headerlink" title="是什么？"></a>是什么？</h2><p>主从复制，master以写为主，slave以读为主</p><p>当master数据变化的时候，自动将新的数据异步同步到其他slave数据库</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921436.png" alt="image-20240114190104175"> </p><ul><li>写在Main的主机上，读取数据的时候就在复制的Secondary这台主机上读取，这样就可以避免一台redis数据库既写入数据又读取数据，减轻了redis数据库的负担</li></ul><h2 id="能干什么？-1"><a href="#能干什么？-1" class="headerlink" title="能干什么？"></a>能干什么？</h2><ul><li>读写分离</li><li>容灾恢复<ul><li>当主机宕机了之后可以从从机中恢复数据，这是相对于aof和rdb备份数据的另一种更好的方法</li></ul></li><li>数据备份<ul><li>主机和从机的数据都是实时的</li></ul></li><li>水平扩容支撑高并发<ul><li>从机可以有多台</li></ul></li></ul><h2 id="怎么用？"><a href="#怎么用？" class="headerlink" title="怎么用？"></a>怎么用？</h2><p><strong>配从（库）不配主（库）</strong>：由从机slave决定要将哪台redis当成master</p><h3 id="权限细节"><a href="#权限细节" class="headerlink" title="权限细节"></a>权限细节</h3><ul><li>master如果配置了requirepass参数，需要密码登录</li><li>那么slave就要配置masterauth来设置校验密码，否则master就会拒绝slave的访问请求</li></ul><h3 id="基本操作命令"><a href="#基本操作命令" class="headerlink" title="基本操作命令"></a>基本操作命令</h3><h4 id="info-replication"><a href="#info-replication" class="headerlink" title="info replication"></a>info replication</h4><p>可以查看复制节点的主从关系和配置信息</p><h4 id="replicaof-主库IP-主库端口"><a href="#replicaof-主库IP-主库端口" class="headerlink" title="replicaof 主库IP 主库端口"></a>replicaof 主库IP 主库端口</h4><p>一般写入进redis.conf配置文件内</p><h4 id="slaveof-主库IP-主库端口"><a href="#slaveof-主库IP-主库端口" class="headerlink" title="slaveof 主库IP 主库端口"></a>slaveof 主库IP 主库端口</h4><ul><li>每次与master断开之后，都需要重新连接，储配配置进redis.conf文件</li><li>在运行期间修改slave节点的信息，如果该数据库已经是某个主数据库的从数据库，那么就会停止与原主数据库的同步关系<strong>转而和新的主数据库同步，重新确定新的主数据库</strong></li></ul><h4 id="slaveof-no-one"><a href="#slaveof-no-one" class="headerlink" title="slaveof no one"></a>slaveof no one</h4><p>使当前数据库停止与其他数据库的同步，<strong>转成主数据库，自立为王</strong></p><h3 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h3><p><strong>配置文件</strong></p><p>从机的配置文件：replicaof 主库IP 主库端口</p><p>配从库不配主库</p><ul><li><p>配置从机6380</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921424.png" alt="image-20240122151003133"> </p></li><li><p>配置从机6381</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921469.png" alt="image-20240122151412047"></p></li></ul><p>先启动master再启动slave</p><p>使用命令查看主从机信息</p><ul><li><p>info replication</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921498.png" alt="image-20240122155104517"></p></li></ul><p><strong>从机只能进行读操作不能进行写操作</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921528.png" alt="image-20240122155457696"> </p><p><strong>从机切入点问题</strong></p><p>slave是从头开始复制还是从切入点开始复制？</p><p>首次启动会从头开始复制，后续会跟随，master写，slave跟</p><p><strong>主机shutdown之后从机不会上位，从机的数据依旧可以正常使用，等待主机重新启动</strong></p><p><strong>主机shutdown之后，重启后主从关系依旧存在，从机仍然能够复制主机后续更新的信息</strong></p><p><strong>某台从机shutdown之后，重启后仍然可以复制master的信息</strong></p><p><strong>从属于某台机器</strong>：<code>slaveof xxx.xxx.xxx.xxx port</code></p><p><strong>不从属于任何机器</strong>：<code>slaveof no one</code></p><p><strong>如果确定了主从关系就必须将其写入配置文件中，否则下次重新进入的时候从机就会按照配置文件进行还原</strong></p><h2 id="配置和命令的区别"><a href="#配置和命令的区别" class="headerlink" title="配置和命令的区别"></a>配置和命令的区别</h2><p>写在配置文件中，会持久且稳定，使用命令则只是当次生效，宕机后再次进入就会按照配置文件进行配置</p><p>优先级：配置文件 &gt; 命令</p><h2 id="从机逐级连接"><a href="#从机逐级连接" class="headerlink" title="从机逐级连接"></a>从机逐级连接</h2><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921703.png" alt="image-20240128135855045"> </p><h2 id="主从复制的原理及工作流程"><a href="#主从复制的原理及工作流程" class="headerlink" title="主从复制的原理及工作流程"></a>主从复制的原理及工作流程</h2><ol><li>slave启动<ul><li>slave启动成功连接到master后会发送一个sync命令</li><li>slave首次全新连接master，一次完全同步（全量复制）将被自动执行，slave自身原有数据会被master数据覆盖清除</li></ul></li><li>首次连接，全量复制<ul><li>master节点收到sync命令后会开始在后台保存快照（RDB持久化，所以主从复制时会触发RDB），同时收集所有接收到的用于修改数据集命令缓存起来，master节点执行RDB持久化结束后，master将RDB快照文件和所有缓存的命令发送到所有slave，以完成一次完全同步。</li><li>slave服务在接收到数据库文件数据后，将其存盘并加载到内存中，从而完成复制初始化</li></ul></li><li>master发出ping包（repl-ping-replica-period 10），保持通信<ul><li>master发出ping包的周期，默认是十秒</li><li><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921219.png" alt="image-20240130161656634"></li></ul></li><li>增量复制<ul><li>master继续将新的所有收集到的修改命令自动一次传给slave，完成同步</li></ul></li><li>从机下线，重连续传<ul><li>master会检查backlog里面的offset，master和slave都会保存一个复制的offset还有一个masterId，offset是保存在backlog中的，<strong>master只会把已经复制的offset后面的数据复制给slave</strong>，类似断点续传</li></ul></li></ol><h2 id="主从复制的缺点"><a href="#主从复制的缺点" class="headerlink" title="主从复制的缺点"></a>主从复制的缺点</h2><ul><li><p><strong>复制延时，信号衰减</strong></p><ul><li>由于所有的写操作都是先在master上操作，然后同步更新到slave上，所以从master同步到slave机器上会有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，slave及其数量的增加也会使这个问题更加严重。</li></ul></li><li><p><strong>master一旦挂了</strong></p><ul><li><p>默认情况下，不会在slave节点中自动重选一个master</p></li><li><p>是否每次都需要人工干预？</p><p><strong>无人值守安装变成刚需（哨兵、集群）</strong></p></li></ul></li></ul><h1 id="Redis哨兵（sentinel）"><a href="#Redis哨兵（sentinel）" class="headerlink" title="Redis哨兵（sentinel）"></a>Redis哨兵（sentinel）</h1><p><strong>作用：无人值守运维</strong></p><h2 id="是什么？-2"><a href="#是什么？-2" class="headerlink" title="是什么？"></a>是什么？</h2><p>吹哨人巡查监控后台master主机是否故障，如果故障了根据投票数自动将一个从库转换为新主库，继续对外服务</p><h2 id="能干什么？-2"><a href="#能干什么？-2" class="headerlink" title="能干什么？"></a>能干什么？</h2><ol><li><strong>主从监控</strong><ul><li>监控主从redis库运行是否正常</li></ul></li><li><strong>消息通知</strong><ul><li>哨兵可以将故障转移的结果发送给客户端</li></ul></li><li><strong>故障转移</strong><ul><li>如果master异常，则会进行主从切换，将其中一个slave作为新的master</li></ul></li><li><strong>配置中心</strong><ul><li>客户端通过连接哨兵来获得当前redis服务的主节点地址</li></ul></li></ol><h2 id="怎么用？-1"><a href="#怎么用？-1" class="headerlink" title="怎么用？"></a>怎么用？</h2><p>哨兵架构说明（6台机器）：</p><ul><li>3个哨兵：自动监控和维护集群，不存放数据，只是吹哨人</li><li>1主2从：用于数据读取和存放</li></ul><h4 id="默认的sentinel-conf文件内容"><a href="#默认的sentinel-conf文件内容" class="headerlink" title="默认的sentinel.conf文件内容"></a>默认的sentinel.conf文件内容</h4><ul><li>bind<ul><li>服务监听地址，用于客户端连接，默认本机地址</li></ul></li><li>daemonize<ul><li>是否以后台daemonize方式运行</li></ul></li><li>protected-mode<ul><li>安全保护模式</li></ul></li><li>port<ul><li>端口</li></ul></li><li>logfile<ul><li>日志文件路径</li></ul></li><li>pidfile<ul><li>pid文件路径</li></ul></li><li>dir<ul><li>工作目录</li></ul></li><li><strong>sentinel monitor <master-name> <ip> <redis-port> <quorum></quorum></redis-port></ip></master-name></strong><ul><li>设置要监控的master服务器</li><li>quorum表示最少有几个哨兵认可客观下线，同一故障迁移的法定票数<ul><li>有的时候网络是不可靠的，一个sentinel会因为网络堵塞误认为一个master已经宕机，在sentinel集群环境下需要多个sentinel相互沟通来确认某个master是否真的已经宕机了，quorum这个参数是进行客观下线的一个依据，意思是至少有quorum个sentinel认为这个master有故障，才会对这个master进行下线以及故障转移，因为有的时候sentinel节点可能因为自身网络原因，导致无法连接master，而此时master并没有出现故障，所以这就需要多个sentinel都一致认为该master有问题，才可以进行下一步操作，这就保证了公平性和高可用。</li></ul></li></ul></li><li><strong>sentinel auth-pass <master-name> <password></password></master-name></strong><ul><li>master设置了密码，连接master服务的密码</li></ul></li><li>其他<ul><li><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921285.png" alt="image-20240130222816628"></li></ul></li></ul><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>当一个主从配置中的master失效后，sentinel可以选举出一个新的master用于自动接替原master的工作，主从配置中的其他redis服务器自动指向新的master同步数据，一般建议sentinel采取奇数台，防止某一台sentinel无法连接到master导致误切换</p><p><strong>运行流程和故障切换</strong></p><p><strong>SDown主观下线（Subjectively Down）：</strong></p><ul><li>指的是单个Sentinel实例对服务器做出的下线判断，即单个sentinel认为某个服务下线（有可能是接收不到订阅，之间的网络不通等等原因）</li><li>SDOWN主观不可用是单个sentinel自己主观上监测到的关于master的状态，从sentinel的角度来看，如果发送了PING心跳后在一定时间内没有受到合法的回复就视为达到了SDOWN的条件</li><li>sentinel配置文件中的down-after-milliseconds设置了判断主观下线的时间长度<ul><li><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921289.png" alt="image-20240226201439479"> </li><li>sentinel down-after-milliseconds <mastername> <timeout></timeout></mastername></li></ul></li></ul><p><strong>ODown客观下线（Objectively Down）：</strong></p><ul><li>ODOWN需要一定数量的sentinel，多个哨兵达成一致意见才能认为一个master客观上已经宕掉</li><li><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921288.png" alt="image-20240226211452689"> <ul><li>master-name：是对某个master+slave组合的一个区分标识（一套sentinel可以监听多组master+slave这样的组合）</li><li>quorum：是进行客观下线的一个依据，也称为法定人数/法定票数，意思是至少有quorum个sentinel认为这个master有故障才会对这个master进行下线以及故障转移，因为有的时候某个sentinel节点可能因为自身网络原因导致无法连接master，而此时master并没有出现故障，所以这就需要多个sentinel都一致认为该master有问题才可以进行下一步操作，报这个了公平性和高可用。</li></ul></li></ul><p><strong>当主节点被判断为客观下线：</strong>各个哨兵节点会进行协商，先选举出一个领导者哨兵节点，并由该领导节点进行故障迁移（failover）</p><p><strong>怎么选取出领导者哨兵节点？</strong></p><p>Raft算法：</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921279.png" alt="image-20240226212248667"> </p><p>监视该主节点的所有哨兵都有可能被选为领导者哨兵，选举使用的算法是Raft算法，其基本思路是<strong>先到先得</strong>，即在一轮选举中，哨兵A向B发送成为领导者的申请，如果B没有同意过其他哨兵，则会同意A成为领导者</p><p><strong>由领导者哨兵节点开始推动故障切换流程并选出一个新的master：</strong></p><ol><li><p>某个slave被选中成为新master</p><ul><li><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921577.png" alt="image-20240226213025479"> </p></li><li><p>选出新master的规则（剩余slave节点健康的前提下）：</p><ul><li><p>redis.conf文件中，优先级slave-priority或者replica-priority最高的从节点（数字越小优先度越高）</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921045.png" alt="image-20240226212830087"> </p></li><li><p>复制偏移位置offset最大的从节点</p></li><li><p>最小Run ID的从节点（字典顺序，ASCII码）</p></li></ul></li></ul></li><li><p>重新确立master</p><ul><li>执行slaveof no one命令让选出来的从节点成为新的主节点，并通过slaveof命令让其他节点成为其从节点</li><li>sentinel leader会对选举出的新master执行slaveof no one操作，将其提升为master节点</li><li>sentinel leader向其他slave发送命令，让剩余的slave成为新的master节点的slave</li></ul></li><li><p>之前宕机的master重连后不会成为master</p><ul><li>将之前已经下线的老master设置为新选出的新master的从节点，当老master重新上线后，他会成为新master的从节点</li><li>sentinel leader会让原来的master降级为slave并恢复正常工作</li></ul></li></ol><h3 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h3><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921093.png" alt="image-20240226213528086"> </p><h2 id="哨兵使用建议"><a href="#哨兵使用建议" class="headerlink" title="哨兵使用建议"></a>哨兵使用建议</h2><ul><li>哨兵节点的数量应为多个，哨兵本身应该集群，保证高可用</li><li>哨兵节点的数量应该是奇数个</li><li>各个哨兵节点的配置应该一致</li><li>如果哨兵节点部署在Docker等容器里面，尤其要注意端口的正确映射</li><li>哨兵集群+主从复制，并不能保证数据零丢失</li></ul><h1 id="Redis集群（cluster）"><a href="#Redis集群（cluster）" class="headerlink" title="Redis集群（cluster）"></a>Redis集群（cluster）</h1><p>对于主从复制+哨兵的形式还是有所缺陷，于是产生了集群的这一种方式，其不同于复制+哨兵。</p><h2 id="是什么？-3"><a href="#是什么？-3" class="headerlink" title="是什么？"></a>是什么？</h2><p><strong>由于数据量过大， 单个Master复制集难以承受</strong>，因此需要对多个复制集进行集群，形成水平扩展，每个复制集只负责存储整个数据集的一部分，这就是Redis的集群。</p><h2 id="有什么用？"><a href="#有什么用？" class="headerlink" title="有什么用？"></a>有什么用？</h2><p>提供在多个Redis节点间共享数据的程序集</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921231.png" alt="image-20240228215702550"> </p><ul><li>Redis集群支持多个Master，每个Master又可以挂载多个Slave<ul><li>读写分离</li><li>支持数据的高可用</li><li>支持海量数据的读写存储操作</li></ul></li><li>由于Cluster自带Sentinel的故障转移机制，内置了高可用的支持，<strong>无需再去使用哨兵功能</strong></li><li>客户端与Redis的节点连接，不再需要连接集群中所有的节点，只需要任意连接集群中的一个可用节点即可</li><li><strong>槽位slot</strong>负责分配到各个物理服务节点，由对应的集群来负责维护节点、插槽和数据之间的关系</li></ul><h2 id="集群算法-分片-槽位slot"><a href="#集群算法-分片-槽位slot" class="headerlink" title="集群算法-分片-槽位slot"></a>集群算法-分片-槽位slot</h2><p>官网出处：</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921165.png" alt="image-20240228220805475"> </p><h3 id="redis集群的槽位slot"><a href="#redis集群的槽位slot" class="headerlink" title="redis集群的槽位slot"></a>redis集群的槽位slot</h3><p>Redis集群<strong>没有使用一致性hash</strong>，而是引入了<strong>哈希槽</strong>的概念</p><p>Redis集群由16384个哈希槽，每个key通过CRC15校验后对16384取模来决定放置哪个槽，集群的每个节点负责一部分哈希槽，例如：当前集群由3个节点，则</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921158.png" alt="image-20240228221039687"> </p><h3 id="Redis集群的分片"><a href="#Redis集群的分片" class="headerlink" title="Redis集群的分片"></a>Redis集群的分片</h3><p>分片是什么？</p><ul><li>使用Redis集群时我们会将存储的数据分散到多台redis机器上，这称为分片，集群中的每个Redis实例都被认为是整个数据的一个分片</li></ul><p>如何找到给定key的分片？</p><ul><li>为了找到给定key的分片，我们对key进行CRC16(key)算法处理并通过对总分片数量取模，然后<strong>使用确定性哈希函数</strong>，意味着给定的key<strong>将多次始终映射到同一个分片</strong>，我们可以推断将来读取特定key的位置</li></ul><h3 id="槽位和分片的优势"><a href="#槽位和分片的优势" class="headerlink" title="槽位和分片的优势"></a>槽位和分片的优势</h3><p><strong>最大优势：方便扩缩容和数据分派查找</strong></p><ul><li>这种结构很容易添加或删除节点，如果想添加一个新的节点，则需要从前面的节点中得到部分槽位给新的节点上，如果想移除某个节点则需要将该结点中的槽位移动到剩余节点的曹魏中，然后将没有任何槽位的节点移除即可，由于从一个节点将哈希槽移动到另一个节点并不会停止服务，所以无论添加删除或者改变某个节点的哈希槽的数量都不会造成集群不可用的状态</li></ul><h3 id="slot槽位映射的解决方案"><a href="#slot槽位映射的解决方案" class="headerlink" title="slot槽位映射的解决方案"></a>slot槽位映射的解决方案</h3><ol><li><p>哈希取余分区</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921611.png" alt="image-20240228222703410"> </p><ul><li>两亿条记录就是两亿个k，v键值对，我们单机不行必须要分布式多机器，用户每次读写操作都是根据公式：<code>hash(key) % N个机器数量</code>，计算出哈希值，用来决定数据映射到哪一个节点上</li><li>优点：简单粗暴且直接有效，只需要预估好数据，规划好节点，就能保证一段时间的数据支撑，使用Hash算法让固定的一部分请求落到同一台服务器上，这样每台服务器固定处理一部分请求（并维护这些请求的信息），起到负载均衡分而治之的作用。</li><li>缺点：原来规划好的节点进行扩容或者缩容会比较麻烦，不管扩缩，每次数据变动导致节点有变动，映射关系需要重新进行计算，在服务器个数固定不变时没有问题，如果需要弹性扩容或故障停机的情况下，原来的取模公式就会发生变化：Hash(key) % 3会变成Hash(key) % ?，此时计算出的哈希地址经过取余运算的结果将发生很大变化，根据公式获取的服务器也会变得不可控。</li></ul></li><li><p>一致性哈希算法分区</p><ul><li><p>是什么？</p><ul><li>为了解决<strong>分布式缓存数据变动和映射问题。</strong>某个机器宕机了，分母数量发生改变，自然取余会导致问题的发生。</li></ul></li><li><p>目的：当服务器数量发生变动时，尽量减少影响客户端到服务器的映射关系</p></li><li><p>三大步骤：</p><ol><li><p>算法构建一致性哈希环（哈希环类似循环队列）</p><ul><li><p>一致性哈希环算法必然有个hash函数并按照算法产生hash值，这个算法的所有可能哈希值会构成一个集合，这个集合可以成为一个hash空间[0,2^32-1]，但这是一个线性空间（类似线性队列），于是我们通过对2^32取模，将其在逻辑上形成一个虚拟的环形空间，一致性Hash算法对2^32取模</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921619.png" alt="image-20240228224517161"> <strong>哈希环</strong></p></li></ul></li><li><p>redis服务器IP节点映射</p><ul><li><p>将集群中的各个IP节点映射到环上的某一个位置</p></li><li><p>将服务器使用Hash算法确定每台机器在哈希环上的位置</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921016.png" alt="image-20240228224818527"></p></li></ul></li><li><p>key落到服务器的落键规则</p><ul><li><p>当我们需要存储一个kv键值对时，会按照和计算哈希环相同的函数去计算key的哈希值，然后再从计算出的位置沿着环的顺时针进行行走，遇到的第一台redis服务器就是该key应该定位到的服务器</p></li><li><p>例如：现在有ObjectA、ObjectB、ObjectC、ObjectD四个数据对象，经过哈希函数算出位置如下图，这时候各自再沿着哈希环顺时针行走知道遇到的第一个服务器就是他们各自应该在的服务器即：ObjectA会被定位到NodeA上，ObjectB会被定位到NodeB上，ObjectC会被定位到NodeC上，ObjectD会被定位到NodeD上</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921033.png" alt="image-20240228225544117"></p></li></ul></li></ol></li><li><p>优点：</p><ul><li><p>容错性：假设NodeC宕机，此时的A、B、D不会受到影响，一般的在一致性Hash算法中，如果一台服务器不可用，则<strong>受影响的数据仅仅是此服务器到其环空间中前一台服务器（即沿着哈希环逆时针行走遇到的第一台服务器）之间的数据</strong>，其他的不会收到影响，即C宕机了，受到影响的只是B、C之间的数据，且<strong>这些数据会转移到D进行存储</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921040.png" alt="image-20240228230338623"> </p></li><li><p>扩展性：数据量增加，需要增加一台节点NodeX，X的位置在A和B之间，那受到影响的也就只是A到X之间的数据，重新把A到X的数据录入到X上即可，不会导致Hash取余全部数据重新计算</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921060.png" alt="image-20240228230359053"></p></li></ul></li><li><p>缺点：哈希环的数据倾斜问题。一致性Hash算法在服务节点太少时，容易因为节点分布不均匀而造成数据倾斜，即被缓存的对象大部分集中缓存在某一台服务器上</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921311.png" alt="image-20240228230808454"></p></li></ul></li><li><p><strong>哈希槽分区</strong></p><ul><li><p>目的：为了解决一致性哈希算法的<strong>数据倾斜</strong>问题</p></li><li><p>实质：是一个数组[0,2^14-1]形成hash slot空间</p></li><li><p>能干什么？</p><ul><li><p>解决均匀分配的问题，<strong>在数据和节点之间又加入了一层，把这层称为哈希槽（hash slot），用于管理数据和节点之间的关系</strong>，现在就相当于节点上放的是槽，槽里放的是数据。</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921319.png" alt="image-20240229083050262"> </p><p>槽解决的是粒度问题，相当于把粒度变大了，方便数据移动，哈希解决的是映射问题，使用key的哈希值来计算所在的槽，便于数据分配</p></li></ul></li><li><p>多少个哈希槽？</p><ul><li>一个集群只能有16384个槽，编号0-16384（0~2^14-1）。这些槽会分配给集群中的所有主节点，分配策略没有要求</li><li>集群会记录节点和槽的对应关系，解决了节点和槽的关系后，会需要对key求哈希值，然后对16384取模，余数是多少key就落入对应的槽里。<code>HASH_SLOT = CRC16(key) mod 16384</code>以槽为单位移动数据，因为槽的数目是固定的，处理起来比较容易，这样数据移动问题就得以解决</li></ul></li><li><p>哈希槽计算</p><ul><li><p>Redis集群中内置了16384个哈希槽，redis会根据节点数量大致均等的将哈希槽映射到不同的节点，当需要在Redis集群中放置一个key-value时，redis先对key使用CRC16算法算出一个值然后用该值对16384取余数，这样每个key都会对应一个编号在0-16383之间的哈希槽，映射到某个节点上，如下：</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921970.png" alt="image-20240229084901043"></p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//import io.lettuce.core.cluster.SlotHash;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">SlotHash</span><span class="token punctuation">.</span><span class="token function">getSlot</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//6373</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">SlotHash</span><span class="token punctuation">.</span><span class="token function">getSlot</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10374</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">SlotHash</span><span class="token punctuation">.</span><span class="token function">getSlot</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//14503</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">SlotHash</span><span class="token punctuation">.</span><span class="token function">getSlot</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//866</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><h3 id="为什么Redis集群的的最大槽数是16384个？"><a href="#为什么Redis集群的的最大槽数是16384个？" class="headerlink" title="为什么Redis集群的的最大槽数是16384个？"></a>为什么Redis集群的的最大槽数是16384个？</h3><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921105.png" alt="image-20240229093009219"> </p><ol><li>如果槽位为65536（2^16），发送心跳信息的消息头高达8k，发送的心跳包过于庞大<ul><li>在消息头中最占空间的是myslot[CLUSTER_SLOT/8]<ul><li>当槽位为65536时，这块的大小是：65536÷8÷1024=8kb</li><li>当槽位为16384时，这块的大小是：15384÷8÷1024=2kb</li></ul></li><li>因为每秒钟redis节点需要发送一定数量的ping消息作为心跳包，如果槽位为65536，这个ping的消息头太大了，浪费带宽。</li></ul></li><li>redis集群的主节点数量基本不可能超过1000个<ul><li>集群节点越多，心跳包的消息体内携带的数据越多，如果节点过1000个，也会导致网络拥挤，因此redis作者不建议redis cluster节点数量超过1000个，那个对于节点数在1000个以内的redis集群，16384个槽位够用了，没有必要拓展到65536个</li></ul></li><li>槽位越小，节点越少的情况下，压缩比高，容易传输<ul><li>Redis主节点的配置信息中它所负责的哈希槽是通过一张bitmap的形式来保存的，在传输过程中会对bitmap进行压缩，但是如果bitmap的填充率（slots / N）很高的话（N表示节点数），bitmap的压缩率就很低，如果节点数很少，而哈希槽数很多的话，bitmap的压缩率就很低</li></ul></li></ol><h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><p>Redis集群<strong>不保证强一致性</strong>，意味着在特定的条件下，Redis集群可能会丢失一些被系统收到的写入请求命令</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921119.png" alt="image-20240229094041251"> </p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/04/07/hello-world/"/>
      <url>/2024/04/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>为什么Java只有值传递？</title>
      <link href="/2024/04/23/wei-shi-me-java-zhi-you-zhi-chuan-di/"/>
      <url>/2024/04/23/wei-shi-me-java-zhi-you-zhi-chuan-di/</url>
      
        <content type="html"><![CDATA[<h1 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h1><ul><li><strong>形参（形式参数，Parameters）</strong>：用于定义函数/方法，接收实参，不需要有确定值</li><li><strong>实参（实际参数，Arguments）</strong>：用于传递给函数/方法，必须要有确定值</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// str为实参</span>    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"Hello, World!"</span><span class="token punctuation">;</span>    <span class="token function">sayHello</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// string为形参</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">String</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="值传递和引用传递"><a href="#值传递和引用传递" class="headerlink" title="值传递和引用传递"></a>值传递和引用传递</h1><ul><li><strong>值传递</strong>：方法接收的是实参值的拷贝，会创建副本</li><li><strong>引用传递</strong>：方法接收的是实参所引用的对象在堆中的地址，不会创建副本，对于形参的修改将影响到实参</li></ul><p>交换两个变量的值</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSwap1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a: "</span> <span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">", b: "</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">swap1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a: "</span> <span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">", b: "</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swap1</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">;</span>    a <span class="token operator">=</span> b<span class="token punctuation">;</span>    b <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>很明显这样子交换是不行的，传入的参数其实是实参的拷贝，所以并不会交换两个参数的值</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404231524905.png" alt="image-20240423152414860"> </p><p>正确的做法：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> <span class="token class-name">A</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token class-name">B</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSwap2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    testStream t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">testStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token namespace">t<span class="token punctuation">.</span></span>A</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token namespace">t<span class="token punctuation">.</span></span>B</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A: "</span> <span class="token operator">+</span> <span class="token class-name"><span class="token namespace">t<span class="token punctuation">.</span></span>A</span> <span class="token operator">+</span> <span class="token string">", B: "</span> <span class="token operator">+</span> <span class="token class-name"><span class="token namespace">t<span class="token punctuation">.</span></span>B</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t<span class="token punctuation">.</span><span class="token function">swap2</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A: "</span> <span class="token operator">+</span> <span class="token class-name"><span class="token namespace">t<span class="token punctuation">.</span></span>A</span> <span class="token operator">+</span> <span class="token string">", B: "</span> <span class="token operator">+</span> <span class="token class-name"><span class="token namespace">t<span class="token punctuation">.</span></span>B</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swap2</span><span class="token punctuation">(</span>testStream t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">t<span class="token punctuation">.</span></span>A</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token namespace">t<span class="token punctuation">.</span></span>A</span> <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">t<span class="token punctuation">.</span></span>B</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token namespace">t<span class="token punctuation">.</span></span>B</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>往形参里面传入对量，在交换的时候就是实实在在的交换对象在堆中的地址，所以会发生交换</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404231525794.png" alt="image-20240423152503778"> </p><p>那</p><h1 id="为什么Java只有值传递？"><a href="#为什么Java只有值传递？" class="headerlink" title="为什么Java只有值传递？"></a>为什么Java只有值传递？</h1><h2 id="例1：传递基本类型参数"><a href="#例1：传递基本类型参数" class="headerlink" title="例1：传递基本类型参数"></a>例1：传递基本类型参数</h2><p>就是上面提到的交换两个参数值，在<code>swap1()</code>方法中，形参a，b二值进行交换并不会影响到实参a，b二值，只是实参复制的副本，无论副本怎么修改都不会影响到原件本身。</p><h2 id="例2：传递引用参数类型（1）"><a href="#例2：传递引用参数类型（1）" class="headerlink" title="例2：传递引用参数类型（1）"></a>例2：传递引用参数类型（1）</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">change</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>    array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行结果</p><pre class="language-plain" data-language="plain"><code class="language-plain">10</code></pre><p>其实这里传递的还是值，只不过这个值是实参的地址</p><p>也就是说<code>change</code>方法的参数拷贝的是<code>arr</code>（实参）的地址，因此他和<code>arr</code>指向的是同一个数组对象，这也就说明了为什么方法内部对形参的修改会影响到实参</p><h2 id="例3：传递引用参数类型（2）"><a href="#例3：传递引用参数类型（2）" class="headerlink" title="例3：传递引用参数类型（2）"></a>例3：传递引用参数类型（2）</h2><p>Person</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>feliks</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Person</span> xiaoZhang <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"小张"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Person</span> xiaoLi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"小李"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>xiaoZhang<span class="token punctuation">,</span> xiaoLi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"xiaoZhang: "</span> <span class="token operator">+</span> xiaoZhang<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"xiaoLi: "</span> <span class="token operator">+</span> xiaoLi<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person1<span class="token punctuation">,</span> <span class="token class-name">Person</span> person2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Person</span> temp <span class="token operator">=</span> person1<span class="token punctuation">;</span>    person1 <span class="token operator">=</span> person2<span class="token punctuation">;</span>    person2 <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"person1: "</span> <span class="token operator">+</span> person1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"person2: "</span> <span class="token operator">+</span> person2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><pre class="language-java" data-language="java"><code class="language-java">person1<span class="token operator">:</span> 小李person2<span class="token operator">:</span> 小张xiaoZhang<span class="token operator">:</span> 小张xiaoLi<span class="token operator">:</span> 小李</code></pre><p>可以看到，两个引用类型的形参交换并没有影响到实参，<code>swap</code> 方法的参数 <code>person1</code> 和 <code>person2</code> 只是拷贝的实参 <code>xiaoZhang</code> 和 <code>xiaoLi</code> 的地址。因此， <code>person1</code> 和 <code>person2</code> 的互换只是拷贝的两个地址的互换罢了，并不会影响到实参 <code>xiaoZhang</code> 和 <code>xiaoLi</code> </p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现可固定大小的本地缓存</title>
      <link href="/2024/04/20/shi-xian-ke-gu-ding-da-xiao-de-ben-di-huan-cun/"/>
      <url>/2024/04/20/shi-xian-ke-gu-ding-da-xiao-de-ben-di-huan-cun/</url>
      
        <content type="html"><![CDATA[<h1 id="核心实现"><a href="#核心实现" class="headerlink" title="核心实现"></a>核心实现</h1><p><a href="https://feliks.netlify.app/2024/04/16/ji-cheng-linkedhashmap-shi-xian-jian-dan-de-lru-suan-fa/">继承LinkedHashMap实现简单的LRU算法 | Feliks</a></p><p>使用<code>LRU</code>淘汰策略，重写<code>LinkedHashMap</code>中的<code>removeEldestEntry()</code>方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">removeEldestEntry</span><span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> eldest<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>重写为：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">removeEldestEntry</span><span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span> eldest<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> size<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在进行<code>put</code>操作的时候会判断，如果为true就会删除最老的那个<code>entry</code></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="MyCache"><a href="#MyCache" class="headerlink" title="MyCache"></a>MyCache</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>feliks<span class="token punctuation">.</span>core</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedHashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> lock<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MyCache</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token class-name">Object</span> lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>size <span class="token operator">*</span> <span class="token number">1.4f</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.75f</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lock <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>lock <span class="token operator">=</span> lock<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">MyCache</span> <span class="token function">setLock</span><span class="token punctuation">(</span><span class="token class-name">Object</span> lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lock <span class="token operator">=</span> lock<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">MyCache</span> <span class="token function">setSize</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 重写LinkedHashMap的removeEldestEntry方法     * 在Put的时候判断如果为true就会删除最老的     *     * @param eldest     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">removeEldestEntry</span><span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span> eldest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 当其他线程试图访问被synchronized修饰的代码块时会被阻塞，     * 只有当前拿到锁的进程可以访问代码块     *     * @param key     */</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * @param key     * @param value     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">putValue</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">removeValue</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Object</span> remove <span class="token operator">=</span> <span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> remove <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="引导类MyCacheBs"><a href="#引导类MyCacheBs" class="headerlink" title="引导类MyCacheBs"></a>引导类MyCacheBs</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>feliks<span class="token punctuation">.</span>core</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCacheBs</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> lock<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">MyCacheBs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 创建对象实例     *     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">MyCacheBs</span> <span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyCacheBs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 设置大小限制     *     * @param size     * @return     */</span>    <span class="token keyword">public</span> <span class="token class-name">MyCacheBs</span> <span class="token function">setSize</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * @param lock     * @return     */</span>    <span class="token keyword">public</span> <span class="token class-name">MyCacheBs</span> <span class="token function">setLock</span><span class="token punctuation">(</span><span class="token class-name">Object</span> lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lock <span class="token operator">=</span> lock<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">MyCache</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MyCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> myCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> lock<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> myCache<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>feliks<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">MyCache</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>feliks<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">MyCacheBs</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> testMyCache <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MyCache</span> cache <span class="token operator">=</span> <span class="token class-name">MyCacheBs</span>                <span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setLock</span><span class="token punctuation">(</span>testMyCache<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cache<span class="token punctuation">.</span><span class="token function">putValue</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"test1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cache<span class="token punctuation">.</span><span class="token function">putValue</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"test2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cache<span class="token punctuation">.</span><span class="token function">putValue</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"test3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cache<span class="token punctuation">)</span><span class="token punctuation">;</span>        cache<span class="token punctuation">.</span><span class="token function">putValue</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"test1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cache<span class="token punctuation">)</span><span class="token punctuation">;</span>        cache<span class="token punctuation">.</span><span class="token function">putValue</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"test3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cache<span class="token punctuation">)</span><span class="token punctuation">;</span>        cache<span class="token punctuation">.</span><span class="token function">putValue</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"test4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cache<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404201707945.png" alt="image-20240420170734920"> </p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 淘汰算法 </tag>
            
            <tag> 缓存 </tag>
            
            <tag> LRU </tag>
            
            <tag> LinkedHashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础3.0</title>
      <link href="/2024/04/18/java-ji-chu-3.0/"/>
      <url>/2024/04/18/java-ji-chu-3.0/</url>
      
        <content type="html"><![CDATA[<h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><p><strong>Java异常类层次结构图概览</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404181509151.png" alt="image-20240418150926127"> </p><h2 id="Exception-和-Error-有什么区别？"><a href="#Exception-和-Error-有什么区别？" class="headerlink" title="Exception 和 Error 有什么区别？"></a>Exception 和 Error 有什么区别？</h2><p>在Java中，所有的异常类都有一个共同的祖先：<code>java.lang.Throwable</code></p><p><code>Throwable</code>类有两个重要的子类：</p><ul><li><code>Exception</code><ul><li>程序本身可以处理的异常，可以通过<code>try-catch</code>进行捕获。</li><li><code>Exception</code>又分为<code>Checked Exception</code>（受检查异常，必须处理）和<code>Unchecked Exception</code>（不受检查异常，可以不处理）</li></ul></li><li><code>Error</code><ul><li>属于程序无法处理的错误，不建议通过<code>try-catch</code>捕获</li><li>例如JVM虚拟机运行错误（<code>Virtual MechineError</code>）、虚拟机内存不够错误（<code>OutOfMemoryError</code>）、类定义错误（<code>NoClassDefFoundError</code>）等，这些异常发生时，JVM一般会选择线程终止</li></ul></li></ul><h2 id="Checked-Exception-和-Unchecked-Exception有什么区别？"><a href="#Checked-Exception-和-Unchecked-Exception有什么区别？" class="headerlink" title="Checked Exception 和 Unchecked Exception有什么区别？"></a>Checked Exception 和 Unchecked Exception有什么区别？</h2><p><code>checked Exception</code>受检查异常，Java代码在编译的过程中，如果受检查异常没有被<code>catch</code>捕获或者<code>throws</code>关键字处理的话，就没有办法通过编译</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404181459528.png" alt="image-20240418145909485"> </p><p>除了<code>RuntimeException</code>及其子类之外，其余的<code>Exception</code>类及其子类都属于受检查异常</p><p>常见的受检查异常：<code>IOException</code>、<code>ClassNotFoundException</code>、<code>SQLException</code>等等</p><p><code>Unchecked Exception</code>不受检查异常，Java代码在编译的过程中，我们即使不处理不受检查异常也可以正常通过编译</p><p><code>RuntimeException</code>及其子类都统称为非受检查异常，常见的如下：</p><ul><li><code>NullPointerException</code>（空指针异常，NPE）</li><li><code>IllegalArgumentException</code>（参数异常，比如方法传入形参类型错误）</li><li><code>NumberFormatException</code>（字符串转换为数字格式异常，<code>IllegalArgumentException</code>的子类）</li><li><code>ArrayIndexOutOfBoundsException</code>（数组下标越界异常）</li><li><code>ClassCastException</code>（类型转换异常）</li><li><code>ArithmeticException</code>（算术异常）</li><li><code>SecurityException</code>（安全异常，例如权限不够）</li><li><code>UnsupportedOperationException</code>（不支持的操作异常，例如重复创建同一用户）</li><li>……还有很多不受检查异常</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404181520775.png" alt="image-20240418152019747"> </p><h2 id="Throwable类常用方法"><a href="#Throwable类常用方法" class="headerlink" title="Throwable类常用方法"></a>Throwable类常用方法</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 返回异常发生时的简要描述 * @return */</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> detailMessage<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 返回异常发生时的详细信息 * @return */</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token function">getLocalizedMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>message <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span> <span class="token operator">:</span> s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 返回异常对象的本地化信息，使用Throwable的子类覆盖这个方法，可以生成本地化信息 * 如果子类没有覆盖该发方法，则该方法返回的信息与getMessage()返回的结果相同 * @return */</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getLocalizedMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 在控制台打印Throwable对象封装的异常信息 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="try-catch-finally？"><a href="#try-catch-finally？" class="headerlink" title="try-catch-finally？"></a>try-catch-finally？</h2><ul><li><code>try</code>块：用于捕获异常，可后接零个或多个<code>catch</code>块，如果没有<code>catch</code>块，则必须跟一个<code>finally</code>块</li><li><code>catch</code>块：用于处理<code>try</code>捕获到的异常</li><li><code>finally</code>块：无论是否捕获或处理异常，<code>finally</code>块内的语句都会执行，当在<code>try</code>块或<code>catch</code>块中遇到<code>return</code>语句时，<code>finally</code>语句块将在方法<code>return</code>前被执行</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Try to do something."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"RuntimeException"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Catch Exception: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Finally"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行结果<br><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404182253309.png" alt="image-20240418225354257"> </p><blockquote><p>  <code>Considerations</code></p><p>  千万不要在<code>finally</code>块中使用<code>return</code>！当<code>try</code>语句和<code>finally</code>语句中都有<code>return</code>语句的时候<code>try</code>块中的<code>return</code>会被忽略，为什么呢？这是因为**<code>try</code>块中的<code>return</code>返回值会先被暂存在一个本地变量中，当执行到<code>finally</code>块中的<code>return</code>之后，这个本地变量的值就变成了<code>finally</code>块中<code>return</code>的返回值**</p></blockquote><p>在<a href="https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.10.2.5">JVM官方文档</a>中明确提到了相关内容</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404182307345.png" alt="image-20240418230717318"> </p><p>演示</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> value <span class="token operator">*</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如上代码所示<code>try</code>和<code>finally</code>中都定义了<code>return</code>语句，调用方法时传入5，您猜怎么着，输出的结果并不是25，而是0</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404182311998.png" alt="image-20240418231154972"> </p><p>验证了上面所说的，所以<strong>不要在finally中写return语句</strong></p><h2 id="finally块中的代码一定会执行吗？"><a href="#finally块中的代码一定会执行吗？" class="headerlink" title="finally块中的代码一定会执行吗？"></a>finally块中的代码一定会执行吗？</h2><p>不一定，以上方<code>try-catch-finally</code>中的代码举例</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Try to do something."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"RuntimeException"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Catch Exception: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Finally"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在<code>finally</code>之前虚拟机就被终止运行的话，是不会执行到<code>finally</code>块中的语句的，上方代码直接在<code>catch</code>块中直接终止程序，程序自然就不会走到<code>finally</code>块</p><p>运行结果：</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404182320423.png" alt="image-20240418232049400"> </p><h2 id="如何使用try-with-resources代替try-catch-finally？"><a href="#如何使用try-with-resources代替try-catch-finally？" class="headerlink" title="如何使用try-with-resources代替try-catch-finally？"></a>如何使用<code>try-with-resources</code>代替<code>try-catch-finally</code>？</h2><ol><li><p><strong><code>try-with-resources</code>的适用范围</strong>：实现任何<code>java.lang.AutoCloseable</code>或者<code>java.io.Closeable</code>的对象</p><p>例：</p><p>Scanner.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Scanner</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">Closeable</span> <span class="token punctuation">{</span>    <span class="token comment">// ......</span><span class="token punctuation">}</span></code></pre></li><li><p><strong>关闭资源和<code>finally</code>块的执行顺序</strong>：在<code>try-with-resources</code>语句中，任何<code>catch</code>或<code>finally</code>块在声明的资源关闭后运行</p></li></ol><p>在<code>Java</code>种类似于<code>InputStream</code>、<code>OutputStream</code>、<code>Scanner</code>、<code>PrintWriter</code>等资源都需要我们调用<code>close()</code>方法来手动关闭，一般情况下都是通过<code>try-catch-finally</code>语句来实现这个需求</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"F://read.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sc <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>编译器会提醒我们使用<code>try-with-resources</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404202153514.png" alt="image-20240420215302432"> </p><p>使用<code>Java7</code>之后的<code>try-with-resources</code>语句改造上面的代码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"F://read.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果要关闭多个资源，使用<code>try-with-resources</code>通过分号进行分隔即可，可以在<code>try-with-resources</code>块中声明多个资源</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"F://read.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">BufferedInputStream</span> bin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">newInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">BufferedOutputStream</span> bout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">newOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"out.txt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> b<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">=</span> bin<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        bout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>不要把异常定义为静态变量，因为这样会导致异常栈信息错乱，每次手动抛出异常，我们都需要手动<code>new</code>一个异常对象抛出</li><li>建议抛出更加具体的异常比如字符串转换为数字格式错的的时候应该抛出<code>NumberFormatException</code>而不是父类<code>IllegalArgumentException</code></li></ul><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><h2 id="泛型是什么？作用？"><a href="#泛型是什么？作用？" class="headerlink" title="泛型是什么？作用？"></a>泛型是什么？作用？</h2><p><strong>Java泛型（Generics）</strong>是JDK5中引入的一个新特性，使用泛型参数，可以增强代码的可读性以及稳定性</p><p>编译器可以对泛型参数进行检测，并且通过泛型参数可以指定传入的对象类型，例如：</p><p><code>ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();</code></p><p>上面这段代码指明了该<code>ArrayList</code>对象只能传入<code>Integer</code>对象，如果传入其他类型的对象就会报错</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span></code></pre><h2 id="泛型的使用方式？"><a href="#泛型的使用方式？" class="headerlink" title="泛型的使用方式？"></a>泛型的使用方式？</h2><p>三种：<strong>泛型类</strong>、<strong>泛型接口</strong>、<strong>泛型方法</strong></p><ol><li><p><strong>泛型类</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">K</span> key<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">V</span> value<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Generic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Generic</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setKey</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">K</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> key<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Generic{"</span> <span class="token operator">+</span> <span class="token string">"key="</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">", value="</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token char">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>实例化泛型类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> generic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"value=1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><strong>泛型接口</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IGenerator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">K</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>实现泛型接口，不指定类型</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GeneratorImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">IGenerator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">K</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>实现泛型接口，指定类型</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GeneratorImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">IGenerator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"I am method1()"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p><strong>泛型方法</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inputArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">E</span> element <span class="token operator">:</span> inputArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>element <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>测试</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> integers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">printArray</span><span class="token punctuation">(</span>integers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printArray</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404202249664.png" alt="image-20240420224931637"> </p><blockquote><p>  <strong>Considerations</strong></p><ul><li><code>public static &lt;E&gt; void printArray(E[] inputArray)</code>一般被称为<strong>静态泛型方法</strong></li><li>在<code>Java</code>中泛型只是一个占位符，必须在传递类型之后才能使用。</li><li>类在实例化时才能真正的传递类型参数，由于<strong>静态方法的加载优先于类的实例化</strong>，即类中的泛型还没有传递真正的类型参数，静态方法的加载已经完成了，所以静态泛型方法是没有办法使用类上声明的泛型的，只能使用自己声明的<code>&lt;E&gt;</code></li></ul></blockquote></li></ol><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h2 id="什么是反射？"><a href="#什么是反射？" class="headerlink" title="什么是反射？"></a>什么是反射？</h2><p>是框架的灵魂，因为其赋予了我们在运行时分析类以及执行类中方法的能力</p><p>通过反射我们可以获取和调用任意一个类所有属性和方法</p><h2 id="应用场景？"><a href="#应用场景？" class="headerlink" title="应用场景？"></a>应用场景？</h2><p>例如<code>Spring</code>、<code>SpringBoot</code>、<code>MyBatis</code>等框架都大量使用了反射机制</p><p><strong>这些框架中大量使用了动态代理，而动态代理的实现也依赖反射</strong></p><p>通过JDK实现动态代理，<code>Method</code>反射类调用指定的方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationHandler</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationTargetException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DebugInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 代理类中的真实对象     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> target<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">DebugInvocationHandler</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before method "</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> invoke <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after method "</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> invoke<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>此外，在Java中，注解的实现也使用到了反射</p><h2 id="反射的优缺点？"><a href="#反射的优缺点？" class="headerlink" title="反射的优缺点？"></a>反射的优缺点？</h2><p><strong>优点</strong></p><p>使代码更灵活，为各种框架提供开箱即用的功能提供了便利</p><p><strong>缺点</strong></p><p>使我们在运行时有了分析类的能力，但是也增加了安全问题，比如可以无视泛型参数的安全检查（泛型参数的安全检查发生在编译时）</p><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><h2 id="注解是什么？"><a href="#注解是什么？" class="headerlink" title="注解是什么？"></a>注解是什么？</h2><p><code>Annotation</code>（注解），是JDK5.0引入的新特性，可以看作是一种特殊的注释，主要用于修饰类、方法或者变量，提供某些信息供程序在编译或运行时使用</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404211038768.png" alt="image-20240421103847720"> </p><p>注解的本质是继承了<code>Annotation</code>的特殊接口</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">SOURCE</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Override</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p><code>@interface</code>：表示实现了<code>Annotation</code>接口</p><h2 id="Java中内置的注解"><a href="#Java中内置的注解" class="headerlink" title="Java中内置的注解"></a>Java中内置的注解</h2><p>一共有<code>7</code>个，3个在<code>java.lang</code>中，<code>4</code>个在<code>java.lang.annotation</code>中</p><p><strong>作用在代码上的注解</strong></p><ul><li><code>@Override</code>：检查该方法是不是重写方法，如果发现其父类或者引用的接口中没有该方法时就会报编译错误</li><li><code>@Deprecated</code>：标记过时方法，如果使用该方法会报编译警告</li><li><code>@SuppressWarnings</code>：指示编译器去忽略注解中声明的警告</li></ul><p><strong>作用在其他注解的注解（元注解）</strong></p><ul><li><code>@Retention</code>：标识这个注解怎么保存，是只在代码中，还是编入class文件中，或者是在运行时可以通过反射访问</li><li><code>@Documented</code>：标记这些注解是否包含在用户文档中</li><li><code>@Target</code>：标记这个注解应该是哪种Java成员</li><li><code>@Inherited</code>：标记这个注解是继承于哪个注解类（默认 注解并没有继承于任何子类）</li></ul><p><strong>从Java7开始，额外新增了<code>3</code>个注解</strong></p><ul><li><code>@SafeVarargs</code>：Java开始支持，忽略任何使用参数为范型变量的方法或构造函数调用产生的警告</li><li><code>@FunctionalInterface</code>：Java8开始支持，标识一个匿名函数或函数式接口</li><li><code>@Repeatable</code>：Java8开始支持，标识某注解可以在同一个声明上使用多次</li></ul><h2 id="Annotation架构"><a href="#Annotation架构" class="headerlink" title="Annotation架构"></a>Annotation架构</h2><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404211659873.jpeg" alt="img"> </p><p><strong>左边</strong></p><p><code>1</code>个<code>Annotation</code>对象，都会有唯一的<code>RetentionPolicy</code>属性，可以有1~n个<code>ElementType</code>属性</p><p><strong>右边</strong></p><p><code>Annotation</code>有许多实现类， 包括<code>Deprecated</code>、<code>Documented</code>、<code>Inherited</code>等</p><p><code>Annotation</code>的每一个实现类都和1个<code>RetentionPolicy</code>属性和1~n个<code>ElementType</code>属性相关联</p><h3 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h3><p><code>java Annotation</code>有3个非常重要的主干类</p><p><code>Annotation.java</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Annotation</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token punctuation">&gt;</span></span> <span class="token function">annotationType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>ElementType.java</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">ElementType</span> <span class="token punctuation">{</span>    <span class="token constant">TYPE</span><span class="token punctuation">,</span>    <span class="token constant">FIELD</span><span class="token punctuation">,</span>    <span class="token constant">METHOD</span><span class="token punctuation">,</span>    <span class="token constant">PARAMETER</span><span class="token punctuation">,</span>    <span class="token constant">CONSTRUCTOR</span><span class="token punctuation">,</span>    <span class="token constant">LOCAL_VARIABLE</span><span class="token punctuation">,</span>    <span class="token constant">ANNOTATION_TYPE</span><span class="token punctuation">,</span>    <span class="token constant">PACKAGE</span><span class="token punctuation">,</span>    <span class="token constant">TYPE_PARAMETER</span><span class="token punctuation">,</span>    <span class="token constant">TYPE_USE</span><span class="token punctuation">}</span></code></pre><p><code>RetentionPolicy.java</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">RetentionPolicy</span> <span class="token punctuation">{</span>    <span class="token constant">SOURCE</span><span class="token punctuation">,</span>    <span class="token constant">CLASS</span><span class="token punctuation">,</span>    <span class="token constant">RUNTIME</span><span class="token punctuation">}</span></code></pre><p><strong>说明</strong></p><ul><li><strong><code>Annotation</code>就是个接口</strong></li><li><strong><code>ElementType</code>是Enum枚举类型，其用来指定<code>Annotation</code>的类型</strong><ul><li>当<code>Annotation</code>里与某个<code>ElementType</code>关联，意味着<code>Annotation</code>具有了某种用途，例如一个<code>Annotation</code>对象的<code>ElementType</code>是<code>METHOD</code>类型，则该<code>Annotation</code>只能用来修饰方法</li></ul></li><li><strong><code>RetentionPolicy</code>是Enum枚举类型，其用来指定<code>Annotation</code>的策略，不同<code>RetentionPolicy</code>类型的<code>Annotation</code>的作用域不同</strong><ul><li>**类型为<code>SOURCE</code>**：<code>Annotation</code>仅存在于编译器处理期间，在编译器处理完后就没用了，例如<code>@Override</code>（重写），被该注解修饰的方法会在编译期间进行检查，如果发现其父类或者引用的接口中没有该方法时就会报编译错误，编译器处理完之后他就没用了。</li><li>**类型为<code>CLASS</code>**：编译器将<code>Annotation</code>存储于类对应的.class文件中（字节码文件），是<code>Annotation</code>的默认行为</li><li>**类型为<code>RUNTIME</code>**：编译器将<code>Annotation</code>存储与.class文件中，并且可由<code>JVM</code>可读</li></ul></li></ul><h2 id="通用Annotation定义"><a href="#通用Annotation定义" class="headerlink" title="通用Annotation定义"></a>通用Annotation定义</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p><strong>说明</strong></p><ul><li><p>**<code>@interface</code>**：实现了<code>java.lang.annotation.Annotation</code>接口，即该注解就是一个<code>Annotation</code>，定义<code>Annotation</code>时<code>@interface</code>是必须的</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404211727341.png" alt="image-20240421172721309"> </p><p><strong>注意</strong>：使用<code>@interface</code>定义注解后，该注解不能继承其他注解或接口</p></li><li><p>**<code>@Documented</code>**：类和方法在缺省情况下是不会出现在<code>javadoc</code>中的，如果用<code>@Documented</code>修饰该<code>Annotation</code>，则表示其可以出现在<code>javadoc</code>中</p></li><li><p><strong><code>@Target</code><strong>：用来指定<code>Annotation</code>的类型属性，里面就是上面所说的<code>ElementType</code>，类型指定为<code>TYPE</code>，意味着该<code>Annotation</code>（<code>MyAnnotation</code>）是用来修饰</strong>类、接口（包括注释类型）或枚举</strong>声明的注解</p><p>此外，如果没写<code>@Target</code>则该<code>Annotation</code>可以用于任何地方</p></li><li><p>**<code>@Retention</code>**：指定该<code>Annotation</code>的策略是<code>RUNTIME</code>，编译器会将该<code>Annotation</code>信息保存在<code>.class</code>文件中，并能被<code>JVM</code>虚拟机读取</p></li></ul><h2 id="注解的解析方法有哪些？"><a href="#注解的解析方法有哪些？" class="headerlink" title="注解的解析方法有哪些？"></a>注解的解析方法有哪些？</h2><p>注解只有被解析后才会生效，常见的解析方法有两种：</p><ol><li><strong>编译期直接扫描</strong>：编译器在编译Java代码的时候扫描对应的注解并处理，比如被<code>@Override</code>注解修饰，编译器在编译期间就会检查当前的方法是否重写了父类对应的方法</li><li><strong>运行期间通过反射处理</strong>：例如框架中自带的注解：<code>Spring</code>中的<code>@Value</code>、<code>@Component</code>都是通过反射进行处理的</li></ol><h1 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h1><h2 id="什么是序列化-反序列化？"><a href="#什么是序列化-反序列化？" class="headerlink" title="什么是序列化&amp;反序列化？"></a>什么是序列化&amp;反序列化？</h2><p>如果我们需要持久化Java对象，比如将其保存在文件中，或者在网络传输Java对象的时候，这些场景都需要用到序列化</p><ul><li><strong>序列化</strong>：将对象转化成二进制字节流的过程</li><li><strong>反序列化</strong>：将序列化生成的二进制字节流转换成数据结构或对象的过程</li></ul><p>常见的应用场景：</p><ul><li>对象在进行网络传输（比如远程方法调用 <code>RPC</code> 的时候）之前需要先被序列化，接收到序列化的对象之后需要在进行反序列化</li><li>将对象存储到文件之前需要进行序列化，将对象从文件中读取出来需要进行反序列化</li><li>将对象存储到数据库（例如<code>Redis</code>）之前需要用到序列化，将对象从缓存数据库中读取出来需要反序列化</li><li>将对象存储到内存之前需要进行序列化，从内存中读取出来之后需要进行反序列化</li></ul><h2 id="序列化协议对应于TCP-IP-四层模型的哪一层？"><a href="#序列化协议对应于TCP-IP-四层模型的哪一层？" class="headerlink" title="序列化协议对应于TCP/IP 四层模型的哪一层？"></a>序列化协议对应于TCP/IP 四层模型的哪一层？</h2><p><strong>TCP/IP四层模型</strong>（标红的是OSI7层协议模型）：</p><ol><li>应用层<ul><li><code>应用层</code>：为计算机用户提供服务</li><li><code>表示层</code>：数据处理（编解码、加密解密、压缩解压缩）</li><li><code>会话层</code>：管理（建立、维护、重连）应用程序之间的会话</li></ul></li><li><code>传输层</code>：为两台主机进程之间的通信提供通用的数据传输服务</li><li><code>网络层</code>：路由和寻址（决定数据在网络的游走路径）</li><li>网络接口层<ul><li><code>数据链路层</code>：帧编码和误差纠正控制</li><li><code>物理层</code>：透明地传送比特流传输</li></ul></li></ol><p>可以看到，<code>表示层</code>做的事情就是对应用层的用户数据进行处理转换为二进制流，反过来就是将二进制流转换成应用层的用户数据，对应了序列化和反序列化所做的事情。</p><p>OSI7层模型中的应用层、表示层、会话层都对应TCP/IP四层模型的应用层，所以序列化和反序列化都属于TCP/IP协议应用层的一部分</p><h2 id="常见的序列化协议"><a href="#常见的序列化协议" class="headerlink" title="常见的序列化协议"></a>常见的序列化协议</h2><p>JDK自带的序列化方式一般不会用，因为序列化效率低且存在安全问题，比较常用的序列化协议：Hession、Kryo、Protobuf、ProtoStuff，这些都是基于二进制的序列化协议</p><h3 id="JDK自带的序列化方式"><a href="#JDK自带的序列化方式" class="headerlink" title="JDK自带的序列化方式"></a>JDK自带的序列化方式</h3><p>实现<code>java.io.Serializable</code>接口</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RpcRequest</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">7184009336509858070L</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>serialVersionUID有什么用？</strong></p><p>序列化号<code>serialVersionUID</code>属于版本控制的作用，在进行反序列化时，会检查<code>serialVersionUID</code>是否和当前类的<code>serialVersionUID</code>一致，如果不一致就会抛出<code>InvalidClassException</code>异常，强烈建议每个序列化类都手动指定其<code>serialVersionUID</code>，如果不手动指定，编译器就会生成默认的<code>serialVersionUID</code></p><p><strong>serialVersionUID被static修饰符修饰了，为什么还会被序列化？</strong></p><p><code>static</code>修饰的变量时静态变量，位于方法区，本身是不会被序列化的，但是<code>serialVersionUID</code>的序列化做了特殊处理，在序列化时，会将<code>serialVersionUID</code>序列化到二进制字节流中，在反序列化时，也会解析它并做一致性判断</p><p>详见：<a href="https://github.com/Snailclimb/JavaGuide/issues/2174">Issue #2174(github.com)</a></p><blockquote><p>  官方文档中的描述：</p><p>  A serializable class can declare its own serialVersionUID explicitly by declaring a field named <code>"serialVersionUID"</code> that must be <code>static</code>, <code>final</code>, and of type <code>long</code></p><p>  <img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404212224493.png" alt="image-20240421222455425"></p><p>  如果想要显式地指定<code>serialVersionUID</code>，则需要在类中使用<code>static</code>和<code>final</code>关键字来修饰一个<code>long</code>类型的变量，变量名字必须为<code>serialVersionUID</code></p><p>  <strong>也就是说，<code>serialVersionUID</code>只是用来被JVM识别，实际并没有被序列化</strong></p></blockquote><p><strong>如果有些字段不想进行序列化怎么办？</strong></p><p>对于不想进行序列化的变量，可以使用<code>transient</code>关键字来修饰</p><p><code>transient</code>关键字的作用是：阻止实例中那些用词关键字修饰的变量序列化，当对象反序列化时，被<code>transient</code>修饰的变量值不会被持久化和恢复</p><ul><li><code>transient</code>只能修饰变量，不能修饰类和方法</li><li><code>transient</code>修饰的变量，在反序列化后变量值将会被置成类型的默认值，例如<code>int</code>型的变量在反序列化后的结果就是<code>0</code></li><li><code>static</code>变量因为不属于任何对象（Object），所以无论有没有<code>transient</code>关键字修饰，都不会被序列化</li></ul><p><strong>为什么不推荐使用JDK自带的序列化？</strong></p><p>原因如下：</p><ul><li><strong>不支持跨语言调用</strong>：如果调用的是其他语言开发的服务的时候就不支持了</li><li><strong>性能差</strong>：相比于其他序列化框架性能更低，主要原因是序列化后的字节数组体积较大，导致传输成本加大</li><li><strong>存在安全问题</strong>：序列化和反序列化本身并不存在问题，但是当输入的反序列化的数据可被用户控制，那么攻击者即可通过构造恶意输入，让反序列化产生非预期的对象，在此过程中执行构造的任意代码</li></ul><h1 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h1><h2 id="IO流？"><a href="#IO流？" class="headerlink" title="IO流？"></a>IO流？</h2><p>IO即<code>Input/Output</code>，输入和输出，<strong>数据输入到计算机内存的过程</strong>就是输入，反之<strong>输出到外部存储的过程（例如数据库、文件、远程主机等）</strong>就是输出。数据传输过程类似于水流，因此称为<strong>IO流</strong>。IO流在Java中分为输入流和输出流，而根据数据的处理方式又分为<strong>字节流</strong>和<strong>字符流</strong></p><p>在Java中，IO流的40多个类都是从以下4个抽象类基类中派生的</p><ul><li><code>InputStream</code>/<code>Reader</code>：所有输入流的基类，前者是字节输入流，后者是字符输入流</li><li><code>OutputStream</code>/<code>Writer</code>：所有输出流的基类，前者是字节输出流，后者是字符输出流</li></ul><h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><h3 id="InputStream（字节输入流）"><a href="#InputStream（字节输入流）" class="headerlink" title="InputStream（字节输入流）"></a>InputStream（字节输入流）</h3><p><code>InputStream</code>用于从源头（通常是文件）读取数据（字节信息）到内存中，<code>java.io.InputStream</code>抽象类是所有字节输入流的父类</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404221111163.png" alt="image-20240422111130860"> </p><p>常用方法：</p><ul><li><code>read()</code>：返回输入流中下一个字节的数据，返回的值在0~255之间，如果未读取任何字节，则代码返回<code>-1</code>，代表文件结束</li><li><code>read(byte b[])</code>：从输入流中读取一些字节存储到数组<code>b</code>中，如果数组<code>b</code>的长度为零，则不读取，如果没有可用字节读取，则返回<code>-1</code>，如果有可用字节读取，则最多读取的字节数等于数组<code>b</code>的长度（<code>b.length</code>），返回读取的字节数。这个方法等价于：<code>read(b, 0, b.length)</code></li><li><code>read(byte b[], int off, int len)</code>：在<code>read(byte b[])</code>方法的基础上增加了<code>off</code>参数（偏移量）和<code>len</code>参数（要读取的最大字节数）</li><li><code>skip(long n)</code>：忽略输入流中的n个字节，返回实际忽略的字节数</li><li><code>available()</code>：返回输入流中可以读取的字节数</li><li><code>close()</code>：关闭输入流释放相关的系统资源</li></ul><p>在java9开始，<code>InputStream</code>新增了多个方法：</p><ul><li><code>readAllBytes()</code>：读取输入流中的所有字节，返回字节数组</li><li><code>readNBytes(byte[] b, int off, int len)</code>：阻塞直到读取<code>len</code>个字节</li><li><code>transferTo(OutputStream)</code>：将所有字节从一个输入流传递到一个输出流</li></ul><p><code>FileInputSstream</code>是一个较为常用的字节输入流对象，可直接指定文件路径，可以直接读取单字节数据，也可以读取到字节数组中</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src/main/input.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// available()：返回输入流中可以读取的字节数</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Number of remaining bytes: "</span> <span class="token operator">+</span> inputStream<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> content<span class="token punctuation">;</span>    <span class="token comment">// skip(long n)：忽略输入流中的n个字节，返回实际忽略的字节数</span>    <span class="token keyword">long</span> skip <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The actual number of bytes skipped: "</span> <span class="token operator">+</span> skip<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The content read from file: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>content <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>input.txt的内容：</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404221417405.png" alt="image-20240422141751362"> </p><p>输出结果</p><pre class="language-plain" data-language="plain"><code class="language-plain">Number of remaining bytes: 106The actual number of bytes skipped: 2The content read from file: llo, this is my input.txt file.This is my Email: 983480256@qq.comThis is my phone number:13666666666</code></pre><p>通常不会直接单独使用<code>FileInputStream</code>，通常会结合<code>BufferedInputStream</code>（字节缓冲输入流）来使用，例：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">BufferedInputStream</span> bufferedInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src/main/input.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 读取文件的内容并复制到 String 对象中</span>    <span class="token class-name">String</span> string <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bufferedInputStream<span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>DataInputStream</code>用于读取指定类型数据，不能单独使用，必须结合其他流，比如<code>FileInputStream</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">DataInputStream</span> dataInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src/main/input.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 可以读取任意具体的类型数据</span>    dataInputStream<span class="token punctuation">.</span><span class="token function">readBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dataInputStream<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dataInputStream<span class="token punctuation">.</span><span class="token function">readUTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>ObjectInputStream</code>用于从输入流中读取Java对象（反序列化），<code>ObjectOutputtStream</code>用于将对象写入到输出流（序列化）</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">ObjectInputStream</span> objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src/main/object.data"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">MyClass</span> object <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MyClass</span><span class="token punctuation">)</span> objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>  另外，用于序列化和反序列化的类必须实现<code>Serializable</code>接口，对象中如果有属性不想被序列化，可以使用<code>transient</code>关键字来修饰。</p></blockquote><h3 id="OutputStream（字节输出流）"><a href="#OutputStream（字节输出流）" class="headerlink" title="OutputStream（字节输出流）"></a>OutputStream（字节输出流）</h3><p><code>OutputStream</code>用于将数据（字节信息）写入到目的地（通常是文件），<code>java.io.OutputStream</code>抽象类是所有字节输出流的父类</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404221449633.png" alt="image-20240422144909554"> </p><p>常用方法：</p><ul><li><code>write(int b)</code>：将特定字节写入输出流</li><li><code>write(byte b[])</code>：将数组<code>b</code>写入到输出流，等价于<code>write(b, 0, b.length)</code></li><li><code>write(byte b[], int off, int len)</code>：在<code>write(byte b[])</code>方法的基础上增加了<code>off</code>参数（偏移量）和<code>len</code>参数（要读取的最大字节数）</li><li><code>flush()</code>：刷新此输出流并强制写出所有缓冲的输出字节</li><li><code>close()</code>：关闭输出流释放相关的系统资源</li></ul><p><code>FileOutputStream</code>是最常用的字节输出流对象，可直接指定文件路径，可以直接输出单字节数据，也可以输出指定的字节数组</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileOutputStream</span> fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"src/main/output.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token string">"this is output.txt"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fileOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行结果</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404221530214.png" alt="image-20240422153004178"> </p><p>类似于<code>FileInputStream</code>，<code>FileOutputStream</code>通常也会配合<code>BufferedOutputStream</code>（字节缓冲输出流）来使用</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">BufferedOutputStream</span> bufferedOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"src/main/output.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token string">"write something here."</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bufferedOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404221537920.png" alt="image-20240422153723884"> </p><p><code>DataOutputStream</code>用写入指定类型数据，不能单独使用，必须结合其他流，比如<code>FlieOutputStream</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">DataOutputStream</span> dataOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"src/main/output.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token string">"test test test"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dataOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>ObjectInputStream</code>用于从输入流中读取Java对象（反序列化）</p><p><code>ObjectOutputtStream</code>用于将对象写入到输出流（序列化）</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">ObjectOutputStream</span> objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"src/main/output.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">MyClass</span> myClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token string">"Feliks"</span><span class="token punctuation">,</span> <span class="token string">"China"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>myClass<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><p>不管是文件读写还是网络发送请求，信息的最小存储单元都是字节，那<strong>为什么I/O流操作要分为字节流操作和字符流操作呢？</strong></p><ul><li>字符流是由Java虚拟机将字节转换得到的，该过程还是比较耗时</li><li>如果我们不知道编码类型很容易就会造成乱码问题</li></ul><p>将上面input.txt中的文件内容改为中文再次运行</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src/main/input.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// available()：返回输入流中可以读取的字节数</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Number of remaining bytes: "</span> <span class="token operator">+</span> inputStream<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> content<span class="token punctuation">;</span>    <span class="token comment">// skip(long n)：忽略输入流中的n个字节，返回实际忽略的字节数</span>    <span class="token keyword">long</span> skip <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The actual number of bytes skipped: "</span> <span class="token operator">+</span> skip<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The content read from file: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>content <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404221551254.png" alt="image-20240422155152216"> </p><p>很明显读取的内容已经变成了乱码</p><p>因此，I/O流提供了一个直接操作字符的接口，方便我们平时对字符进行流操作，如果是音频文件、图片等媒体文件用字节流就好，如果涉及到字符的话使用字符流比较好</p><p>字符流默认采用的是<code>Unicode</code>编码，我们可以通过构造方法自定义编码。</p><p>常用字符编码所占字节数？</p><p><code>utf8</code>：英文占1字节，中文占3字节</p><p><code>unicode</code>：任何字符都占2字节</p><p><code>gbk</code>：英文占1字节，中文占2字节</p><h3 id="Reader（字符输入流）"><a href="#Reader（字符输入流）" class="headerlink" title="Reader（字符输入流）"></a>Reader（字符输入流）</h3><p><code>Reader</code>用于从源头（通常是文件）读取数据（字符信息）到内存中，<code>java.io.Reader</code>抽象类是所有字符输入流的父类</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404221629067.png" alt="image-20240422162943999"> </p><p><code>Reader</code>用于读取文本，<code>InputStream</code>用于读取原始字节</p><p>常用方法</p><ul><li><p><code>read()</code>：从输入流读取一个字符</p></li><li><p><code>read(char[] cbuf)</code>：从输入流中读取一些字符，并将他们存储到字符数组<code>cbuf</code>中，等价于<code>read(cbuf, 0, cbuf.length)</code>，实际上也确实是这么实现的</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">read</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> cbuf<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p><code>read(char[] cbuf, int off, int len)</code>：在<code>read(char[] cbuf)</code>方法的基础上增加了<code>off</code>参数（偏移量）和<code>len</code>参数（要读取的最大字符数）</p></li><li><p><code>skip(long n)</code>：忽略输入流中的n个字符，返回实际忽略的字符数</p></li><li><p><code>close()</code>：关闭输入流并释放相关的系统资源</p></li></ul><p><code>InputStreamReader</code>是字节流转换为字符流的桥梁，其子类<code>FileReader</code>是基于该基础上的封装，可以直接操作字符文件</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 字节流转换为字符流的桥梁</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InputStreamReader</span> <span class="token keyword">extends</span> <span class="token class-name">Reader</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// 用于读取字符文件</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileReader</span> <span class="token keyword">extends</span> <span class="token class-name">InputStreamReader</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p><code>FileReader</code>演示</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileReader</span> fileReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"src/main/input.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> content<span class="token punctuation">;</span>    <span class="token keyword">long</span> skip <span class="token operator">=</span> fileReader<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The actual number of bytes skipped:"</span> <span class="token operator">+</span> skip<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"The content read from file:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>content <span class="token operator">=</span> fileReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>input.txt</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404221704072.png" alt="image-20240422170427027"> </p><p>运行结果</p><pre class="language-plain" data-language="plain"><code class="language-plain">The actual number of bytes skipped:3The content read from file:世界</code></pre><h3 id="Writer（字符输出流）"><a href="#Writer（字符输出流）" class="headerlink" title="Writer（字符输出流）"></a>Writer（字符输出流）</h3><p><code>Writer</code>用于将数据（字符信息）写入到目的地（通常是文件），<code>java.io.Writer</code>抽象类是所有字符输出类的父类</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404221711619.png" alt="image-20240422171115551"> </p><p><code>Writer</code>用于写入文本，<code>OutputStream</code>用于写入原始字节</p><p>常用方法</p><ul><li><code>write(int c)</code>：写入单个字符</li><li><code>write(char cbuf[])</code>：写入字符数组<code>cbuf</code>，等价于<code>write(cbuf, 0, cbuf.length)</code></li><li><code>write(char cbuf[], int off, int len)</code>：在<code>write(char cbuf[])</code>方法的基础上增加了<code>off</code>参数（偏移量）和<code>len</code>参数（要读取的最大字符数）</li><li><code>write(String str)</code>：写入字符串，等价于<code>write(str, 0, str.length())</code></li><li><code>write(str, 0, str.length())</code>：在<code>write(String str)</code>方法的基础上增加了<code>off</code>参数（偏移量）和<code>len</code>参数（要读取的最大字符数）</li><li><code>append(CharSequence csq)</code>：将指定的<strong>字符序列</strong>附加到指定的<code>Writer</code>对象并返回该<code>Writer</code>对象</li><li><code>append(char c)</code>：将指定的<strong>字符</strong>附加到指定的<code>Writer</code>对象并返回该<code>Writer</code>对象</li><li><code>flush()</code>：刷新此输出流并前置写出所有缓冲的输出字符</li><li><code>close()</code>：关闭输出流释放相关的系统资源</li></ul><p><code>OutputStreamWriter</code>是字符流转换为字节流的桥梁，其子类<code>FileWriter</code>是基于该基础上的封装，可以直接将字符写入到文件</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 字符流转换为字节流的桥梁</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OutputStreamWriter</span> <span class="token keyword">extends</span> <span class="token class-name">Writer</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// 用于写入字符到文件</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileWriter</span> <span class="token keyword">extends</span> <span class="token class-name">OutputStreamWriter</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p><code>FileWriter</code>演示</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Writer</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"src/main/output.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Hello 我是Feliks，我会写中文"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>output.txt</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404222117897.png" alt="image-20240422211733835"> </p><h2 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h2><p>IO操作是很消耗性能的，缓冲流将数据加载到缓冲区，一次性读取/写入多个字节，从而避免频繁的IO操作，提高流的传输效率</p><p>字节缓冲流里采用了装饰器模式来增强<code>InputStream</code>和<code>OutputStream</code>子类对象的功能</p><p>例如：通过<code>BufferedInputStream</code>（字节缓冲输入流）来增强<code>FileInputStream</code>的功能</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">BufferedInputStream</span> bufferedInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src/main/input.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> inputString <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bufferedInputStream<span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>inputString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行结果</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404222126773.png" alt="image-20240422212621741"> </p><p>字节流和字节缓冲流的性能差别主要体现在：我们使用两者的时候都是调用<code>write(int b)</code>和<code>read()</code>这两个一次只读取一个字节的方法的时候，由于字节缓冲流内部由缓冲区（字节数组），因此字节缓冲流会先将读取到的字节存放在缓冲区，大幅减少IO次数，提升读取效率</p><p>来用<code>write(int b)</code>和<code>read()</code>方法，分别通过字节流和字节缓冲流复制一份文件看看：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBufferedInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 开始时间</span>    <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">BufferedInputStream</span> bufferedInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src/Linux.pdf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">BufferedOutputStream</span> bufferedOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"src/Linux_1.pdf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> content<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>content <span class="token operator">=</span> bufferedInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            bufferedOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 结束时间</span>    <span class="token keyword">long</span> endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用字节缓冲流复制Linux.pdf所用时间为："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 开始时间</span>    <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src/Linux.pdf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">OutputStream</span> outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"src/Linux_2.pdf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> content<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>content <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 结束时间</span>    <span class="token keyword">long</span> endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用普通字节流复制Linux.pdf所用时间为："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><pre class="language-plain" data-language="plain"><code class="language-plain">使用字节缓冲流复制Linux.pdf所用时间为：11毫秒使用普通字节流复制Linux.pdf所用时间为：672毫秒</code></pre><p>很明显两者耗时非常大</p><p>但是如果是通过<code>read(byte b[])</code>和<code>write(byte b[], int off, int len)</code>这两个写入一个字节数组的方法，只要字节数组的大小合适，两者的性能差距其实不大，基本可以忽略，来看如下测试代码：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBufferedInputStreamByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 开始时间</span>    <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">BufferedInputStream</span> bufferedInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src/Linux.pdf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">BufferedOutputStream</span> bufferedOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"src/Linux_3.pdf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> content<span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>content <span class="token operator">=</span> bufferedInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            bufferedOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 结束时间</span>    <span class="token keyword">long</span> endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用缓冲字节流复制Linux.pdf所用时间为："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFileInputStreamByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 开始时间</span>    <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src/Linux.pdf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">OutputStream</span> outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"src/Linux_4.pdf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> content<span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>content <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 结束时间</span>    <span class="token keyword">long</span> endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用普通字节流复制Linux.pdf所用时间为："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>输出结果：</p><pre class="language-plain" data-language="plain"><code class="language-plain">使用缓冲字节流复制Linux.pdf所用时间为：1毫秒使用普通字节流复制Linux.pdf所用时间为：1毫秒</code></pre><p>两者耗时差别不是很大，但是理论上来说文件再大点的话缓冲流的性能会更好一点</p><h3 id="BufferedInputStream（字节缓冲输入流）"><a href="#BufferedInputStream（字节缓冲输入流）" class="headerlink" title="BufferedInputStream（字节缓冲输入流）"></a>BufferedInputStream（字节缓冲输入流）</h3><p><code>BufferedInputStream</code>从源头（文件）读取数据（字节信息）到内存的过程中不会一个字节一个字节地读取，而是会先将读取到的字节放在缓存区，并从内部缓冲区单独读取字节，这样可以大幅减少IO次数，提高了读取效率</p><p><code>BufferedInputStream</code>内部维护了一个缓冲区，这个缓冲区就是一个字节数组，阅读源码可知：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BufferedInputStream</span> <span class="token keyword">extends</span> <span class="token class-name">FilterInputStream</span> <span class="token punctuation">{</span><span class="token comment">// 缓冲区的默认大小</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_BUFFER_SIZE</span> <span class="token operator">=</span> <span class="token number">8192</span><span class="token punctuation">;</span><span class="token comment">// 内部缓冲区数组</span>    <span class="token keyword">protected</span> <span class="token keyword">volatile</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf<span class="token punctuation">;</span><span class="token comment">// 使用默认的缓冲区大小</span>    <span class="token keyword">public</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> <span class="token constant">DEFAULT_BUFFER_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">// 自定义缓冲区大小</span>    <span class="token keyword">public</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Buffer size &lt;= 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>缓冲区的默认大小为<strong>8192</strong>字节，我们也可通过<code>BufferedInputStream(InputStream in, int size)</code>这个构造方法来指定缓冲区的大小</p><h3 id="BufferedOutputStream（字节缓冲输出流）"><a href="#BufferedOutputStream（字节缓冲输出流）" class="headerlink" title="BufferedOutputStream（字节缓冲输出流）"></a>BufferedOutputStream（字节缓冲输出流）</h3><p><code>BufferedOutputStream</code>将数据（字节信息）写入到目的地（文件）的过程中给不会一个字节一个字节的写入，而是会先将要写入的字节存放在缓存区，并从内部缓冲区中单独写入字节，这样就大幅减少了IO次数，提高了读取效率</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">BufferedInputStream</span> bufferedInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src/Linux.pdf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">BufferedOutputStream</span> bufferedOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"src/Linux_3.pdf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> content<span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>content <span class="token operator">=</span> bufferedInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        bufferedOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>类似于<code>BufferedInputStream</code>，<code>BufferedOutputStream</code>内部也维护了一个缓冲区，而且这个缓冲区的大小也是<strong>8192</strong>字节</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BufferedOutputStream</span> <span class="token keyword">extends</span> <span class="token class-name">FilterOutputStream</span> <span class="token punctuation">{</span><span class="token comment">// 内部缓冲区数组</span>    <span class="token keyword">protected</span> <span class="token keyword">byte</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 设置默认的缓冲区大小</span>    <span class="token keyword">public</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token class-name">OutputStream</span> out<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> <span class="token number">8192</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">// 自定义缓冲区大小</span>    <span class="token keyword">public</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token class-name">OutputStream</span> out<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Buffer size &lt;= 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="字符缓冲流"><a href="#字符缓冲流" class="headerlink" title="字符缓冲流"></a>字符缓冲流</h2><h3 id="BufferedReader（字符缓冲输入流）"><a href="#BufferedReader（字符缓冲输入流）" class="headerlink" title="BufferedReader（字符缓冲输入流）"></a>BufferedReader（字符缓冲输入流）</h3><p><code>BufferedReader</code>（字符缓冲输入流）和<code>BufferWriter</code>（字符缓冲输入流）类似于<code>BufferedInputStream</code>（字节缓冲输入流）和<code>BufferedOutputStream</code>（字节缓冲输出流），内部维护了一个字符数组作为缓冲区，只不过前者是用来操作字符信息</p><p><code>BufferedReader</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BufferedReader</span> <span class="token keyword">extends</span> <span class="token class-name">Reader</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cb<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> defaultCharBufferSize <span class="token operator">=</span> <span class="token number">8192</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token class-name">Reader</span> in<span class="token punctuation">,</span> <span class="token keyword">int</span> sz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sz <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Buffer size &lt;= 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>in <span class="token operator">=</span> in<span class="token punctuation">;</span>        cb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>sz<span class="token punctuation">]</span><span class="token punctuation">;</span>        nextChar <span class="token operator">=</span> nChars <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token class-name">Reader</span> in<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> defaultCharBufferSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="BufferedWriter（字符缓冲输出流）"><a href="#BufferedWriter（字符缓冲输出流）" class="headerlink" title="BufferedWriter（字符缓冲输出流）"></a>BufferedWriter（字符缓冲输出流）</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BufferedWriter</span> <span class="token keyword">extends</span> <span class="token class-name">Writer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">char</span> cb<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> defaultCharBufferSize <span class="token operator">=</span> <span class="token number">8192</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token class-name">Writer</span> out<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> defaultCharBufferSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token class-name">Writer</span> out<span class="token punctuation">,</span> <span class="token keyword">int</span> sz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sz <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Buffer size &lt;= 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>out <span class="token operator">=</span> out<span class="token punctuation">;</span>        cb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>sz<span class="token punctuation">]</span><span class="token punctuation">;</span>        nChars <span class="token operator">=</span> sz<span class="token punctuation">;</span>        nextChar <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h2><p>来看看常用的输出语句</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Hello!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>System.out</code>实际是用于获取一个<code>PrintStream</code>对象，<code>print</code>方法世界调用的是<code>PrintStream</code>对象的<code>write</code>方法</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404222251672.png" alt="image-20240422225103621"> </p><p><code>PrintStream</code>对象属于字节打印流，与之对应的是<code>PrintWriter</code>（字符打印流）</p><p><code>PrintStream</code>是<code>OutputStream</code>的子类,<code>PrintWriter</code>是<code>Writer</code>的子类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrintStream</span> <span class="token keyword">extends</span> <span class="token class-name">FilterOutputStream</span> <span class="token keyword">implements</span> <span class="token class-name">Appendable</span><span class="token punctuation">,</span> <span class="token class-name">Closeable</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrintWriter</span> <span class="token keyword">extends</span> <span class="token class-name">Writer</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h2 id="随机访问流"><a href="#随机访问流" class="headerlink" title="随机访问流"></a>随机访问流</h2><p>随机访问流指的是支持随意跳转到文件的任意位置进行读写的<code>RandomAccessFile</code></p><p><code>RandomAccessFile</code>的构造方法如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">,</span> <span class="token class-name">String</span> mode<span class="token punctuation">)</span>    <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> mode<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">,</span> <span class="token class-name">String</span> mode<span class="token punctuation">,</span> <span class="token keyword">boolean</span> openAndDelete<span class="token punctuation">)</span>    <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span><span class="token punctuation">{</span>    <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token punctuation">(</span>file <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> file<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> imode <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mode<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        imode <span class="token operator">=</span> <span class="token constant">O_RDONLY</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mode<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"rw"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        imode <span class="token operator">=</span> <span class="token constant">O_RDWR</span><span class="token punctuation">;</span>        rw <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mode<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mode<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"rws"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                imode <span class="token operator">|=</span> <span class="token constant">O_SYNC</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mode<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"rwd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                imode <span class="token operator">|=</span> <span class="token constant">O_DSYNC</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                imode <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>openAndDelete<span class="token punctuation">)</span>        imode <span class="token operator">|=</span> <span class="token constant">O_TEMPORARY</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>imode <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal mode \""</span> <span class="token operator">+</span> mode                                           <span class="token operator">+</span> <span class="token string">"\" must be one of "</span>                                           <span class="token operator">+</span> <span class="token string">"\"r\", \"rw\", \"rws\","</span>                                           <span class="token operator">+</span> <span class="token string">" or \"rwd\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"removal"</span><span class="token punctuation">)</span>    <span class="token class-name">SecurityManager</span> security <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>security <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        security<span class="token punctuation">.</span><span class="token function">checkRead</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rw<span class="token punctuation">)</span> <span class="token punctuation">{</span>            security<span class="token punctuation">.</span><span class="token function">checkWrite</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isInvalid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">FileNotFoundException</span><span class="token punctuation">(</span><span class="token string">"Invalid file path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    fd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fd<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    path <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">open</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> imode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">FileCleanable</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// open sets the fd, register the cleanup</span><span class="token punctuation">}</span></code></pre><p>我们可以自己指定<code>mode</code>（读写模式）</p><ul><li><code>r</code>：只读模式</li><li><code>rw</code>：读写模式</li><li><code>rws</code>：相对于<code>rw</code>，<code>rws</code>同步更新对”文件的内容“或”元数据“的修改到外部存储设备</li><li><code>rwd</code>：相对于<code>rw</code>，<code>rwd</code>同步更新对”文件的内容“的修改到外部存储设备</li></ul><p><code>文件内容</code>：文件中实际保存的数据</p><p><code>元数据</code>：用来描述文件属性比如文件的大小信息、创建时间和修改时间</p><p><code>RandomAccessFile</code>中有一个文件指针用来表示下一个将要被写入或读取的字节所处的位置，可以通过里面的<code>seek(long pos)</code>方法来设置文件指针的<code>偏移量</code>（距离文件开头<code>pos</code>个字节处）。如果想要获取文件指针当前的位置，可以使用<code>getFilePointer()</code>方法</p><p>代码演示：</p><p>input.txt</p><pre class="language-plain" data-language="plain"><code class="language-plain">I believe there is a person who brings sunshine into your life.That person may have enough to spread around. But if you reallyhave to wait for someone to bring you the sun and give you agood feeling, then you may have to wait a long time.</code></pre><p>代码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRandomAccessFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">RandomAccessFile</span> randomAccessFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"src/main/input.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"rw"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"读取之前的偏移量："</span> <span class="token operator">+</span> randomAccessFile<span class="token punctuation">.</span><span class="token function">getFilePointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"，读取到的字符："</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> randomAccessFile<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"，读取之后的偏移量："</span> <span class="token operator">+</span> randomAccessFile<span class="token punctuation">.</span><span class="token function">getFilePointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 将当前指针偏移量设为6</span>        randomAccessFile<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"读取之前的偏移量："</span> <span class="token operator">+</span> randomAccessFile<span class="token punctuation">.</span><span class="token function">getFilePointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"，读取到的字符："</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> randomAccessFile<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"，读取之后的偏移量："</span> <span class="token operator">+</span> randomAccessFile<span class="token punctuation">.</span><span class="token function">getFilePointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 从偏移量为7的位置开始往后写入字节数据</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">'('</span><span class="token punctuation">,</span> <span class="token char">'t'</span><span class="token punctuation">,</span> <span class="token char">'e'</span><span class="token punctuation">,</span> <span class="token char">'s'</span><span class="token punctuation">,</span> <span class="token char">'t'</span><span class="token punctuation">,</span> <span class="token char">')'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        randomAccessFile<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 将指针偏移量置回0</span>        randomAccessFile<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"读取之前的偏移量："</span> <span class="token operator">+</span> randomAccessFile<span class="token punctuation">.</span><span class="token function">getFilePointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"，读取到的字符："</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> randomAccessFile<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"，读取之后的偏移量："</span> <span class="token operator">+</span> randomAccessFile<span class="token punctuation">.</span><span class="token function">getFilePointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><pre class="language-java" data-language="java"><code class="language-java">读取之前的偏移量：<span class="token number">0</span>，读取到的字符：<span class="token class-name">I</span>，读取之后的偏移量：<span class="token number">1</span>读取之前的偏移量：<span class="token number">6</span>，读取到的字符：e，读取之后的偏移量：<span class="token number">7</span>读取之前的偏移量：<span class="token number">0</span>，读取到的字符：<span class="token class-name">I</span>，读取之后的偏移量：<span class="token number">1</span></code></pre><p>input.txt</p><pre class="language-plain" data-language="plain"><code class="language-plain">I belie(test)re is a person who brings sunshine into your life.That person may have enough to spread around. But if you reallyhave to wait for someone to bring you the sun and give you agood feeling, then you may have to wait a long time.</code></pre><p>对比前后两份input.txt可知，<code>RandomAccessFile</code>的<code>write</code>方法在写入对象的时候如果对应的位置已经有数据的话，会将其覆盖掉</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">'('</span><span class="token punctuation">,</span> <span class="token char">'t'</span><span class="token punctuation">,</span> <span class="token char">'e'</span><span class="token punctuation">,</span> <span class="token char">'s'</span><span class="token punctuation">,</span> <span class="token char">'t'</span><span class="token punctuation">,</span> <span class="token char">')'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>randomAccessFile<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>RandomAccessFile</code>常见的一个应用就是实现大文件的<strong>断点续传</strong></p><p><code>RandomAccessFile</code>的实现依赖于<code>FileDescriptor</code>（文件描述符）和<code>FileChannel</code>（内存映射文件）</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RandomAccessFile</span> <span class="token keyword">implements</span> <span class="token class-name">DataOutput</span><span class="token punctuation">,</span> <span class="token class-name">DataInput</span><span class="token punctuation">,</span> <span class="token class-name">Closeable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">FileDescriptor</span> fd<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">FileChannel</span> channel<span class="token punctuation">;</span>    <span class="token comment">// ......</span><span class="token punctuation">}</span></code></pre><h2 id="Java-IO-中的设计模式？"><a href="#Java-IO-中的设计模式？" class="headerlink" title="Java IO 中的设计模式？"></a>Java IO 中的设计模式？</h2><h3 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h3><p>可以在不改变原有对象的情况下拓展其功能</p><p>装饰器模式通过组合替代继承来扩展原始类的功能，在一些继承关系比较复杂的场景（例如IO这一场景各种类的继承关系）更加实用</p><p>对于字节流来说，<code>FilterInputStream</code>（对应输入流）和<code>FilterOutputStream</code>（对应输出流）是装饰器模式的核心，分别用于增强<code>InputStream</code>和<code>OutputStream</code>子类对象的功能</p><p><code>BufferedInputStream</code>（字节缓冲输入流）、<code>DataInputStream</code>等等都是<code>FilterInputStream</code>的子类</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404230917379.png" alt="image-20240423091727335"> </p><p><code>BufferedOutputStream</code>（字节缓冲输出流）、<code>DataOutputStream</code>等等都是<code>FilterOutputStream</code>的子类</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404230917853.png" alt="image-20240423091754827"> </p><p>通过<code>BufferedInputStream</code>（字节缓冲输入流）来增强<code>FileInputStream</code>的功能。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> <span class="token constant">DEFAULT_BUFFER_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Buffer size &lt;= 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>可以看到上面<code>BufferedInputStream</code>的构造器中的参数就是<code>InputStream</code></p><p><code>BufferedInputStream</code>演示：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBufferedInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">BufferedInputStream</span> bufferedInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"/src/main/input.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> content<span class="token punctuation">;</span>        bufferedInputStream<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>content <span class="token operator">=</span> bufferedInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>为什么不写一个<code>BufferedFileInputStream</code>？</p><p>你可以想一下<code>InputStream</code>的子类有多少个，如果分别都为他们写一个缓冲流，工程量该有多大，而且<code>InputStream</code>里的继承关系太复杂了，如果都这样去定制一个对应的缓冲输入流，实在是太麻烦了</p><p><code>ZipInputStream</code>和<code>ZipOutputStream</code>都可以分别对<code>BufferedInputStream</code>和<code>BufferedOutputStream</code>进行增强</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ZipInputStream</span> zipInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"/src/main/input.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ZipOutputStream</span> zipOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"src/main/output.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>看一下他们里面的代码就可以知道<code>ZipInputStream</code>和<code>ZipOutputStream</code>分别继承自<code>InflaterInputStream</code>和<code>DeflaterOutputStream</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InflaterInputStream</span> <span class="token keyword">extends</span> <span class="token class-name">FilterInputStream</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeflaterOutputStream</span> <span class="token keyword">extends</span> <span class="token class-name">FilterOutputStream</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>这也是装饰器模式中很重要的一个特性，可以对原始类嵌套使用多个装饰器</p><p>为了实现这一效果，装饰器类需要跟原始类继承相同的抽象类或者实现相同的接口，上面所看到的这些IO相关的装饰类其共同父类是<code>InputStream</code>和<code>OutputStream</code></p><p>对于字符流来说：</p><p><code>BufferedReader</code>可以用来增强<code>Reader</code>（字符输入流）子类的功能</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"/src/main/input.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>BufferedWriter</code>可以用来增强<code>Writer</code>（字符输出流）子类的功能</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"/src/main/output.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>对于IO流中的装饰器模式应用的例子没有必要特意地去记忆，搞清楚装饰器模式的核心后我们在使用的时候自然就会知道哪些地方用到了装饰器模式了</p><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><p>主要用于接口互不兼容的类的协调工作</p><p>该模式中存在被适配的对象或类称为<strong>适配者（Adaptee）</strong>，作用于适配者的对象或者类称为<strong>适配器（Adapter）</strong></p><p><code>适配器（Adapter）</code></p><ul><li>对象适配器：使用组合关系来实现</li><li>类适配器：使用继承关系来实现</li></ul><p>IO流中的字符流和字节流的接口不同，他们之间可以协调工作就是基于对象适配器来做的，通过适配器可以将字节流对象适配成一个字符流对象，这样我们可以通过字节流对象来读取或者写入字符数据</p><p><code>InputStreamReader</code>和<code>OutputStreamWriter</code>就是两个适配器，同时也是字节流和字符流之间的桥梁</p><p><code>InputStreamReader</code>内部使用了<code>StreamDecoder</code>流解码器对字节进行编码，实现<strong>字节流到字符流的转换</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404231029334.png" alt="image-20240423102942273"> </p><p><code>OutputStreamWriter</code>内部使用了<code>StreamEncoder</code>流编码器对字符进行编码，实现<strong>字符流到字节流的转换</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404231030354.png" alt="image-20240423103059321"> </p><p><code>InputStream</code>和<code>OutputStream</code>的子类是被适配者，<code>InputStreamReader</code>和<code>OutputStreamWriter</code>是适配器</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// BufferedReader增强InputStreamReader的功能（装饰器模式），InputStreamReader是适配器，FileInputStream是被适配的类</span><span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"/src/main/input.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>InputStreamReader</code>部分源码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InputStreamReader</span> <span class="token keyword">extends</span> <span class="token class-name">Reader</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">StreamDecoder</span> sd<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        sd <span class="token operator">=</span> <span class="token class-name">StreamDecoder</span><span class="token punctuation">.</span><span class="token function">forInputStreamReader</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span>                <span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ## check lock object</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sd<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>OutputStreamWriter</code>部分源码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OutputStreamWriter</span> <span class="token keyword">extends</span> <span class="token class-name">Writer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">StreamEncoder</span> se<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token class-name">OutputStream</span> out<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>        se <span class="token operator">=</span> <span class="token class-name">StreamEncoder</span><span class="token punctuation">.</span><span class="token function">forOutputStreamWriter</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span>                <span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        se<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="适配器模式和装饰器模式的区别？"><a href="#适配器模式和装饰器模式的区别？" class="headerlink" title="适配器模式和装饰器模式的区别？"></a>适配器模式和装饰器模式的区别？</h3><p><strong>装饰器模式</strong></p><p>更侧重于动态地增强原始类的功能，装饰器类需要跟原始类继承相同的抽象类或者实现相同的接口，并且装饰器模式支持对原始类嵌套使用多个装饰器</p><p><strong>适配器模式</strong></p><p>更侧重于让接口不兼容而不能交互的类可以一起工作，当我们调用适配器对应的方法时，适配器内部会调用适配者类或者和适配类相关的类的方法。</p><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>工厂模式用于创建对象，NIO中大量用到了工厂模式，比如：</p><p><code>Files</code>类中的<code>newInputStream</code>方法创建<code>InputStream</code>对象（静态工厂）<code>Paths</code>类的<code>get</code>方法创建<code>Path</code>对象（静态工厂）</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">newInputStream</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"src/main/input.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>还有<code>ZipFileSystem</code>类（<code>sun.nio</code>包下的类，属于<code>java.nio</code>相关的一些内部实现）的<code>getPath</code>的方法创建<code>Path</code>对象(简单工厂)</p><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>NIO中的文件目录监听服务使用到了观察者模式</p><p>NIO中的文件目录监听服务基于<code>WatchService</code>接口和<code>Watchable</code>接口，<code>WatchService</code>属于观察者，<code>Watchable</code>属于被观察者</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">WatchService</span> <span class="token keyword">extends</span> <span class="token class-name">Closeable</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Watchable</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p><code>Watchable</code>接口定义了一个用于将对象注册到<code>WatchService</code>（监听服务）并绑定监听事件的方法<code>register</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Watchable</span> <span class="token punctuation">{</span>    <span class="token class-name">WatchKey</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">WatchService</span> watcher<span class="token punctuation">,</span>                      <span class="token class-name">WatchEvent<span class="token punctuation">.</span>Kind</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> events<span class="token punctuation">,</span>                      <span class="token class-name">WatchEvent<span class="token punctuation">.</span>Modifier</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> modifiers<span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>    <span class="token class-name">WatchKey</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">WatchService</span> watcher<span class="token punctuation">,</span> <span class="token class-name">WatchEvent<span class="token punctuation">.</span>Kind</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> events<span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>WatchService</code>同于监听文件目录的变化，同一个<code>WatchSerivce</code>对象能够监听多个文件目录</p><p><code>Path</code>类<code>register</code>方法的第二个参数<code>events</code>（需要监听的事件），是一个可变长参数，即可以同时监听多个事件</p><ul><li><code>StandardWatchEventKinds.ENTRY_CREATE</code>：文件创建</li><li><code>StandardWatchEventKinds.ENTRY_DELETE</code>：文件删除</li><li><code>StandardWatchEventKinds.ENTRY_MODIFY</code>：文件修改</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testWatchService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token comment">// 创建一个WatchService对象</span>    <span class="token class-name">WatchService</span> watchService <span class="token operator">=</span> <span class="token class-name">FileSystems</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newWatchService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 初始化一个被监控文件夹的Path类</span>    <span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"src/main"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将这个path对象注册到WatchService中</span>    <span class="token class-name">WatchKey</span> watchKey <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>watchService<span class="token punctuation">,</span> <span class="token class-name">StandardWatchEventKinds</span><span class="token punctuation">.</span><span class="token constant">ENTRY_CREATE</span><span class="token punctuation">,</span> <span class="token class-name">StandardWatchEventKinds</span><span class="token punctuation">.</span><span class="token constant">ENTRY_MODIFY</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>register</code>方法返回<code>WatchKey</code>对象，通过该对象可以获取事件的具体信息，比如文件目录下是创建、删除还是修改了文件，以及创建、删除或者修改的文件具体名称是什么</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testWatchService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token comment">// 创建一个WatchService对象</span>    <span class="token class-name">WatchService</span> watchService <span class="token operator">=</span> <span class="token class-name">FileSystems</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newWatchService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 初始化一个被监控文件夹的Path类</span>    <span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"src/main"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将这个path对象注册到WatchService中</span>    <span class="token class-name">WatchKey</span> watchKey <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>watchService<span class="token punctuation">,</span> <span class="token class-name">StandardWatchEventKinds</span><span class="token punctuation">.</span><span class="token constant">ENTRY_CREATE</span><span class="token punctuation">,</span> <span class="token class-name">StandardWatchEventKinds</span><span class="token punctuation">.</span><span class="token constant">ENTRY_MODIFY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>watchKey <span class="token operator">=</span> watchService<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">WatchEvent</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> event <span class="token operator">:</span> watchKey<span class="token punctuation">.</span><span class="token function">pollEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 调用WatchEvent对象的方法做一些事情，比如输出事件的具体上下文信息</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        watchKey<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础2.0</title>
      <link href="/2024/04/17/java-ji-chu-2.0/"/>
      <url>/2024/04/17/java-ji-chu-2.0/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象基础"><a href="#面向对象基础" class="headerlink" title="面向对象基础"></a>面向对象基础</h1><h2 id="对象实体与对象引用有什么不同？"><a href="#对象实体与对象引用有什么不同？" class="headerlink" title="对象实体与对象引用有什么不同？"></a>对象实体与对象引用有什么不同？</h2><p><code>new</code>创建的对象实例会保存在堆内存中，对象引用指向对象实例（对象引用存放在栈内存中）</p><ul><li>一个对象引用可以指向0个或1个对象</li><li>一个对象可以有n个引用指向它</li></ul><h2 id="对象的相等和引用相等的区别"><a href="#对象的相等和引用相等的区别" class="headerlink" title="对象的相等和引用相等的区别"></a>对象的相等和引用相等的区别</h2><ul><li>对象的相等一般比较的是<code>内存中存放的内容</code>是否相等</li><li>引用相等一般比较的是他们指向的<code>内存地址</code>是否相等</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token comment">// 使用==比较字符串的引用相等（字符串使用==比较的是地址，要比较值得用equals方法）</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token comment">// 使用equals比较字符串内容的相等</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></code></pre><h2 id="一个类没有声明构造器，该程序能正常执行吗？"><a href="#一个类没有声明构造器，该程序能正常执行吗？" class="headerlink" title="一个类没有声明构造器，该程序能正常执行吗？"></a>一个类没有声明构造器，该程序能正常执行吗？</h2><p>可以执行，因为即使不声明也会默认带有无参构造器，但是！如果我们重载了有参构造器，那么无论我们是否用到无参构造器都必须将其在类里显式的写出来。</p><h2 id="构造器的特点？是否能被重写（override）？"><a href="#构造器的特点？是否能被重写（override）？" class="headerlink" title="构造器的特点？是否能被重写（override）？"></a>构造器的特点？是否能被重写（override）？</h2><ol><li>名字与类名相同</li><li>无返回值，但是不能使用void来声明构造器</li><li>生成类的对象时会自动执行，不需要调用</li></ol><p>构造器不能被override，但是能被overload（重载），类中可以有多个构造器。</p><h2 id="面向对象三大特征？"><a href="#面向对象三大特征？" class="headerlink" title="面向对象三大特征？"></a>面向对象三大特征？</h2><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>把对象的属性隐藏在对象内部（<code>private</code>），不允许外部对象直接访问对象的内部信息，但是可以通过提供一些可被外界调用的方法来操作属性。</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ol><li>子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类无法访问，只是<strong>拥有</strong></li><li>子类可以拥有自己的属性和方法，即：<strong>子类可以对父类进行扩展</strong></li><li>子类可以自己的方式实现父类的方法</li></ol><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><ol><li>对象类型和引用类型之间具有继承（类）/实现（接口）的关系</li><li>引用类型变量发出的方法调用到底是哪个类中的方法，必须在程序运行期间才能确定</li><li>多态不能调用只在子类存在但在父类不存在的方法</li><li>如果子类重写了父类的方法，真正执行的是子类覆盖的方法，如果子类没有覆盖父类的方法，执行的是父类的方法</li></ol><h2 id="接口和抽象类的共同点？区别？"><a href="#接口和抽象类的共同点？区别？" class="headerlink" title="接口和抽象类的共同点？区别？"></a>接口和抽象类的共同点？区别？</h2><p><strong>共同点</strong></p><ol><li>都不能被实例化</li><li>都可以包含抽象方法</li><li>都可以有默认实现的方法（在<code>Java8</code>可以使用<code>default</code>关键字在接口中定义默认方法）</li></ol><p><strong>区别</strong></p><ol><li>接口主要用于对类的行为进行约束，当我们实现了某个接口就具有了对应的行为。抽象类主要用于代码复用，强调的是所属关系</li><li>一个类只能继承一个类，但是一个类可以实现多个接口</li><li>接口中的成员变量只能是<code>public static final</code>类型的，不能被修改且必须有初始值。抽象类的成员变量默认是<code>default</code>，可在子类中被重新定义，也可被重新赋值</li></ol><h2 id="深拷贝和浅拷贝的区别？什么是引用拷贝？"><a href="#深拷贝和浅拷贝的区别？什么是引用拷贝？" class="headerlink" title="深拷贝和浅拷贝的区别？什么是引用拷贝？"></a>深拷贝和浅拷贝的区别？什么是引用拷贝？</h2><ul><li><strong>浅拷贝</strong>：浅拷贝会在堆上创建一个新对象（区别于引用拷贝的一点），但是如果原对象内部的属性是引用类型的话，浅拷贝会直接复制内部对象的引用地址，即<strong>拷贝对象和原对象共用同一个内部对象</strong></li><li><strong>深拷贝</strong>：深拷贝会完全复制整个对象，包括该对象所包含的内部对象</li></ul><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p>Address</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Address</span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AssertionError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Person</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Address</span> address<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">Address</span> address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> person<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AssertionError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Address</span> <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span>        <span class="token class-name">Person</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token string">"广州"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> person1Clone <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> person1<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> person1Clone<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>person1Clone</code>和<code>person1</code>使用的是同一个<code>Address</code>对象</p><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p>Address</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Address</span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AssertionError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Person</p><p>修改了<code>Person</code>类的<code>clone</code>方法，在复制的时候连带着要把<code>Person</code>对象内部的<code>Address</code>对象一起复制</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Address</span> address<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">Address</span> address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            person<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Address</span><span class="token punctuation">)</span> person<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> person<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AssertionError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token class-name">Address</span> address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Address</span> <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试</p><p>因为我们修改了<code>Person</code>的<code>clone</code>方法，使得其内部的<code>Address</code>对象在复制的时候不再是复制<code>Address</code>对象的引用地址，而是复制整个对象，所以<code>person1</code>的<code>Address</code>和<code>person1Clone</code>的<code>Address</code>地址不一致</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span>        <span class="token class-name">Person</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token string">"广州"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> person1Clone <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> person1<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> person1Clone<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="引用拷贝"><a href="#引用拷贝" class="headerlink" title="引用拷贝"></a>引用拷贝</h3><p>两个不同的引用指向同一个对象，浅拷贝会在堆上创建一个对象，引用拷贝则不会，引用拷贝的拷贝对象和原对象地址一致，共用同一个对象</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404172240146.png" alt="image-20240417224036088"> </p><h1 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h1><h2 id="Object常见方法"><a href="#Object常见方法" class="headerlink" title="Object常见方法"></a>Object常见方法</h2><p>11种</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * native方法，用于返回房前运行时对象的Class对象，使用了final关键字修饰，所以不允许子类重写 * * @return */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * native方法，用于返回对象的哈希码，主要是用在哈希表中，比如JDK中的HashMap * * @return */</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 用于比较两个对象的内存地址是否相等，String类对该方法进行了重写，以用于比较字符串的值是否相等 * * @param obj * @return */</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * native方法，用于创建并返回当前对象的一份拷贝 * * @return * @throws CloneNotSupportedException */</span><span class="token keyword">protected</span> <span class="token keyword">native</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span><span class="token punctuation">;</span><span class="token comment">/** * 返回类的名字实例的哈希码的16进制的字符串，建议Object所有的子类都重写这个方法 * * @return */</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"@"</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * native方法，并且不能重写（被final修饰），唤醒一个在此对象监视器上等待的线程（监视器相当于锁的概念） * 如果有多个线程在等待只会任意唤醒一个 */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * native方法，并且不能重写，跟notify一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程， * 而不是一个线程 */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * native方法，并且不能重写，暂停线程的执行，注：sleep方法没有释放锁，而wait方法释放了锁， * timeout是等待时间 * * @param timeout * @throws InterruptedException */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span><span class="token comment">/** * 多了nanos参数，这个参数表示额外时间（以纳秒为单位，范围是0-999999），所以超时的时间还需要加上nanos纳秒 * * @param timeout * @param nanos * @throws InterruptedException */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token keyword">int</span> nanos<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"timeout value is negative"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nanos <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> nanos <span class="token operator">&gt;</span> <span class="token number">999999</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>                <span class="token string">"nanosecond timeout value out of range"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nanos <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        timeout<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">wait</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 和上面的两个wait方法一样，只不过该方法一直等待，没有超时概念 * * @throws InterruptedException */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 实例被垃圾回收器（gc）回收的时候触发的操作 * * @throws Throwable */</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h2 id="equals"><a href="#equals" class="headerlink" title="equals()"></a>equals()</h2><p><strong><code>equals()</code></strong> 不能用于判断基本数据类型的变量，只能用来判断两个对象是否相等。<code>equals()</code>方法存在于<code>Object</code>类中，而<code>Object</code>类是所有类的直接或间接父类，因此所有的类都有<code>equals()</code>方法。</p><p><code>Object</code> 类 <code>equals()</code> 方法：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>equals()</code> 方法存在两种使用情况：</p><ul><li><strong>类没有重写 <code>equals()</code>方法</strong>：通过<code>equals()</code>比较该类的两个对象时，等价于通过“==”比较这两个对象，使用的默认是 <code>Object</code>类<code>equals()</code>方法。</li><li><strong>类重写了 <code>equals()</code>方法</strong>：一般我们都重写 <code>equals()</code>方法来比较两个对象中的属性是否相等；若它们的属性相等，则返回 true(即，认为这两个对象相等)。</li></ul><p><code>String</code>类的<code>equals()</code>是被重写过的</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> anObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> anObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>anObject <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> anotherString <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>anObject<span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> v1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">char</span> v2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>v1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> v2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="hashCode-有什么用？"><a href="#hashCode-有什么用？" class="headerlink" title="hashCode()有什么用？"></a>hashCode()有什么用？</h2><p>作用：获取哈希码（<code>int</code>整数），也称为散列码，确定该对象在哈希表中的索引位置</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404172313193.png" alt="image-20240417231348170"> </p><p><code>hashCode()</code>定义在<code>Object</code>类中，即Java中所有的类都包含这个函数</p><p><code>hashCode()</code>这个方法在<code>Object</code>类中被native关键字修饰，说明他是一个本地方法，也就是用C语言或C++实现的</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * native方法，用于返回对象的哈希码，主要是用在哈希表中，比如JDK中的HashMap * * @return */</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>散列表存储的是键值对（key-value），特点是能根据<code>key</code>快速找到对应的<code>value</code>，而这其中就用到了散列码</p><h2 id="为什么要有hashCode-？"><a href="#为什么要有hashCode-？" class="headerlink" title="为什么要有hashCode()？"></a>为什么要有hashCode()？</h2><p>摘自《Head First Java》</p><blockquote><p>  当你把对象加入 <code>HashSet</code> 时，<code>HashSet</code> 会先计算对象的 <code>hashCode</code> 值来判断对象加入的位置，同时也会与其他已经加入的对象的 <code>hashCode</code> 值作比较，如果没有相符的 <code>hashCode</code>，<code>HashSet</code> 会假设对象没有重复出现。</p><p>  但是如果发现有相同 <code>hashCode</code> 值的对象，这时会调用 <code>equals()</code> 方法来检查 <code>hashCode</code> 相等的对象是否真的相同。</p><p>  如果两者相同，<code>HashSet</code> 就不会让其加入操作成功。</p><p>  如果不同的话，就会重新散列到其他位置。这样我们就大大减少了 <code>equals</code> 的次数，相应就大大提高了执行速度。</p></blockquote><p>其实<code>hashCode()</code>和<code>equals()</code>都是用于比较两个对象是否相等的</p><p><strong>为什么JDK要同时提供他们两个？</strong></p><p>效率问题。</p><p>在一些容器比如<code>HashMap</code>、<code>HashSet</code>中，有了<code>hashCode()</code>之后，判断元素是否在对应容器中效率会更高</p><p>如果<code>HashSet</code>在对比的时候，同样的<code>hashCode</code>有多个对象，他才会继续使用<code>equals()</code>来判断内容是否真的相同，即<code>hashCode</code>帮助我们大大缩小了查找重复对象的成本</p><p><strong>为什么不只提供hashCode()？</strong></p><p>因为<code>hashCode</code>值相等并不代表两个对象就相等，<code>hashCode()</code>所使用的哈希算法也许刚好会让多个对象传回相同的哈希值，越糟糕的哈希算法越容易发生这种碰撞，但这也与数据值域分布的特性有关（所谓的<code>哈希碰撞</code>也就是指的不同的对象得到相同的<code>hashCode</code>）</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>若两个对象的<code>hashCode</code>值相等，那这两个对象不一定相等（哈希碰撞）</li><li>若两个对象的<code>hashCode</code>值相等并且<code>equals()</code>判断也为<code>true</code>，那才认为两个对象相等</li><li>若两个对象的<code>hashCode</code>值不相等，则可以直接认为两个对象不相等</li></ul><h2 id="为什么重写equals-时必须重写hashCode-方法"><a href="#为什么重写equals-时必须重写hashCode-方法" class="headerlink" title="为什么重写equals()时必须重写hashCode()方法"></a>为什么重写equals()时必须重写hashCode()方法</h2><p>因为在使用<code>equals()</code>去判断两个对象相等时，他们的<code>hashCode</code>也必须要相等，如果不重写<code>equals()</code>就会导致其判断是两个相等的对象但是<code>hashCode</code>值却不相等</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ul><li><code>equals</code>方法判断两个对象是相等的，那这两个对象的<code>hashCode</code>值也要相等</li><li>两个对象有着相同的<code>hashCode</code>值，他们也不一定是相等的（哈希碰撞）</li></ul><h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><h2 id="StringBuffer和StringBuilder的区别？"><a href="#StringBuffer和StringBuilder的区别？" class="headerlink" title="StringBuffer和StringBuilder的区别？"></a>StringBuffer和StringBuilder的区别？</h2><ul><li><p><strong>可变性</strong></p><ul><li><p><code>String</code>是不可变的</p></li><li><p><code>StringBuffer</code>与<code>StringBuilder</code>都继承自<code>AbstractStringBuilder</code>类，在<code>AbstractStringBuilder</code>类中也是使用字符数组保存字符串，不过没有使用<code>final</code>和<code>private</code>关键字修饰，最关键的是这个类还提供了很多修改字符串的方法比如<code>append</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// StringBuilder类</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">StringBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractStringBuilder</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">,</span> <span class="token class-name">CharSequence</span>    <span class="token comment">// StringBuffer类</span> <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">StringBuffer</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractStringBuilder</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">,</span> <span class="token class-name">CharSequence</span></code></pre><p>AbstractStringBuilder</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractStringBuilder</span> <span class="token keyword">implements</span> <span class="token class-name">Appendable</span><span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * The value is used for character storage.     */</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value<span class="token punctuation">;</span>    <span class="token comment">/**     * The count is the number of characters used.     */</span>    <span class="token keyword">int</span> count<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">AbstractStringBuilder</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token function">appendNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>count <span class="token operator">+</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        str<span class="token punctuation">.</span><span class="token function">getChars</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> value<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>        count <span class="token operator">+=</span> len<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// ......</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p><strong>线程安全性</strong></p><ul><li><p><code>String</code>中的对象是不可变的，即可理解为常量，线程安全，<code>AbstractStringBuilder</code>是<code>StringBuilder</code>与<code>StringBuffer</code>的公共父类，定义类一些字符串的基本操作，例如<code>expandCapacity</code>、<code>append</code>、<code>insert</code>、<code>indexOf</code>等公共方法。</p></li><li><p><code>StringBuffer</code>对方法加了同步锁或者对调用的方法加了同步锁，所以是<strong>线程安全</strong>的</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">StringBuffer</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    toStringCache <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p><code>StringBuilder</code>并没有对方法进行加同步锁，所以是<strong>非线程安全</strong>的</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">StringBuilder</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p><strong>性能</strong></p><ul><li>每次对<code>String</code>类型进行改变的时候，都会生成一个新的<code>String</code>对象，然后指针指向新的<code>String</code>对象。</li><li><code>StringBuffer</code>每次都会对<code>StringBuffer</code>本身进行操作，而不是生成新的对象并改变对象引用</li><li>相同的情况下使用<code>StringBuilder</code>相比使用<code>StringBuffer</code>仅能获得10% ~ 15%左右的性能提升，但是却要冒线程不安全的风险</li></ul></li></ul><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><ul><li>操作少量数据：<code>String</code>类</li><li>单线程操作字符串缓冲区下大量数据操作：<code>StringBuilder</code>类</li><li>多线程操作字符串缓冲区下大量数据操作：<code>StringBuffer</code>类</li></ul><h2 id="String为什么是不可变的？"><a href="#String为什么是不可变的？" class="headerlink" title="String为什么是不可变的？"></a>String为什么是不可变的？</h2><p>我们来看看<code>String</code>类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">String</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span><span class="token punctuation">,</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> <span class="token punctuation">{</span>    <span class="token comment">/** The value is used for character storage. */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// ......</span><span class="token punctuation">}</span></code></pre><blockquote><p>  看到了吗，<code>String</code>类被<code>final</code>关键字修饰，而被<code>final</code>关键字修饰的类不能被继承，修饰的方法不能被重写，修饰的变量是<strong>基本数据类型</strong>则<strong>值不能改变</strong>，修饰的变量是<strong>引用类型</strong>则<strong>不能再指向其他对象</strong>。因此，<code>final</code>关键字修饰的数组保存字符串并不是<code>String</code>不可变的根本原因，因为这个数组保存的字符串是可变的（引用类型变量的情况）</p><p>  根本原因：</p><ol><li><p>保存字符串的数组被<code>final</code>修饰且为<code>private</code>，并且<code>String</code>类并没有提供/暴露修改这个字符串的方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre></li><li><p><code>String</code>类被<code>final</code>修饰导致其不能被继承，进而避免了子类破坏<code>String</code>不可变</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">String</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span><span class="token punctuation">,</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> <span class="token punctuation">{</span></code></pre></li></ol><p>  扩展：<strong>如果<code>String</code>可变会导致什么样的结果？</strong></p><p>  用<code>HashSet</code>做示例，其内的元素是<code>StringBuilder</code></p>  <pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StringBuilder</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">StringBuilder</span> stringBuilder1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">StringBuilder</span> stringBuilder2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"aaabbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stringBuilder1<span class="token punctuation">)</span><span class="token punctuation">;</span>    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stringBuilder2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [aaabbb, aaa]</span>    <span class="token class-name">StringBuilder</span> stringBuilder3 <span class="token operator">=</span> stringBuilder1<span class="token punctuation">;</span>    stringBuilder3<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [aaabbb, aaabbb]</span><span class="token punctuation">}</span></code></pre><p>  <code>StringBuilder</code>型变量<code>stringBuilder1</code>和<code>stringBuilder2</code>分别指向了堆内的字面量”aaa”和”aaabbb”，把他们都插入到<code>HashSet</code>中，但是我们后面定义了一个<code>stringBuilder3</code>指向<code>stringBuilder1</code>的地址，再改变<code>stringBuilder3</code>的值，因为<code>StringBuilder</code>并不具备不可变性的保护，这就导致了<code>stringBuilder3</code>直接在原来的<code>stringBuilder1</code>地址上修改导致<code>stringBuilder1</code>的值也变了，此时<code>HashSet</code>里面竟然会有两个一样的键值，<strong>破坏了HashSet键值的唯一性，所以千万千万不要用可变类型做HashMap和HashSet键值</strong></p><p>  补充：在Java9之后，<code>String</code>、<code>StringBuilder</code>、<code>StringBuffer</code>的实现改用为<code>byte</code>数组</p>  <pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">String</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span><span class="token punctuation">,</span><span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> <span class="token punctuation">{</span>    <span class="token comment">// @Stable 注解表示变量最多被修改一次，称为“稳定的”。</span>    <span class="token annotation punctuation">@Stable</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractStringBuilder</span> <span class="token keyword">implements</span> <span class="token class-name">Appendable</span><span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> <span class="token punctuation">{</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>  提问：<strong>为什么Java9的<code>String</code>底层要把<code>char[]</code>改为<code>byte[]</code>？</strong></p><p>  新版的<code>String</code>其实支持两个编码方案：<code>Latin-1</code> 和 <code>UTF-16</code>，如果字符串中包含的汉字没有超过<code>Latin-1</code>可表示范围内的字符，那就会使用<code>Latin-1</code>作为编码方案，在该编码方案下，<code>byte</code>占一个字节（8位）<code>char</code>占两个字节（16位），<code>byte</code>相比<code>char</code>节省一般的内存空间</p><p>  如果字符串中包含的汉字超过<code>Latin-1</code>可表示范围内的字符，那么<code>byte</code>和<code>char</code>占用的内存空间是一致的</p></blockquote><h2 id="字符串拼接用“-”还是用StringBuilder？"><a href="#字符串拼接用“-”还是用StringBuilder？" class="headerlink" title="字符串拼接用“+”还是用StringBuilder？"></a>字符串拼接用“+”还是用StringBuilder？</h2><p>Java语言本身不支持运算符重载，“+”与“+=”是专门为<code>String</code>类重载过的运算符，也是Java中仅有的两个重载过的运算符</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"he"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">"llo"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token string">"world"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> str4 <span class="token operator">=</span> str1 <span class="token operator">+</span> str2 <span class="token operator">+</span> str3<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>来看看它的字节码文件</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404180952198.png" alt="image-20240418095238037"> </p><p>可以看出字符串对象通过“+”的字符串拼接方式，实际上是通过<code>StringBuilder``调用append()</code>方法实现的，拼接完成后调用<code>StringBuilder</code>里的<code>toString()</code>得到一个<code>String</code>对象</p><p>在循环里使用“+”进行拼接会发生什么？</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"he"</span><span class="token punctuation">,</span> <span class="token string">"llo"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        str <span class="token operator">+=</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>查看字节码我们可以得知，使用“+”的方式拼接字符串，他会在循环内部不断创建<code>StringBuilder</code>对象</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404181014642.png" alt="image-20240418101418543"> </p><p>直接使用<code>StringBuilder</code>对象去拼接字符串就不会存在这个问题了</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"he"</span><span class="token punctuation">,</span> <span class="token string">"llo"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">StringBuilder</span> stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404181019379.png" alt="image-20240418101922343"> </p><h2 id="String-equals-和-Object-equals-的区别？"><a href="#String-equals-和-Object-equals-的区别？" class="headerlink" title="String.equals() 和 Object.equals()的区别？"></a>String.equals() 和 Object.equals()的区别？</h2><p><code>String.equals()</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> anObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> anObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>anObject <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> anotherString <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>anObject<span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> v1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">char</span> v2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>v1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> v2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>Object.equals()</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>String</code>中的<code>equals</code>方法是被重写过的，用来比较字符串的值是否相等，而<code>Object</code>中的<code>equals</code>方法比较的是对象的内存地址。</p><h2 id="字符串常量池的作用？"><a href="#字符串常量池的作用？" class="headerlink" title="字符串常量池的作用？"></a>字符串常量池的作用？</h2><p><strong>为了避免字符串的重复创建</strong></p><p><strong>字符串常量池</strong>是JVM为了提升性能和减少内存针对字符串（<code>String</code>类）专门开辟的一块区域</p><p>我们来看看以下两个字符串的地址</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 在堆中创建字符串对象"ab"</span>    <span class="token comment">// 将字符产对象"ab"的引用保存在字符串常量池中</span><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"ab"</span><span class="token punctuation">;</span>    <span class="token comment">// 直接返回字符串常量池中字符串对象"ab"的引用</span>    <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">"ab"</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str1: "</span> <span class="token operator">+</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"@"</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str2: "</span> <span class="token operator">+</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"@"</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404181029255.png" alt="image-20240418102911227"> </p><p>可以看到<code>str1</code>和<code>str2</code>的地址是完全一致的</p><h2 id="String-str1-new-String-“abc”-这段代码创建了几个字符串对象？"><a href="#String-str1-new-String-“abc”-这段代码创建了几个字符串对象？" class="headerlink" title="String str1 = new String(“abc”);这段代码创建了几个字符串对象？"></a>String str1 = new String(“abc”);这段代码创建了几个字符串对象？</h2><p>会创建 1 或 2 个字符串对象</p><ol><li><p>如果字符串常量池中不存在字符串对象”abc”的引用，那么他会在堆上创建两个字符串对象，其中一个字符串对象的引用会被保存在字符串常量池中</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404181040609.png" alt="image-20240418104022575"> </p><p><code>LDC</code>：用于判断字符串常量池中是否保存了对应的字符串对象的引用，如果保存了的话就直接返回，如果没有就会在堆中创建对应的字符串对象并将该字符串对象的引用保存到字符串常量中</p></li><li><p>如果字符串常量池中有”abc”的引用，则只会在堆中创建一个字符串对象”abc”</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> string <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404181053155.png" alt="image-20240418105312116"><br>下面的<code>LDC</code>命令不会在堆中创建新的字符串对象”abc”，这是因为在上面已经执行了一次<code>LDC</code>命令，已经在堆中创建过一次字符串对象”abc”了，所以会直接返回字符串常量池中字符串对象”abc”的引用</p></li></ol><h2 id="String-intern-的作用？"><a href="#String-intern-的作用？" class="headerlink" title="String.intern()的作用？"></a>String.intern()的作用？</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token class-name">String</span> <span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>String.intern()</code>是一个被<code>native</code>修饰的方法，作用是将指定的字符串对象的引用保存在字符串常量池中</p><ul><li><p>如果字符串常量池中保存了对应的字符串对象的引用，则直接返回该引用</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"Java"</span><span class="token punctuation">;</span><span class="token class-name">String</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s1: "</span> <span class="token operator">+</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"@"</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s2: "</span> <span class="token operator">+</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"@"</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404181107938.png" alt="image-20240418110746900"> </p><p><strong>s2返回了s1在字符串常量池保存的对应的字符串对象的引用，所以二者地址一致</strong></p></li><li><p>如果字符串常量池中没有保存对应的字符串对象的引用，则会在常量池中创建一个指向该字符串对象的引用并返回</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 会在堆中在单独创建一个字符串对象</span><span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 直接返回字符串常量池中字符串对象"Java"对应的引用</span><span class="token class-name">String</span> s4 <span class="token operator">=</span> s3<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s3: "</span> <span class="token operator">+</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"@"</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s4: "</span> <span class="token operator">+</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"@"</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404181113615.png" alt="image-20240418111340586"> </p><p>因为s3使用了<code>new</code>关键字创建了新的<code>String</code>对象在对其赋值”abc”字符串</p></li></ul><h2 id="String类型的变量和常量做“-”运算的时候发生了什么？"><a href="#String类型的变量和常量做“-”运算的时候发生了什么？" class="headerlink" title="String类型的变量和常量做“+”运算的时候发生了什么？"></a>String类型的变量和常量做“+”运算的时候发生了什么？</h2><h3 id="不加final关键字时"><a href="#不加final关键字时" class="headerlink" title="不加final关键字时"></a>不加<code>final</code>关键字时</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"str"</span><span class="token punctuation">;</span><span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">"int"</span><span class="token punctuation">;</span><span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token string">"str"</span> <span class="token operator">+</span> <span class="token string">"ing"</span><span class="token punctuation">;</span><span class="token class-name">String</span> str4 <span class="token operator">=</span> str1 <span class="token operator">+</span> str2<span class="token punctuation">;</span><span class="token class-name">String</span> str5 <span class="token operator">=</span> <span class="token string">"string"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3 <span class="token operator">==</span> str4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3 <span class="token operator">==</span> str5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str4 <span class="token operator">==</span> str5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></code></pre><blockquote><p>  <strong>Considerations</strong></p><p>  这里比较的是对象的内存地址，而不是字符串的值</p></blockquote><p><strong>得益于编译器的优化，对于编译期可以确定值得字符串，就是常量字符串，JVM会将其存入字符串常量池中，并且字符串常量拼接得到的字符串常量在编译阶段就已经被存放在字符串常量池了</strong></p><p><strong>常量折叠</strong>：把常量表达式得值求出来作为常量嵌在最终生成的代码中，这是Javac编译器哦会对源代码做的极少量优化措施之一（代码优化几乎都在即时编译器中进行）</p><p>对于上面的<code>String str3 = "str" + "ing"</code>，编译器会帮我们优化成：<code>String str3 = "string"</code></p><p>并非所有的常量都会进行折叠，只有编译器在程序编译期就可以确定值得常量才可以，例如：</p><ul><li>基本数据类型（<code>byte</code>、<code>boolean</code>、<code>short</code>、<code>char</code>、<code>int</code>、<code>float</code>、<code>long</code>、<code>double</code>）以及字符串常量</li><li><code>final</code>修饰的基本数据类型和字符串变量</li><li>字符串通过“+”拼接得到的字符串、基本数据类型之间的算术运算（加减乘除）、基本数据类型的位运算（<code>&lt;&lt;</code>、<code>&gt;&gt;</code>、<code>&gt;&gt;&gt;</code>）</li></ul><p><strong>对于在程序编译期间无法确定的值，编译器是无法对其进行优化的</strong></p><p>例如上面的变量str4，对象引用和“+”的字符串拼接方式，实际上是通过<code>StringBuilder</code>调用<code>append()</code>方法实现的，拼接完成之后调用<code>toString()</code>得到一个<code>String</code>对象</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str4 <span class="token operator">=</span> str1 <span class="token operator">+</span> str2<span class="token punctuation">;</span><span class="token comment">// 等价于</span><span class="token class-name">String</span> str4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>  我们在日常写代码的时候，应该尽量避免多个字符串对象拼接，因为这样会重新创建对象，如果需要改变字符串的时候，可以使用<code>StringBuilder</code>或者<code>StringBuffer</code></p></blockquote><h3 id="加入final关键字时"><a href="#加入final关键字时" class="headerlink" title="加入final关键字时"></a>加入<code>final</code>关键字时</h3><p>对字符串使用<code>final</code>关键字修饰后，可以让编译器当作常量来访问</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"str"</span><span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">"ing"</span><span class="token punctuation">;</span><span class="token class-name">String</span> stringA <span class="token operator">=</span> <span class="token string">"str"</span> <span class="token operator">+</span> <span class="token string">"ing"</span><span class="token punctuation">;</span><span class="token class-name">String</span> stringB <span class="token operator">=</span> str1 <span class="token operator">+</span> str2<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringA <span class="token operator">==</span> stringB<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>运行结果：</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404181304912.png" alt="image-20240418130417846"> </p><p>这是因为被<code>final</code>关键字修饰后的<code>String</code>字符串会被编译器当作常量来处理，编译器在程序编译期就可以确定他的值，其效果就相当于访问常量</p><p>如果我们把常量<code>str2</code>改成运行时才能知道它的值，就没有办法使用<code>常量折叠</code>来进行优化了（和方法加不加<code>final</code>来修饰无关，就算加了也不可以优化）</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"str"</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token function">getStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> stringA <span class="token operator">=</span> <span class="token string">"str"</span> <span class="token operator">+</span> <span class="token string">"ing"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> stringB <span class="token operator">=</span> str1 <span class="token operator">+</span> str2<span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringA <span class="token operator">==</span> stringB<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"ing"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行结果：false</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-9.0-软件磁盘阵列（Software RAID）</title>
      <link href="/2024/04/17/linux-9.0-ruan-jian-ci-pan-zhen-lie-software-raid/"/>
      <url>/2024/04/17/linux-9.0-ruan-jian-ci-pan-zhen-lie-software-raid/</url>
      
        <content type="html"><![CDATA[<h1 id="软件磁盘阵列（Software-RAID）"><a href="#软件磁盘阵列（Software-RAID）" class="headerlink" title="软件磁盘阵列（Software RAID）"></a>软件磁盘阵列（Software RAID）</h1><p>不组成磁盘阵列时，磁盘与磁盘之间是没有任何关系的，假设把文件、数据全部放到磁盘A，那和磁盘B是完全没有任何关系的，两块磁盘的完全独立的两个数据仓库，即：Just a bunch of disk（只是一堆磁盘），JBOD结构，这样就导致有一个弊端，比如我们要调取磁盘A里的数据，A盘是全力工作的，而磁盘B是空闲的，这样就会导致磁盘性能的浪费，所以为了提升效率以及数据的安全，有了磁盘阵列，<code>RAID</code>。</p><h2 id="什么是RAID？"><a href="#什么是RAID？" class="headerlink" title="什么是RAID？"></a>什么是RAID？</h2><p>磁盘阵列全称【Redundant Arrays of Inexpensive Disks：RAID】，<code>独立冗余磁盘阵列</code></p><p>RAID可以将多个较小的磁盘整合成为一个较大的磁盘设备，而这个较大的磁盘功能不仅仅只是存储，还具有数据保护的功能。</p><p>整个RAID由于选择的level（0~7）不同，整合后的磁盘具有的功能也不同：</p><ul><li><p><code>RAID0</code>（等量模式，stripe）：性能最佳</p><ul><li><p>使用相同型号与容量的磁盘来组成时效果较佳，该模式的RAID会将磁盘先切出等量的数据块（<code>chunk</code>，4KB~1MB），当一个文件要写入RAID时，该文件会根据chunk的大小切割好，再依序放到各个磁盘中，由于每个磁盘会交错的存放数据，因此当我们的数据要写入RAID时，数据会被等量的放置在各个磁盘上，例如有两块磁盘组成的RAID0，当有一个100MB的数据要写入，则每个磁盘会各被分配到50MB的存储量，如下图</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404171021711.jpg" alt="f544b2cde93cad8c8096ba5855ea706"> </p><p>上图的意思是，在组成RAID0的时候，每块磁盘都先分割为小数据块（<code>chunk</code>），当数据写入RAID时<strong>数据会先被切割成符合chunk的大小，然后再依序地放置到不同的磁盘中</strong>，因此越多块磁盘组成的RAID0，性能会越好，因为每块磁盘负责的数据量就更低了，但是，也正因为数据是分散存储的，数据损坏的风险也不容小觑，<strong>在RAID0中，只要有任何一块磁盘损坏，在RAID上面的所有数据都会遗失且无法读取</strong></p><blockquote><p>  此外，如果使用不同容量的磁盘来组成RAID0时，比如一块200GB与一块500GB的磁盘组成RAID0，前400GB的数据可以同时写入两块盘（各200GB），但是超过之后，因为200GB容量的盘已满，所以剩余的数据都会堆到500GB的盘中，反而性能就会变差，这就会造成木桶短板效应</p></blockquote></li></ul></li><li><p><code>RAID1</code>（镜像模式，mirror）：完整备份</p><ul><li><p>该模式也需要相同的磁盘容量，最好是一模一样的磁盘，如果是不同容量的磁盘组成RAID1时，那么总容量将以最小的那一块磁盘为主，该RAID模式主要是让<code>同一份数据，完整的保存在两块磁盘上面</code>，例如我有一个100MB的文件，且我仅有两块磁盘组成RAID1时，那么这两块磁盘将会同步写入100MB到他们的存储仓库中，也因此导致整体的RAID容量少了几乎50%，由于两块磁盘的内容一模一样，所以也称为镜像模式</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404171036211.jpg" alt="a922b1e29e6eabb85026f4b335ab1fc"> </p><p>由于同一份数据会被分别写入到其他不同的磁盘中，因此如果要写入100MB时，数据传送到I/O总线后会被复制多份到各个磁盘，结果就是数据量感觉变大了，在大量写入RAID1的情况下，写入性能可能会变得非常差（因为南桥只有一个）</p><blockquote><ul><li>使用硬盘阵列卡会主动地复制一份而不适用系统的I/O总线，性能方面还可以，但是软件磁盘阵列性能就不是很好了。</li><li>由于两块磁盘内的数据一模一样，所以任何一块磁盘损坏时，我们的数据还是可以保存下来，所以RAID1的优点在于：<strong>数据的备份，不过由于磁盘容量有一般用在备份，因此总容量会是全部磁盘容量的一半而已</strong></li></ul></blockquote></li></ul></li><li><p><code>RAID1+0</code>，<code>RAID0+1</code></p><ul><li><p>RAID0性能好，但是数据不安全，RAID1数据安全，但是性能不好，将二者整合起来组成RAID就是<code>RAID10</code>或<code>RAID01</code></p></li><li><p><code>RAID10</code></p><ol><li>让两块磁盘组成<code>RAID1</code></li><li>再将各组<code>RAID1</code>组成一组<code>RAID0</code></li></ol><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404171239649.jpg" alt="5ed7cbb4e873a90719a61296603db62"> </p></li><li><p><code>RAID01</code></p><ol><li>让两块磁盘组成<code>RAID0</code></li><li>再让各组<code>RAID0</code>组成一组<code>RAID1</code></li></ol></li></ul><blockquote><p>  为什么推荐<code>RAID10</code>？</p><p>  当我们有20块磁盘组成的系统，每两块组成<code>RAID1</code>，这样我们有10组组成了<code>RAID1</code>的可以自己回复的系统，在此基础上将10组<code>RAID1</code>组成一组<code>RAID0</code>，速度能提升10倍</p><p>  注意：因为每组<code>RAID1</code>都是独立存在的，所以任何一块磁盘损坏，数据都是从另一块磁盘直接复制过来重建，并不像<code>RAID5</code>和<code>RAID6</code>必须要整组RAID的磁盘共同共同建立一块独立的磁盘系统，且<code>RAID1</code>与<code>RAID0</code>是不需要经过计算的（<code>striping</code>），读写性能也比其他RAID级别好很多</p></blockquote></li><li><p>RAID2</p><ul><li><p>利用<code>海明码校验</code>的一种磁盘阵列，在RAID0的基础上增加了纠错能力（并非容灾，还是很容易坏），RAID2里将2的n次方作为纠错的校验码，其他的位置才是原始数据，如图</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404171101200.png" alt="image-20240417110126123"> </p><p>编码数位越少，磁盘利用率越低</p><p>由于写入数据可以往多块磁盘里写入，所以其具有和RAID0较为相似的并发性能，但是因为写入数据需要计算校验码，读取数据也需要计算校验码用于纠错，所以性能开销较大</p></li></ul></li><li><p>RAID3</p><ul><li><p>在RAID0的基础上增加了一块磁盘的容灾能力</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404171105789.png" alt="image-20240417110519704"> </p><p>如上图所示，三块磁盘组成的RAID0，将第四块磁盘专门用来存放前三块磁盘的恢复码，在前面三块磁盘任意一个损坏时，可以根据另外两块磁盘的数据和第四块磁盘的恢复码恢复损坏磁盘的数据，而第四块磁盘损坏也不会影响到前三块磁盘内的数据，因此就是为什么说RAID3增加了1块磁盘的容灾能力，RAID3的性能非常接近RAID0</p></li></ul></li><li><p>RAID4</p><ul><li><p>和RAID3很像，也是在RAID0的基础上增加了一块恢复码的磁盘</p><p>RAID3在存放文件的时候是这样的，例：将一块文件分成三份，每一再分三块加一份恢复码</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404171131061.png" alt="image-20240417112622888"> </p><p>而RAID4是将文件拆分成三块后连同恢复码直接写入，如下图</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404171131042.png" alt="image-20240417112751046"> </p><blockquote><p>  和RAID3的区别在于，RAID3是将一个数据块拆分，分开存，其校验码也是根据拆分开的那部分计算的，而RAID4是按区块存储，校验码是根据几个数据区块遗器进行计算的</p></blockquote></li></ul></li><li><p><code>RAID5</code>：性能与数据备份的均衡考虑</p><ul><li><p><code>RAID5</code>需要三块以上的磁盘才能组成，这种磁盘阵列的数据写入有点类似RAID0，不过每个循环的写入过程中（<code>striping</code>），在每块磁盘还会加入一个奇偶校验数据（<code>Parity</code>）这个数据会记录其他磁盘的备份数据，用于当有磁盘损坏时的恢复码</p></li><li><p><strong>读写情况</strong></p><ul><li><p>每个循环写入时，都会有部分的奇偶校验值（<code>parity</code>）被记录下来，并且每次都记录不同的磁盘，因此任何一个磁盘损坏时都能借其他磁盘的恢复码重新恢复原本磁盘内的数据。</p></li><li><p>由于有奇偶校验值的存在，<strong>所以RAID5得总容量会是整体磁盘数量减一块，如下图，原本的三块磁盘就剩下2块磁盘的容量，而且当损坏的磁盘数量&gt;=2时，整组RAID5的数据就损坏了,RAID5只能支持一块磁盘的损坏情况</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404171249745.jpg" alt="f0f0f849d30db0ea09e105a890ee986"></p></li></ul></li><li><p><strong>读写性能</strong></p><ul><li>与<code>RAID0</code>相比,RAID5读取性能还算可以,不过写入性能没见得提升多少,主要是因为RAID5得数据还得要经过计算奇偶校验值(<code>parity</code>)的关系,由于加上计算的操作,所以写入的性能与系统的硬件关系较大,尤其是使用软件磁盘阵列时,奇偶校验值是通过CPU去计算的,而非专职的磁盘阵列卡</li></ul></li></ul></li><li><p><code>Spare Disk</code>：热备份磁盘</p><ul><li>通常磁盘阵列里的某一块磁盘坏了，我们需要先关机，然后换掉坏的磁盘，磁盘阵列才会开始主动重建（<code>rebuild</code>）原本坏掉的那块磁盘数据到新的磁盘上</li><li>为了让系统可以实时地在磁盘坏掉时主动地重建，就需要热备份磁盘（<code>spare disk</code>）的辅助。所谓的热磁盘备份就是<strong>一块或多块没有包含在原本磁盘阵列级别中的磁盘，这块磁盘平时不会被磁盘阵列所使用，当磁盘阵列有任何磁盘损坏时，这块热备份磁盘就会被主动拉进磁盘阵列中，并将坏掉的那块硬盘移除磁盘阵列，然后立即重建数据系统。当然，如果磁盘阵列支持热插拔就更完美了，直接将坏掉的那块磁盘拔除并换一块新的，再将那块新的磁盘设置为热备份磁盘即可</strong></li></ul></li></ul><h2 id="磁盘阵列的优点"><a href="#磁盘阵列的优点" class="headerlink" title="磁盘阵列的优点"></a>磁盘阵列的优点</h2><ol><li><strong>数据安全与可靠性</strong>：并非指网络信息安全，而是在磁盘损坏时，数据是否还能够安全地恢复或使用</li><li><strong>读写性能</strong>：例如RAID0可以加强读写性能，让系统I/O部分得以改善</li><li><strong>容量</strong>：让多快磁盘组合起来，所以单一文件系统可以有相当大的容量</li></ol><table><thead><tr><th>项目</th><th>RAID 0</th><th>RAID 1</th><th>RAID 10</th><th>RAID 5</th><th>RAID 6</th></tr></thead><tbody><tr><td>最少磁盘数</td><td>2</td><td>2</td><td>4</td><td>3</td><td>4</td></tr><tr><td>最大容错磁盘数（1）</td><td>无</td><td>n-1</td><td>n/2</td><td>1</td><td>2</td></tr><tr><td>数据安全性（1）</td><td>完全没有</td><td>最佳</td><td>最佳</td><td>好</td><td>比RAID 5好</td></tr><tr><td>理论写入性能（2）</td><td>n</td><td>1</td><td>n/2</td><td>&lt;n-1</td><td>&lt;n-2</td></tr><tr><td>理论读出性能（2）</td><td>n</td><td>n</td><td>n</td><td>&lt;n-1</td><td>&lt;n-2</td></tr><tr><td>可用容量（3）</td><td>n</td><td>1</td><td>n/2</td><td>n-1</td><td>n-2</td></tr><tr><td>一般应用</td><td>强调性能但数据不重要的环境</td><td>数据与备份</td><td>服务器、云系统常用</td><td>数据与备份</td><td>数据与备份</td></tr></tbody></table><p><strong>Considerations</strong>：因为RAID5、RAID6读写都需要经过计算奇偶校验值，所以读写性能都不会刚好满足于使用的磁盘数量</p><h2 id="硬件RAID，软件RAID"><a href="#硬件RAID，软件RAID" class="headerlink" title="硬件RAID，软件RAID"></a>硬件RAID，软件RAID</h2><p><code>硬件RAID</code>：通过磁盘阵列卡来完成磁盘阵列</p><p><code>软件RAID</code>：利用软件来模拟磁盘阵列的任务，因此会损耗较多的系统资源（CPU的运算、I/O总线的资源）</p><ul><li>在CentOS里提供的软件磁盘阵列为<code>mdadm</code>这个软件，这个软件会以<code>分区</code>或<code>disk</code>为单位，即我们不需要两块以上的磁盘，只需要有两个以上的硬盘分区（<code>partition</code>）就能够设计我们的磁盘阵列，<code>mdadm</code>支持<code>RAID0</code>、<code>RAID1</code>、<code>RAID5</code>、<code>热磁盘备份</code>等，且提供的管理机制可以打到类似热插拔的功能，可以在文件系统正常使用的情况下进行分区的抽换。</li></ul><blockquote><p>  硬件磁盘阵列在Linux下看起来就是一块实际的大磁盘，因此硬件磁盘阵列的设备文件名为<code>/dev/sd[a-p]</code>，因<code>为使用到SCSI的模块。</code></p><p>  软件磁盘阵列则是系统模拟的，因此使用的设备文件名是系统的设备文件，文件名为<code>/dev/md0</code>、<code>/dev/md1</code>等，二者的设备文件名并不相同</p></blockquote><h3 id="软件磁盘阵列的设置"><a href="#软件磁盘阵列的设置" class="headerlink" title="软件磁盘阵列的设置"></a>软件磁盘阵列的设置</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># mdadm --detail /dev/md0</span><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># mdadm --create /dev/md[0-9] --auto=yes --level=[015] --chunk=NK --raid-devices=N --spare-devices=N /dev/sdx ...</span>选项与参数：<span class="token parameter variable">--create</span>：为建立RAID的选项<span class="token parameter variable">--auto</span><span class="token operator">=</span>yes：决定建立后接的软件磁盘阵列设备，即/dev/md0、/dev/md1等<span class="token parameter variable">--chunk</span><span class="token operator">=</span>NK：决定这个设备的chunk大小，也可以当成strip大小，一般是64K或512K--raid-devices<span class="token operator">=</span>N：使用几个磁盘分区（partition）作为磁盘阵列的设备--spare-devices<span class="token operator">=</span>N：使用几个磁盘作为备用（spare）设备<span class="token parameter variable">--level</span><span class="token operator">=</span><span class="token punctuation">[</span>015<span class="token punctuation">]</span>：设置这组磁盘阵列的级别，支持很多，不过建议只要用0、1、5即可<span class="token parameter variable">--detail</span>：后面所接的哪个磁盘阵列设备的详细信息</code></pre><p>使用<code>mdadm</code>建立<code>RAID5</code>磁盘阵列</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost dev<span class="token punctuation">]</span><span class="token comment"># mdadm --create /dev/md0 --auto=yes --level=5 --chunk=256K --raid-devices=4 --spare-devices=1 /dev/sda{5,6,7,8,9}</span>mdadm: Defaulting to version <span class="token number">1.2</span> metadatamdadm: array /dev/md0 started.</code></pre><p>查看创建的磁盘阵列<code>md0</code></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost dev<span class="token punctuation">]</span><span class="token comment"># mdadm --detail /dev/md0</span>/dev/md0:           Version <span class="token builtin class-name">:</span> <span class="token number">1.2</span>     Creation Time <span class="token builtin class-name">:</span> Wed Apr <span class="token number">17</span> <span class="token number">15</span>:03:01 <span class="token number">2024</span>        Raid Level <span class="token builtin class-name">:</span> raid5        Array Size <span class="token builtin class-name">:</span> <span class="token number">3139584</span> <span class="token punctuation">(</span><span class="token number">2.99</span> GiB <span class="token number">3.21</span> GB<span class="token punctuation">)</span>     Used Dev Size <span class="token builtin class-name">:</span> <span class="token number">1046528</span> <span class="token punctuation">(</span><span class="token number">1022.00</span> MiB <span class="token number">1071.64</span> MB<span class="token punctuation">)</span>      Raid Devices <span class="token builtin class-name">:</span> <span class="token number">4</span>     Total Devices <span class="token builtin class-name">:</span> <span class="token number">5</span>       Persistence <span class="token builtin class-name">:</span> Superblock is persistent       Update Time <span class="token builtin class-name">:</span> Wed Apr <span class="token number">17</span> <span class="token number">15</span>:03:06 <span class="token number">2024</span>             State <span class="token builtin class-name">:</span> clean     Active Devices <span class="token builtin class-name">:</span> <span class="token number">4</span>   Working Devices <span class="token builtin class-name">:</span> <span class="token number">5</span>    Failed Devices <span class="token builtin class-name">:</span> <span class="token number">0</span>     Spare Devices <span class="token builtin class-name">:</span> <span class="token number">1</span>            Layout <span class="token builtin class-name">:</span> left-symmetric        Chunk Size <span class="token builtin class-name">:</span> 256KConsistency Policy <span class="token builtin class-name">:</span> resync              Name <span class="token builtin class-name">:</span> localhost.localdomain:0  <span class="token punctuation">(</span>local to <span class="token function">host</span> localhost.localdomain<span class="token punctuation">)</span>              UUID <span class="token builtin class-name">:</span> 11f6c708:b6fb79ca:e63064df:e01d3415            Events <span class="token builtin class-name">:</span> <span class="token number">18</span>    Number   Major   Minor   RaidDevice State       <span class="token number">0</span>       <span class="token number">8</span>        <span class="token number">5</span>        <span class="token number">0</span>      active <span class="token function">sync</span>   /dev/sda5       <span class="token number">1</span>       <span class="token number">8</span>        <span class="token number">6</span>        <span class="token number">1</span>      active <span class="token function">sync</span>   /dev/sda6       <span class="token number">2</span>       <span class="token number">8</span>        <span class="token number">7</span>        <span class="token number">2</span>      active <span class="token function">sync</span>   /dev/sda7       <span class="token number">5</span>       <span class="token number">8</span>        <span class="token number">8</span>        <span class="token number">3</span>      active <span class="token function">sync</span>   /dev/sda8       <span class="token number">4</span>       <span class="token number">8</span>        <span class="token number">9</span>        -      spare   /dev/sda9     <span class="token comment"># 最后五行就是五个设备目前的情况，包括四个active sync一个spare（热磁盘设备）</span><span class="token comment"># RaidDevice是此RAID内的磁盘顺序</span></code></pre><p>当然也可以查看<code>/proc/mdstat</code>文件来查看系统软件磁盘阵列的情况</p><pre class="language-bash" data-language="bash"><code class="language-bash">       <span class="token number">4</span>       <span class="token number">8</span>        <span class="token number">9</span>        -      spare   /dev/sda9<span class="token punctuation">[</span>root@localhost dev<span class="token punctuation">]</span><span class="token comment"># cat /proc/mdstat </span>Personalities <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>raid6<span class="token punctuation">]</span> <span class="token punctuation">[</span>raid5<span class="token punctuation">]</span> <span class="token punctuation">[</span>raid4<span class="token punctuation">]</span> md0 <span class="token builtin class-name">:</span> active raid5 sda8<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> sda9<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span> sda7<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> sda6<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> sda5<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token operator">=</span>第一行      <span class="token number">3139584</span> blocks super <span class="token number">1.2</span> level <span class="token number">5</span>, 256k chunk, algorithm <span class="token number">2</span> <span class="token punctuation">[</span><span class="token number">4</span>/4<span class="token punctuation">]</span> <span class="token punctuation">[</span>UUUU<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token operator">=</span>第二行      unused devices: <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span></code></pre><ul><li>第一行：指出md0为raid5，且使用了sda8、sda7、sda6、sda5等四块磁盘设备，每个设备后面的[]内的数字代表此磁盘在RAID中的顺序（RaidDevice），至于sda9后面的S代表其为热磁盘设备</li><li>第二行：此磁盘阵列拥有3139584个区块（每个区块单位为1KB），所以总容量约为3GB，使用raid5级别，写入磁盘的小数据块（chunk）大小为256KB，使用algorithm2磁盘阵列算法。[m/n]代表此磁盘阵列需要m个设备，且n个设备正常运行，因md0需要4个设备且这4个设备均正常运行。[UUUU]代表四个所需的设备的启动情况，U代表正常运行，_代表不正常。</li></ul><p><strong>格式化与挂载使用RAID</strong></p><ul><li>stripe（chunk）容量为256KB，所以su=256k</li><li>共有4块组成RAID5，因此容量少一块，所以sw=3</li><li>计算出数据宽度为：256k*3=768k</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost dev<span class="token punctuation">]</span><span class="token comment"># mkfs.xfs -f -d su=256k,sw=3 -r extsize=768k /dev/md0</span>meta-data<span class="token operator">=</span>/dev/md0               <span class="token assign-left variable">isize</span><span class="token operator">=</span><span class="token number">512</span>    <span class="token assign-left variable">agcount</span><span class="token operator">=</span><span class="token number">8</span>, <span class="token assign-left variable">agsize</span><span class="token operator">=</span><span class="token number">98048</span> blks         <span class="token operator">=</span>                       <span class="token assign-left variable">sectsz</span><span class="token operator">=</span><span class="token number">512</span>   <span class="token assign-left variable">attr</span><span class="token operator">=</span><span class="token number">2</span>, <span class="token assign-left variable">projid32bit</span><span class="token operator">=</span><span class="token number">1</span>         <span class="token operator">=</span>                       <span class="token assign-left variable">crc</span><span class="token operator">=</span><span class="token number">1</span>        <span class="token assign-left variable">finobt</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">sparse</span><span class="token operator">=</span><span class="token number">0</span>data     <span class="token operator">=</span>                       <span class="token assign-left variable">bsize</span><span class="token operator">=</span><span class="token number">4096</span>   <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">784384</span>, <span class="token assign-left variable">imaxpct</span><span class="token operator">=</span><span class="token number">25</span>         <span class="token operator">=</span>                       <span class="token assign-left variable">sunit</span><span class="token operator">=</span><span class="token number">64</span>     <span class="token assign-left variable">swidth</span><span class="token operator">=</span><span class="token number">192</span> blksnaming   <span class="token operator">=</span>version <span class="token number">2</span>              <span class="token assign-left variable">bsize</span><span class="token operator">=</span><span class="token number">4096</span>   ascii-ci<span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">ftype</span><span class="token operator">=</span><span class="token number">1</span>log      <span class="token operator">=</span>internal log           <span class="token assign-left variable">bsize</span><span class="token operator">=</span><span class="token number">4096</span>   <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">2560</span>, <span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token number">2</span>         <span class="token operator">=</span>                       <span class="token assign-left variable">sectsz</span><span class="token operator">=</span><span class="token number">512</span>   <span class="token assign-left variable">sunit</span><span class="token operator">=</span><span class="token number">64</span> blks, lazy-count<span class="token operator">=</span><span class="token number">1</span>realtime <span class="token operator">=</span>none                   <span class="token assign-left variable">extsz</span><span class="token operator">=</span><span class="token number">786432</span> <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">rtextents</span><span class="token operator">=</span><span class="token number">0</span></code></pre><p>挂载</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost dev<span class="token punctuation">]</span><span class="token comment"># mkdir /srv/raid</span><span class="token punctuation">[</span>root@localhost dev<span class="token punctuation">]</span><span class="token comment"># mount /dev/md0 /srv/raid</span><span class="token punctuation">[</span>root@localhost dev<span class="token punctuation">]</span><span class="token comment"># df -Th /srv/raid</span>文件系统       类型  容量  已用  可用 已用% 挂载点/dev/md0       xfs   <span class="token number">3</span>.0G   33M  <span class="token number">3</span>.0G    <span class="token number">2</span>% /srv/raid<span class="token comment"># 多了一个/dev/md0的设备，挂载的地方在我们创建的/srv/raid中</span></code></pre><h3 id="组建RAID10"><a href="#组建RAID10" class="headerlink" title="组建RAID10"></a>组建<code>RAID10</code></h3><ol><li><p>创建并格式化分区（5，6，7，8）</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1.创建扩展分区4</span><span class="token punctuation">[</span>root@localhost raid<span class="token punctuation">]</span><span class="token comment"># fdisk /dev/sda</span>欢迎使用 <span class="token function">fdisk</span> <span class="token punctuation">(</span>util-linux <span class="token number">2.23</span>.2<span class="token punctuation">)</span>。更改将停留在内存中，直到您决定将更改写入磁盘。使用写入命令前请三思。命令<span class="token punctuation">(</span>输入 m 获取帮助<span class="token punctuation">)</span>：nPartition type:   p   primary <span class="token punctuation">(</span><span class="token number">3</span> primary, <span class="token number">0</span> extended, <span class="token number">1</span> <span class="token function">free</span><span class="token punctuation">)</span>   e   extendedSelect <span class="token punctuation">(</span>default e<span class="token punctuation">)</span>: e已选择分区 <span class="token number">4</span>起始 扇区 <span class="token punctuation">(</span><span class="token number">35674112</span>-83886079，默认为 <span class="token number">35674112</span><span class="token punctuation">)</span>：将使用默认值 <span class="token number">35674112</span>Last 扇区, +扇区 or +size<span class="token punctuation">{</span>K,M,G<span class="token punctuation">}</span> <span class="token punctuation">(</span><span class="token number">35674112</span>-83886079，默认为 <span class="token number">83886079</span><span class="token punctuation">)</span>：+10G分区 <span class="token number">4</span> 已设置为 Extended 类型，大小设为 <span class="token number">10</span> GiB<span class="token comment"># 2.创建逻辑分区5、6、7、8</span>命令<span class="token punctuation">(</span>输入 m 获取帮助<span class="token punctuation">)</span>：nAll primary partitions are <span class="token keyword">in</span> use添加逻辑分区 <span class="token number">5</span>起始 扇区 <span class="token punctuation">(</span><span class="token number">35676160</span>-56645631，默认为 <span class="token number">35676160</span><span class="token punctuation">)</span>：将使用默认值 <span class="token number">35676160</span>Last 扇区, +扇区 or +size<span class="token punctuation">{</span>K,M,G<span class="token punctuation">}</span> <span class="token punctuation">(</span><span class="token number">35676160</span>-56645631，默认为 <span class="token number">56645631</span><span class="token punctuation">)</span>：+1G分区 <span class="token number">5</span> 已设置为 Linux 类型，大小设为 <span class="token number">1</span> GiB命令<span class="token punctuation">(</span>输入 m 获取帮助<span class="token punctuation">)</span>：nAll primary partitions are <span class="token keyword">in</span> use添加逻辑分区 <span class="token number">6</span>起始 扇区 <span class="token punctuation">(</span><span class="token number">37775360</span>-56645631，默认为 <span class="token number">37775360</span><span class="token punctuation">)</span>：将使用默认值 <span class="token number">37775360</span>Last 扇区, +扇区 or +size<span class="token punctuation">{</span>K,M,G<span class="token punctuation">}</span> <span class="token punctuation">(</span><span class="token number">37775360</span>-56645631，默认为 <span class="token number">56645631</span><span class="token punctuation">)</span>：+1G分区 <span class="token number">6</span> 已设置为 Linux 类型，大小设为 <span class="token number">1</span> GiB命令<span class="token punctuation">(</span>输入 m 获取帮助<span class="token punctuation">)</span>：nAll primary partitions are <span class="token keyword">in</span> use添加逻辑分区 <span class="token number">7</span>起始 扇区 <span class="token punctuation">(</span><span class="token number">39874560</span>-56645631，默认为 <span class="token number">39874560</span><span class="token punctuation">)</span>：将使用默认值 <span class="token number">39874560</span>Last 扇区, +扇区 or +size<span class="token punctuation">{</span>K,M,G<span class="token punctuation">}</span> <span class="token punctuation">(</span><span class="token number">39874560</span>-56645631，默认为 <span class="token number">56645631</span><span class="token punctuation">)</span>：+1G分区 <span class="token number">7</span> 已设置为 Linux 类型，大小设为 <span class="token number">1</span> GiB命令<span class="token punctuation">(</span>输入 m 获取帮助<span class="token punctuation">)</span>：nAll primary partitions are <span class="token keyword">in</span> use添加逻辑分区 <span class="token number">8</span>起始 扇区 <span class="token punctuation">(</span><span class="token number">41973760</span>-56645631，默认为 <span class="token number">41973760</span><span class="token punctuation">)</span>：将使用默认值 <span class="token number">41973760</span>Last 扇区, +扇区 or +size<span class="token punctuation">{</span>K,M,G<span class="token punctuation">}</span> <span class="token punctuation">(</span><span class="token number">41973760</span>-56645631，默认为 <span class="token number">56645631</span><span class="token punctuation">)</span>：+1G分区 <span class="token number">8</span> 已设置为 Linux 类型，大小设为 <span class="token number">1</span> GiB命令<span class="token punctuation">(</span>输入 m 获取帮助<span class="token punctuation">)</span>：wThe partition table has been altered<span class="token operator">!</span><span class="token comment"># 3.使用partprobe -s更新Linux内核的分区表信息</span><span class="token punctuation">[</span>root@localhost raid<span class="token punctuation">]</span><span class="token comment"># partprobe -s</span>/dev/sda: msdos partitions <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token operator">&lt;</span><span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span>/dev/sdb: msdos partitions <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span><span class="token comment"># 4.格式化为xfs类型（5、6、7、8四个分区）</span><span class="token punctuation">[</span>root@localhost raid<span class="token punctuation">]</span><span class="token comment"># mkfs.xfs -f /dev/sda5</span>meta-data<span class="token operator">=</span>/dev/sda5              <span class="token assign-left variable">isize</span><span class="token operator">=</span><span class="token number">512</span>    <span class="token assign-left variable">agcount</span><span class="token operator">=</span><span class="token number">4</span>, <span class="token assign-left variable">agsize</span><span class="token operator">=</span><span class="token number">65536</span> blks         <span class="token operator">=</span>                       <span class="token assign-left variable">sectsz</span><span class="token operator">=</span><span class="token number">512</span>   <span class="token assign-left variable">attr</span><span class="token operator">=</span><span class="token number">2</span>, <span class="token assign-left variable">projid32bit</span><span class="token operator">=</span><span class="token number">1</span>         <span class="token operator">=</span>                       <span class="token assign-left variable">crc</span><span class="token operator">=</span><span class="token number">1</span>        <span class="token assign-left variable">finobt</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">sparse</span><span class="token operator">=</span><span class="token number">0</span>data     <span class="token operator">=</span>                       <span class="token assign-left variable">bsize</span><span class="token operator">=</span><span class="token number">4096</span>   <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">262144</span>, <span class="token assign-left variable">imaxpct</span><span class="token operator">=</span><span class="token number">25</span>         <span class="token operator">=</span>                       <span class="token assign-left variable">sunit</span><span class="token operator">=</span><span class="token number">0</span>      <span class="token assign-left variable">swidth</span><span class="token operator">=</span><span class="token number">0</span> blksnaming   <span class="token operator">=</span>version <span class="token number">2</span>              <span class="token assign-left variable">bsize</span><span class="token operator">=</span><span class="token number">4096</span>   ascii-ci<span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">ftype</span><span class="token operator">=</span><span class="token number">1</span>log      <span class="token operator">=</span>internal log           <span class="token assign-left variable">bsize</span><span class="token operator">=</span><span class="token number">4096</span>   <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">2560</span>, <span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token number">2</span>         <span class="token operator">=</span>                       <span class="token assign-left variable">sectsz</span><span class="token operator">=</span><span class="token number">512</span>   <span class="token assign-left variable">sunit</span><span class="token operator">=</span><span class="token number">0</span> blks, lazy-count<span class="token operator">=</span><span class="token number">1</span>realtime <span class="token operator">=</span>none                   <span class="token assign-left variable">extsz</span><span class="token operator">=</span><span class="token number">4096</span>   <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">rtextents</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">[</span>root@localhost raid<span class="token punctuation">]</span><span class="token comment"># mkfs.xfs -f /dev/sda6</span>meta-data<span class="token operator">=</span>/dev/sda6              <span class="token assign-left variable">isize</span><span class="token operator">=</span><span class="token number">512</span>    <span class="token assign-left variable">agcount</span><span class="token operator">=</span><span class="token number">4</span>, <span class="token assign-left variable">agsize</span><span class="token operator">=</span><span class="token number">65536</span> blks         <span class="token operator">=</span>                       <span class="token assign-left variable">sectsz</span><span class="token operator">=</span><span class="token number">512</span>   <span class="token assign-left variable">attr</span><span class="token operator">=</span><span class="token number">2</span>, <span class="token assign-left variable">projid32bit</span><span class="token operator">=</span><span class="token number">1</span>         <span class="token operator">=</span>                       <span class="token assign-left variable">crc</span><span class="token operator">=</span><span class="token number">1</span>        <span class="token assign-left variable">finobt</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">sparse</span><span class="token operator">=</span><span class="token number">0</span>data     <span class="token operator">=</span>                       <span class="token assign-left variable">bsize</span><span class="token operator">=</span><span class="token number">4096</span>   <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">262144</span>, <span class="token assign-left variable">imaxpct</span><span class="token operator">=</span><span class="token number">25</span>         <span class="token operator">=</span>                       <span class="token assign-left variable">sunit</span><span class="token operator">=</span><span class="token number">0</span>      <span class="token assign-left variable">swidth</span><span class="token operator">=</span><span class="token number">0</span> blksnaming   <span class="token operator">=</span>version <span class="token number">2</span>              <span class="token assign-left variable">bsize</span><span class="token operator">=</span><span class="token number">4096</span>   ascii-ci<span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">ftype</span><span class="token operator">=</span><span class="token number">1</span>log      <span class="token operator">=</span>internal log           <span class="token assign-left variable">bsize</span><span class="token operator">=</span><span class="token number">4096</span>   <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">2560</span>, <span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token number">2</span>         <span class="token operator">=</span>                       <span class="token assign-left variable">sectsz</span><span class="token operator">=</span><span class="token number">512</span>   <span class="token assign-left variable">sunit</span><span class="token operator">=</span><span class="token number">0</span> blks, lazy-count<span class="token operator">=</span><span class="token number">1</span>realtime <span class="token operator">=</span>none                   <span class="token assign-left variable">extsz</span><span class="token operator">=</span><span class="token number">4096</span>   <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">rtextents</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">[</span>root@localhost raid<span class="token punctuation">]</span><span class="token comment"># mkfs.xfs -f /dev/sda7</span>meta-data<span class="token operator">=</span>/dev/sda7              <span class="token assign-left variable">isize</span><span class="token operator">=</span><span class="token number">512</span>    <span class="token assign-left variable">agcount</span><span class="token operator">=</span><span class="token number">4</span>, <span class="token assign-left variable">agsize</span><span class="token operator">=</span><span class="token number">65536</span> blks         <span class="token operator">=</span>                       <span class="token assign-left variable">sectsz</span><span class="token operator">=</span><span class="token number">512</span>   <span class="token assign-left variable">attr</span><span class="token operator">=</span><span class="token number">2</span>, <span class="token assign-left variable">projid32bit</span><span class="token operator">=</span><span class="token number">1</span>         <span class="token operator">=</span>                       <span class="token assign-left variable">crc</span><span class="token operator">=</span><span class="token number">1</span>        <span class="token assign-left variable">finobt</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">sparse</span><span class="token operator">=</span><span class="token number">0</span>data     <span class="token operator">=</span>                       <span class="token assign-left variable">bsize</span><span class="token operator">=</span><span class="token number">4096</span>   <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">262144</span>, <span class="token assign-left variable">imaxpct</span><span class="token operator">=</span><span class="token number">25</span>         <span class="token operator">=</span>                       <span class="token assign-left variable">sunit</span><span class="token operator">=</span><span class="token number">0</span>      <span class="token assign-left variable">swidth</span><span class="token operator">=</span><span class="token number">0</span> blksnaming   <span class="token operator">=</span>version <span class="token number">2</span>              <span class="token assign-left variable">bsize</span><span class="token operator">=</span><span class="token number">4096</span>   ascii-ci<span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">ftype</span><span class="token operator">=</span><span class="token number">1</span>log      <span class="token operator">=</span>internal log           <span class="token assign-left variable">bsize</span><span class="token operator">=</span><span class="token number">4096</span>   <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">2560</span>, <span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token number">2</span>         <span class="token operator">=</span>                       <span class="token assign-left variable">sectsz</span><span class="token operator">=</span><span class="token number">512</span>   <span class="token assign-left variable">sunit</span><span class="token operator">=</span><span class="token number">0</span> blks, lazy-count<span class="token operator">=</span><span class="token number">1</span>realtime <span class="token operator">=</span>none                   <span class="token assign-left variable">extsz</span><span class="token operator">=</span><span class="token number">4096</span>   <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">rtextents</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">[</span>root@localhost raid<span class="token punctuation">]</span><span class="token comment"># mkfs.xfs -f /dev/sda8</span>meta-data<span class="token operator">=</span>/dev/sda8              <span class="token assign-left variable">isize</span><span class="token operator">=</span><span class="token number">512</span>    <span class="token assign-left variable">agcount</span><span class="token operator">=</span><span class="token number">4</span>, <span class="token assign-left variable">agsize</span><span class="token operator">=</span><span class="token number">65536</span> blks         <span class="token operator">=</span>                       <span class="token assign-left variable">sectsz</span><span class="token operator">=</span><span class="token number">512</span>   <span class="token assign-left variable">attr</span><span class="token operator">=</span><span class="token number">2</span>, <span class="token assign-left variable">projid32bit</span><span class="token operator">=</span><span class="token number">1</span>         <span class="token operator">=</span>                       <span class="token assign-left variable">crc</span><span class="token operator">=</span><span class="token number">1</span>        <span class="token assign-left variable">finobt</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">sparse</span><span class="token operator">=</span><span class="token number">0</span>data     <span class="token operator">=</span>                       <span class="token assign-left variable">bsize</span><span class="token operator">=</span><span class="token number">4096</span>   <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">262144</span>, <span class="token assign-left variable">imaxpct</span><span class="token operator">=</span><span class="token number">25</span>         <span class="token operator">=</span>                       <span class="token assign-left variable">sunit</span><span class="token operator">=</span><span class="token number">0</span>      <span class="token assign-left variable">swidth</span><span class="token operator">=</span><span class="token number">0</span> blksnaming   <span class="token operator">=</span>version <span class="token number">2</span>              <span class="token assign-left variable">bsize</span><span class="token operator">=</span><span class="token number">4096</span>   ascii-ci<span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">ftype</span><span class="token operator">=</span><span class="token number">1</span>log      <span class="token operator">=</span>internal log           <span class="token assign-left variable">bsize</span><span class="token operator">=</span><span class="token number">4096</span>   <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">2560</span>, <span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token number">2</span>         <span class="token operator">=</span>                       <span class="token assign-left variable">sectsz</span><span class="token operator">=</span><span class="token number">512</span>   <span class="token assign-left variable">sunit</span><span class="token operator">=</span><span class="token number">0</span> blks, lazy-count<span class="token operator">=</span><span class="token number">1</span>realtime <span class="token operator">=</span>none                   <span class="token assign-left variable">extsz</span><span class="token operator">=</span><span class="token number">4096</span>   <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">rtextents</span><span class="token operator">=</span><span class="token number">0</span><span class="token comment"># 查看UUID与TYPE确认是否格式化完成</span><span class="token punctuation">[</span>root@localhost raid<span class="token punctuation">]</span><span class="token comment"># blkid /dev/sda*</span>/dev/sda: <span class="token assign-left variable">PTTYPE</span><span class="token operator">=</span><span class="token string">"dos"</span> /dev/sda2: <span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">"1ae3bbf7-d0b6-4482-af22-e9fa816410e2"</span> <span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">"xfs"</span> /dev/sda3: <span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">"5lsM5H-xprD-Opd9-vMX9-OkAs-5liF-rxFujb"</span> <span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">"LVM2_member"</span> /dev/sda5: <span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">"d7cd45fa-f763-413e-bfd0-1d1ed7888049"</span> <span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">"xfs"</span> /dev/sda6: <span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">"744e3019-7da3-43e3-a3ee-ada2efe82c0c"</span> <span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">"xfs"</span> /dev/sda7: <span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">"8ee54c11-ba26-4738-a619-7a485f00a498"</span> <span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">"xfs"</span> /dev/sda8: <span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">"6a9a6a98-e05c-4c40-a080-698f8e611a6d"</span> <span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">"xfs"</span> </code></pre></li><li><p>将磁盘两两组建<code>RAID1</code></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 5.sda5、sda6组RAID1（md0），sda7、sda8组RAID1（md1）</span><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># mdadm --create /dev/md0 --auto=yes --level=1 --chunk=256K --raid-devices=2 /dev/sda{5,6}</span>mdadm: Note: this array has metadata at the start and    may not be suitable as a boot device.  If you plan to    store <span class="token string">'/boot'</span> on this device please ensure that    your boot-loader understands md/v1.x metadata, or use    <span class="token parameter variable">--metadata</span><span class="token operator">=</span><span class="token number">0.90</span>Continue creating array? ymdadm: Defaulting to version <span class="token number">1.2</span> metadatamdadm: array /dev/md0 started.<span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># mdadm --create /dev/md1 --auto=yes --level=1 --chunk=256K --raid-devices=2 /dev/sda{7,8}</span>mdadm: Note: this array has metadata at the start and    may not be suitable as a boot device.  If you plan to    store <span class="token string">'/boot'</span> on this device please ensure that    your boot-loader understands md/v1.x metadata, or use    <span class="token parameter variable">--metadata</span><span class="token operator">=</span><span class="token number">0.90</span>Continue creating array? ymdadm: Defaulting to version <span class="token number">1.2</span> metadatamdadm: array /dev/md1 started.</code></pre></li><li><p>将两个<code>RAID1</code>组成一个<code>RAID0</code>（md3）</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 6.将md0和md1组成RAID0（md3）</span><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># mdadm --create /dev/md3 --auto=yes --level=0 --chunk=256K --raid-devices=2 /dev/md{0,1}</span>mdadm: Defaulting to version <span class="token number">1.2</span> metadatamdadm: array /dev/md3 started.<span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># mdadm --detail /dev/md3</span>/dev/md3:           Version <span class="token builtin class-name">:</span> <span class="token number">1.2</span>     Creation Time <span class="token builtin class-name">:</span> Wed Apr <span class="token number">17</span> <span class="token number">16</span>:34:50 <span class="token number">2024</span>        Raid Level <span class="token builtin class-name">:</span> raid0        Array Size <span class="token builtin class-name">:</span> <span class="token number">2091008</span> <span class="token punctuation">(</span><span class="token number">2042.00</span> MiB <span class="token number">2141.19</span> MB<span class="token punctuation">)</span>      Raid Devices <span class="token builtin class-name">:</span> <span class="token number">2</span>     Total Devices <span class="token builtin class-name">:</span> <span class="token number">2</span>       Persistence <span class="token builtin class-name">:</span> Superblock is persistent       Update Time <span class="token builtin class-name">:</span> Wed Apr <span class="token number">17</span> <span class="token number">16</span>:34:50 <span class="token number">2024</span>             State <span class="token builtin class-name">:</span> clean     Active Devices <span class="token builtin class-name">:</span> <span class="token number">2</span>   Working Devices <span class="token builtin class-name">:</span> <span class="token number">2</span>    Failed Devices <span class="token builtin class-name">:</span> <span class="token number">0</span>     Spare Devices <span class="token builtin class-name">:</span> <span class="token number">0</span>        Chunk Size <span class="token builtin class-name">:</span> 256KConsistency Policy <span class="token builtin class-name">:</span> none              Name <span class="token builtin class-name">:</span> localhost.localdomain:3  <span class="token punctuation">(</span>local to <span class="token function">host</span> localhost.localdomain<span class="token punctuation">)</span>              UUID <span class="token builtin class-name">:</span> 5ce98002:f148d891:33c1cd8d:5568473e            Events <span class="token builtin class-name">:</span> <span class="token number">0</span>    Number   Major   Minor   RaidDevice State       <span class="token number">0</span>       <span class="token number">9</span>        <span class="token number">0</span>        <span class="token number">0</span>      active <span class="token function">sync</span>   /dev/md0       <span class="token number">1</span>       <span class="token number">9</span>        <span class="token number">1</span>        <span class="token number">1</span>      active <span class="token function">sync</span>   /dev/md1</code></pre></li><li><p>格式化md3为xfs文件系统</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 7.格式化md3</span><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># mkfs.xfs -f /dev/md3</span>meta-data<span class="token operator">=</span>/dev/md3               <span class="token assign-left variable">isize</span><span class="token operator">=</span><span class="token number">512</span>    <span class="token assign-left variable">agcount</span><span class="token operator">=</span><span class="token number">8</span>, <span class="token assign-left variable">agsize</span><span class="token operator">=</span><span class="token number">65344</span> blks         <span class="token operator">=</span>                       <span class="token assign-left variable">sectsz</span><span class="token operator">=</span><span class="token number">512</span>   <span class="token assign-left variable">attr</span><span class="token operator">=</span><span class="token number">2</span>, <span class="token assign-left variable">projid32bit</span><span class="token operator">=</span><span class="token number">1</span>         <span class="token operator">=</span>                       <span class="token assign-left variable">crc</span><span class="token operator">=</span><span class="token number">1</span>        <span class="token assign-left variable">finobt</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">sparse</span><span class="token operator">=</span><span class="token number">0</span>data     <span class="token operator">=</span>                       <span class="token assign-left variable">bsize</span><span class="token operator">=</span><span class="token number">4096</span>   <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">522752</span>, <span class="token assign-left variable">imaxpct</span><span class="token operator">=</span><span class="token number">25</span>         <span class="token operator">=</span>                       <span class="token assign-left variable">sunit</span><span class="token operator">=</span><span class="token number">64</span>     <span class="token assign-left variable">swidth</span><span class="token operator">=</span><span class="token number">128</span> blksnaming   <span class="token operator">=</span>version <span class="token number">2</span>              <span class="token assign-left variable">bsize</span><span class="token operator">=</span><span class="token number">4096</span>   ascii-ci<span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">ftype</span><span class="token operator">=</span><span class="token number">1</span>log      <span class="token operator">=</span>internal log           <span class="token assign-left variable">bsize</span><span class="token operator">=</span><span class="token number">4096</span>   <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">2560</span>, <span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token number">2</span>         <span class="token operator">=</span>                       <span class="token assign-left variable">sectsz</span><span class="token operator">=</span><span class="token number">512</span>   <span class="token assign-left variable">sunit</span><span class="token operator">=</span><span class="token number">64</span> blks, lazy-count<span class="token operator">=</span><span class="token number">1</span>realtime <span class="token operator">=</span>none                   <span class="token assign-left variable">extsz</span><span class="token operator">=</span><span class="token number">4096</span>   <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">rtextents</span><span class="token operator">=</span><span class="token number">0</span></code></pre></li><li><p>挂载md3</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 8.将md3挂载到我们自己创建的目录/srv/raid下</span><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># mount /dev/md3 /srv/raid</span><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># df -Th /srv/raid</span>文件系统       类型  容量  已用  可用 已用% 挂载点/dev/md3       xfs   <span class="token number">2</span>.0G   33M  <span class="token number">2</span>.0G    <span class="token number">2</span>% /srv/raid<span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># lsblk</span>NAME            MAJ:MIN RM  SIZE RO TYPE  MOUNTPOINTsda               <span class="token number">8</span>:0    <span class="token number">0</span>   40G  <span class="token number">0</span> disk  ├─sda1            <span class="token number">8</span>:1    <span class="token number">0</span>    2M  <span class="token number">0</span> part  ├─sda2            <span class="token number">8</span>:2    <span class="token number">0</span>    1G  <span class="token number">0</span> part  /boot├─sda3            <span class="token number">8</span>:3    <span class="token number">0</span>   16G  <span class="token number">0</span> part  │ ├─centos-root <span class="token number">253</span>:0    <span class="token number">0</span>   10G  <span class="token number">0</span> lvm   /│ ├─centos-swap <span class="token number">253</span>:1    <span class="token number">0</span>    1G  <span class="token number">0</span> lvm   <span class="token punctuation">[</span>SWAP<span class="token punctuation">]</span>│ └─centos-home <span class="token number">253</span>:5    <span class="token number">0</span>    5G  <span class="token number">0</span> lvm   /home├─sda4            <span class="token number">8</span>:4    <span class="token number">0</span>  512B  <span class="token number">0</span> part  ├─sda5            <span class="token number">8</span>:5    <span class="token number">0</span>    1G  <span class="token number">0</span> part  │ └─md0           <span class="token number">9</span>:0    <span class="token number">0</span> 1022M  <span class="token number">0</span> raid1 │   └─md3         <span class="token number">9</span>:3    <span class="token number">0</span>    2G  <span class="token number">0</span> raid0 /srv/raid├─sda6            <span class="token number">8</span>:6    <span class="token number">0</span>    1G  <span class="token number">0</span> part  │ └─md0           <span class="token number">9</span>:0    <span class="token number">0</span> 1022M  <span class="token number">0</span> raid1 │   └─md3         <span class="token number">9</span>:3    <span class="token number">0</span>    2G  <span class="token number">0</span> raid0 /srv/raid├─sda7            <span class="token number">8</span>:7    <span class="token number">0</span>    1G  <span class="token number">0</span> part  │ └─md1           <span class="token number">9</span>:1    <span class="token number">0</span> 1022M  <span class="token number">0</span> raid1 │   └─md3         <span class="token number">9</span>:3    <span class="token number">0</span>    2G  <span class="token number">0</span> raid0 /srv/raid├─sda8            <span class="token number">8</span>:8    <span class="token number">0</span>    1G  <span class="token number">0</span> part  │ └─md1           <span class="token number">9</span>:1    <span class="token number">0</span> 1022M  <span class="token number">0</span> raid1 │   └─md3         <span class="token number">9</span>:3    <span class="token number">0</span>    2G  <span class="token number">0</span> raid0 /srv/raid└─sda9            <span class="token number">8</span>:9    <span class="token number">0</span>    1G  <span class="token number">0</span> part  sdb               <span class="token number">8</span>:16   <span class="token number">0</span>    5G  <span class="token number">0</span> disk  ├─sdb1            <span class="token number">8</span>:17   <span class="token number">0</span>    1G  <span class="token number">0</span> part  │ └─vg0-lv0     <span class="token number">253</span>:4    <span class="token number">0</span>   32M  <span class="token number">0</span> lvm   ├─sdb2            <span class="token number">8</span>:18   <span class="token number">0</span>    1G  <span class="token number">0</span> part  │ └─vg1-lv1     <span class="token number">253</span>:2    <span class="token number">0</span>   20M  <span class="token number">0</span> lvm   ├─sdb3            <span class="token number">8</span>:19   <span class="token number">0</span>    1G  <span class="token number">0</span> part  │ └─vg2-lv2     <span class="token number">253</span>:3    <span class="token number">0</span>   20M  <span class="token number">0</span> lvm   └─sdb4            <span class="token number">8</span>:20   <span class="token number">0</span>    1G  <span class="token number">0</span> part  sr0              <span class="token number">11</span>:0    <span class="token number">1</span>  <span class="token number">9</span>.6G  <span class="token number">0</span> rom   /run/media/feliks/CentOS <span class="token number">7</span> x86_64<span class="token comment"># 至此RAID10组建成功</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>继承LinkedHashMap实现简单的LRU算法</title>
      <link href="/2024/04/16/ji-cheng-linkedhashmap-shi-xian-jian-dan-de-lru-suan-fa/"/>
      <url>/2024/04/16/ji-cheng-linkedhashmap-shi-xian-jian-dan-de-lru-suan-fa/</url>
      
        <content type="html"><![CDATA[<p>当我们写的项目或应用有了一定流量后，查询数据库就会特别频繁，此时我们可以考虑使用Java自带的HashMap或者ConcurrentHashMap，但是这样实现的缓存机制会有个问题：<code>内存会无限制的增长</code>，所以HashMap很快也被淘汰了</p><p>我们在查询redis的时候，希望可以本地缓存放一些热点数据，使用HashMap显然无法满足这种需求</p><p>HashMap也不是就完全没用了，在一些场景下作为缓存，当不需要淘汰机制的时候，比如利用反射，如果每次都用反射去搜索Method、Field，性能会很低，此时如果用HashMap缓存起来，性能将提高很多</p><p><code>常见的三种淘汰算法：FIFO、LRU、LFU</code></p><h1 id="LRU的背景"><a href="#LRU的背景" class="headerlink" title="LRU的背景"></a>LRU的背景</h1><p><strong>LRU</strong>：<code>least-recently-used</code>最近最少使用算法，是一种内存数据淘汰策略，使用常见是当内存不足时，需要淘汰最近最少使用的数据。</p><h1 id="LRU原理"><a href="#LRU原理" class="headerlink" title="LRU原理"></a>LRU原理</h1><p>用一个特殊的栈来保存当前正在使用的各个页面的页面号，当一个新的进程访问某个页面时，将该页面号压入栈顶，如果栈中的内存不够，就把栈底的页面号移除，这样栈顶始终都是最新被访问的页面编号，而栈底则是最近最久未被访问的页面号</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>我们可以通过继承LinkedHashMap，重写removeEldestEntry方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 重写LinkedHashMap的removeEldestEntry方法 * 在Put的时候判断如果为true就会删除最老的 * @param eldest * @return */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">removeEldestEntry</span><span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span> eldest<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> max<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在LinkedHashMap中维护了一个entry链表（用来存放key和value的对象），在每一次get或者put的时候都会把插入的新entry，或者查询到的老entry放在链表表尾。</p><blockquote><p>  <strong>Considerations</strong></p><p>  直接使用LinkedHashMap实现并不是线程安全的，要做到线程安全，就需要加上<code>synchronized</code>修饰符</p></blockquote><p><strong>具体实现代码</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 三种常见的淘汰算法：FIFO、LRU、LFU * LRUMap * 每次访问数据都会将其放在我们的队尾，如果需要淘汰数据，就只需要淘汰队首即可。 * 如果有个数据在1个小时的前59分钟访问了1万次(可见这是个热点数据), * 再后一分钟没有访问这个数据，但是有其他的数据访问，就导致了我们这个热点数据被淘汰。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LRUMap</span> <span class="token keyword">extends</span> <span class="token class-name">LinkedHashMap</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> max<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> lock<span class="token punctuation">;</span>    <span class="token comment">/**     * 在LinkedHashMap中维护了一个entry（用来存放key和value的对象）链表，在每一次get或者put的时候     * 都会把插入的新entry，或者查询到的老entry放在链表的表尾     *     * 在构造方法中设置的大小特意为max*1.4     *     * 在下面的removeEldestEntry方法中只需要size() &gt; max就淘汰，这样我们这个map就永远也走不到     * 扩容的逻辑了     *     * 通过重写LinkedHashMap中的几个简单的方法实现LRUMap     * @param max     * @param lock     */</span>    <span class="token keyword">public</span> <span class="token class-name">LRUMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> max<span class="token punctuation">,</span> <span class="token class-name">Object</span> lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 不用扩容</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>max <span class="token operator">*</span> <span class="token number">1.4f</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.75f</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>max <span class="token operator">=</span> max<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lock <span class="token operator">=</span> lock<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 重写LinkedHashMap的removeEldestEntry方法     * 在Put的时候判断如果为true就会删除最老的     * @param eldest     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">removeEldestEntry</span><span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span> eldest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> max<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 当其他线程试图访问被synchronized修饰的代码块时会被阻塞，只有当前拿到锁的进程可以访问代码块</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">putValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">removeValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Object</span> remove <span class="token operator">=</span> <span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> remove <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 淘汰算法 </tag>
            
            <tag> 缓存 </tag>
            
            <tag> LRU </tag>
            
            <tag> LinkedHashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用EasyVirtualDisplay的副屏方案</title>
      <link href="/2024/04/15/2.0-easyvirtualdisplay/"/>
      <url>/2024/04/15/2.0-easyvirtualdisplay/</url>
      
        <content type="html"><![CDATA[<p>本方案基于Sunshine+Moonlight串流实现，不知道这两个是什么的可以回去自行阅览：<a href="https://feliks.netlify.app/2024/04/13/1.0-sunshine-moonlight-chuan-liu/">Sunshine+Moonlight串流 | Feliks</a></p><h1 id="EasyVirtualDisplay"><a href="#EasyVirtualDisplay" class="headerlink" title="EasyVirtualDisplay"></a>EasyVirtualDisplay</h1><p><strong>github官方开源地址中的描述</strong></p><p>Effortlessly create virtual displays in Windows, capable of supporting various resolutions and refresh rates, suitable for remote control or graphics card spoofing.</p><p>在win中轻松创建支持多种分辨率和刷新率的虚拟显示器，可用于远程控制或显卡欺骗。</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>官方github地址：<a href="https://github.com/KtzeAbyss/Easy-Virtual-Display/releases/tag/0.1">Release EasyVirtualDisplay 0.1 · KtzeAbyss/Easy-Virtual-Display (github.com)</a></p><p>我把它放到奶牛快传了，无法访问github的也可以直接在奶牛里下载：<a href="https://cowtransfer.com/s/f4bf54e92c4c4b">https://cowtransfer.com/s/f4bf54e92c4c4b</a></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404151546176.png" alt="image-20240415154615153"> </p><p>下载里面的EVDsetup.exe</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404151535802.png" alt="image-20240415153525746"> </p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>下载好后运行并安装EasyVirtualDisplay</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404151536196.png" alt="image-20240415153648168"> </p><p>安装好后运行viruaDisplayLit.exe</p><p>首次安装要下载驱动，启动<code>viruaDisplayLit</code>后，在隐藏图标那里找到他并右键</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404151540540.png" alt="image-20240415154025523"> </p><p>驱动安装好后就可以<strong>启动虚拟屏幕</strong>了</p><h1 id="Moonlight"><a href="#Moonlight" class="headerlink" title="Moonlight"></a>Moonlight</h1><p>启动要串流的设备里的Moonlight，并且与Sunshine进行串流</p><p>接下来进行Sunshine的配置</p><h1 id="Sunshine配置"><a href="#Sunshine配置" class="headerlink" title="Sunshine配置"></a>Sunshine配置</h1><p>打开Sunshine的安装目录，找到tools目录，进去</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404151550655.png" alt="image-20240415155039613"> </p><p>进去tools目录后在上面的输入框输入cmd并回车</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404151551790.png" alt="image-20240415155153762"> </p><p>在打开的黑窗口中输入<code>dxgi-info.exe</code>，回车</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404151553951.png" alt="image-20240415155302920"> </p><p>在展示的信息里面可以看到OUTPUT那一栏中有一块另外的<code>DISPLAY</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404151555824.png" alt="image-20240415155544801"> </p><p>复制这个名称（不一定非是DISPLAY9，请根据自己的实际情况来复制）</p><p>在Sunshine的网页里找到<strong>Audio/Video</strong>选项卡</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404151549908.png" alt="image-20240415154910863"> </p><p>在下面找到<strong>输出名称</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404151549557.png" alt="image-20240415154935534"> </p><p>将刚刚得到的名称输入进去</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404151556653.png" alt="image-20240415155656633"> </p><p>然后保存重启Sunshine，让你的设备在Moonlight中重新与Sunshine进行串流即可</p><h1 id="屏幕设置"><a href="#屏幕设置" class="headerlink" title="屏幕设置"></a>屏幕设置</h1><p>启动虚拟屏幕后可以在屏幕设置里查看到两块屏幕</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404151602726.png" alt="image-20240415160258681"> </p><p><strong>记得设置好你需要的主副屏幕的位置</strong></p>]]></content>
      
      
      <categories>
          
          <category> 串流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 串流 </tag>
            
            <tag> Moonlight </tag>
            
            <tag> Sunshine </tag>
            
            <tag> Github开源 </tag>
            
            <tag> EasyVirtualDisplay </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合框架-5.0-Set接口与实现类的使用</title>
      <link href="/2024/04/15/ji-he-kuang-jia-5.0-set-jie-kou-yu-shi-xian-lei-de-shi-yong/"/>
      <url>/2024/04/15/ji-he-kuang-jia-5.0-set-jie-kou-yu-shi-xian-lei-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="Set及其实现类特点"><a href="#Set及其实现类特点" class="headerlink" title="Set及其实现类特点"></a>Set及其实现类特点</h1><p>java.util.Collection：存储一个一个的数据</p><ul><li>子接口<strong>Set</strong>：存储无序的、不可重复的数据<ul><li><strong>HashSet</strong>：主要实现类（底层使用HashMap，即使用数组+单链表+红黑树结构进行存储（jdk8中））<ul><li><strong>LinkedHashSet</strong>：是HashSet的子类，在现有的数组+单链表+红黑树结构基础上又添加了一组双向链表用于记录添加元素的先后顺序，便于频繁的查询操作</li></ul></li><li><strong>TreeSet</strong>：底层使用红黑树存储，可以按照添加的元素的置顶的属性大小顺序进行遍历</li></ul></li></ul><h1 id="使用频率"><a href="#使用频率" class="headerlink" title="使用频率"></a>使用频率</h1><blockquote><p>  相较于List、Map来说，使用的频率比较少</p><p>  用来过滤重复的数据</p></blockquote><h1 id="Set中无序性、不可重复性的理解（HashSet及其子类为例）"><a href="#Set中无序性、不可重复性的理解（HashSet及其子类为例）" class="headerlink" title="Set中无序性、不可重复性的理解（HashSet及其子类为例）"></a>Set中无序性、不可重复性的理解（HashSet及其子类为例）</h1><blockquote><p>  无序性：</p><p>  ≠ 随机性</p><p>  添加元素的顺序和遍历元素的顺序不一致，是不是就是无序性？（不是）</p><p>  什么是无序性？与添加元素的位置有关（可以用链表来理解），元素与元素之间的地址不是依次紧密排列的，这里是根据添加元素的哈希值，计算其在数组中的存储位置，此位置不是一次排序的，表现为无序性</p></blockquote><blockquote><p>  不可重复性：</p><p>  添加到Set中的元素是不能相同的</p><p>  比较的标准需要判断hashCode()得到的哈希值以及equals()得到的boolean型的结果</p><p>  哈希值相同且equals()返回true，则认为元素是相同的</p></blockquote><h1 id="添加到HashSet-LinkedHashSet中元素的要求"><a href="#添加到HashSet-LinkedHashSet中元素的要求" class="headerlink" title="添加到HashSet/LinkedHashSet中元素的要求"></a>添加到HashSet/LinkedHashSet中元素的要求</h1><p>元素所在的类要重写两个方法：equals()和hashCode()</p><p>同时，要求equals()和hashCode()要保持一致性，只需要在IDEA中自动生成两个方法的重写即可，既能保证两个方法的一致性</p><h1 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h1><h2 id="底层的数据结构"><a href="#底层的数据结构" class="headerlink" title="底层的数据结构"></a>底层的数据结构</h2><blockquote><p>  红黑树</p></blockquote><h2 id="添加数据后的特点"><a href="#添加数据后的特点" class="headerlink" title="添加数据后的特点"></a>添加数据后的特点</h2><blockquote><p>  可以按照添加的元素的置顶的属性大小顺序进行遍历</p></blockquote><h2 id="向TreeSet中添加的元素的要求"><a href="#向TreeSet中添加的元素的要求" class="headerlink" title="向TreeSet中添加的元素的要求"></a>向TreeSet中添加的元素的要求</h2><blockquote><p>  要求添加到TreeSet中的元素必须是同一个类型的对象，否则会报ClassCastException异常</p></blockquote><h2 id="判断数据是否相同的标准"><a href="#判断数据是否相同的标准" class="headerlink" title="判断数据是否相同的标准"></a>判断数据是否相同的标准</h2><blockquote><p>  不再是考虑hashCode()和equals()方法了，意味着添加到TreeSet中的元素所在的类不需要重写hashCode()和equals()方法</p><ul><li>比较元素是否相等的标准就是考虑自然排序或定制排序中compareTo()或compare()的返回值</li></ul></blockquote><blockquote><p>  如果compareTo()或compare()的返回值为0，则认为两个对象时相等的，由于TreeSet中不能存放相同的元素，则后一个相等的元素就不能添加到TreeSet中</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面试 </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合框架-4.0-List接口与实现类的使用</title>
      <link href="/2024/04/15/ji-he-kuang-jia-4.0-list-jie-kou-yu-shi-xian-lei-de-shi-yong/"/>
      <url>/2024/04/15/ji-he-kuang-jia-4.0-list-jie-kou-yu-shi-xian-lei-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="List接口中存储数据的特点"><a href="#List接口中存储数据的特点" class="headerlink" title="List接口中存储数据的特点"></a>List接口中存储数据的特点</h1><p><strong>用于存储有序的、可以重复的数据 –&gt; 使用List代替数组，“动态”数组</strong></p><h1 id="List中常用的方法"><a href="#List中常用的方法" class="headerlink" title="List中常用的方法"></a>List中常用的方法</h1><h2 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h2><ul><li><p>在index位置插入element元素</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">Object</span> element<span class="token punctuation">)</span></code></pre></li><li><p>从index位置开始将elements中所有的元素添加进来</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">Collection</span> elements<span class="token punctuation">)</span></code></pre></li></ul><h2 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h2><ul><li><p>获取指定index位置的元素</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span></code></pre></li><li><p>返回从fromInedex到toIndex位置的子集合</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">List</span> <span class="token function">subList</span><span class="token punctuation">(</span><span class="token keyword">int</span> fromIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> toIndex<span class="token punctuation">)</span></code></pre></li></ul><h2 id="获取元素索引"><a href="#获取元素索引" class="headerlink" title="获取元素索引"></a>获取元素索引</h2><ul><li><p>返回element在集合中首次出现的位置</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> element<span class="token punctuation">)</span></code></pre></li><li><p>返回element在当前集合中末次出现的位置</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> element<span class="token punctuation">)</span></code></pre></li></ul><h2 id="删除和替换元素"><a href="#删除和替换元素" class="headerlink" title="删除和替换元素"></a>删除和替换元素</h2><ul><li><p>移除指定index位置的元素，并返回此元素</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span></code></pre></li><li><p>设置指定index位置的元素为element</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">Object</span> element<span class="token punctuation">)</span></code></pre></li></ul><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul><li>增<ul><li><code>add(Object element)</code></li><li><code>addAll(int index, Collection elements)</code></li></ul></li><li>删<ul><li><code>remove(Object element)</code></li><li>remove(int index)</li></ul></li><li>改<ul><li><code>set(int index, Object element)</code></li></ul></li><li>查<ul><li><code>get(int index)</code></li></ul></li><li>插<ul><li><code>add(int index, Object element)</code></li><li>addAll(int index, Collection elements)</li></ul></li><li>长度<ul><li><code>size()</code></li></ul></li><li>遍历<ul><li><code>iterator()</code>：使用迭代器进行遍历</li><li>增强for循环（foreach）</li><li>一般的for循环</li></ul></li></ul><h1 id="List及其实现类特点"><a href="#List及其实现类特点" class="headerlink" title="List及其实现类特点"></a>List及其实现类特点</h1><p>java.util.Collection：存储一个一个的数据</p><ul><li>子接口<strong>List</strong>：存储有序的、可重复的数据（“动态”数组）<ul><li><strong>ArrayList</strong><ul><li>List的主要实现类；线程不安全的、效率高；底层使用Object[]数组存储</li><li>在添加、查找数据时效率高；插入、删除数据时效率低</li></ul></li><li><strong>LinkedList</strong><ul><li>底层使用双向链表的方式进行存储；在对集合中的数据进行频繁的删除、插入操作时，建议使用此类</li><li>在插入、删除数据时效率搞；添加、查找数据时效率低</li></ul></li><li><strong>Vector</strong><ul><li>List的古老实现类；线程安全的，效率低</li><li>底层使用Object[]数组存储</li></ul></li></ul></li></ul><p>【面试题】</p><ul><li>ArrayList、Vector的区别是什么？</li><li>ArrayList、LinkedList的区别是什么？</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面试 </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合框架-3.0-迭代器与foreach</title>
      <link href="/2024/04/15/ji-he-kuang-jia-3.0-die-dai-qi-yu-foreach/"/>
      <url>/2024/04/15/ji-he-kuang-jia-3.0-die-dai-qi-yu-foreach/</url>
      
        <content type="html"><![CDATA[<h1 id="迭代器（iterator）的作用？"><a href="#迭代器（iterator）的作用？" class="headerlink" title="迭代器（iterator）的作用？"></a>迭代器（iterator）的作用？</h1><p>遍历集合元素</p><h1 id="获取迭代器对象"><a href="#获取迭代器对象" class="headerlink" title="获取迭代器对象"></a>获取迭代器对象</h1><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Iterator</span> iterator <span class="token operator">=</span> coll<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="迭代器实现遍历"><a href="#迭代器实现遍历" class="headerlink" title="迭代器实现遍历"></a>迭代器实现遍历</h1><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// next()：①指针下移 ②将下移后集合位置上的元素返回</span><span class="token punctuation">}</span></code></pre><h1 id="增强for循环（foreach）"><a href="#增强for循环（foreach）" class="headerlink" title="增强for循环（foreach）"></a>增强for循环（foreach）</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>遍历数组、集合</p><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>要遍历的集合或数组的类型 临时变量 <span class="token operator">:</span> 要遍历的集合或数组变量<span class="token punctuation">)</span> <span class="token punctuation">{</span>操作临时变量的输出<span class="token punctuation">}</span></code></pre><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><blockquote><ul><li><p>针对集合来说，增强for循环的底层仍然是使用迭代器</p><ul><li><p>增强for循环的执行过程中，是将集合或数组元素中的元素一次赋值给临时变量</p><p>注意：循环体中对临时变量的修改可能</p></li></ul></li></ul></blockquote><blockquote><p>  不会导致原有集合或数组中元素的修改</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面试 </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合框架-2.0-Collection中的常用方法</title>
      <link href="/2024/04/15/ji-he-kuang-jia-2.0-collection-zhong-de-chang-yong-fang-fa/"/>
      <url>/2024/04/15/ji-he-kuang-jia-2.0-collection-zhong-de-chang-yong-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="常用方法：（Collection中定义了15个抽象方法）"><a href="#常用方法：（Collection中定义了15个抽象方法）" class="headerlink" title="常用方法：（Collection中定义了15个抽象方法）"></a><strong>常用方法：（Collection中定义了15个抽象方法）</strong></h1><pre class="language-java" data-language="java"><code class="language-java"><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span> coll<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">containsAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span> coll<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">retainAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span> coll<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span> coll<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="集合与数组之间的转换"><a href="#集合与数组之间的转换" class="headerlink" title="集合与数组之间的转换"></a><strong>集合与数组之间的转换</strong></h1><p><strong>集合</strong> —&gt; <strong>数组</strong>：<code>toArray()</code><br><strong>数组</strong> —&gt; <strong>集合</strong>：调用Arrays的静态方法<code>asList(Object ... objs)</code></p><h1 id="向Collection中添加元素的要求："><a href="#向Collection中添加元素的要求：" class="headerlink" title="向Collection中添加元素的要求："></a><strong>向Collection中添加元素的要求：</strong></h1><p>要求元素所属的类一定要重写<code>equals()</code>!<br>原因：<br>因为Collection中的相关方法（例如：<code>contains()</code>/<code>remove()</code>）在使用时，要调用元素所在类的<code>equals()</code></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面试 </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础1.0</title>
      <link href="/2024/04/15/java-ji-chu-1.0/"/>
      <url>/2024/04/15/java-ji-chu-1.0/</url>
      
        <content type="html"><![CDATA[<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="在Java中，标识符和关键字的区别是什么？"><a href="#在Java中，标识符和关键字的区别是什么？" class="headerlink" title="在Java中，标识符和关键字的区别是什么？"></a>在Java中，标识符和关键字的区别是什么？</h2><p>在编写程序的过程中，需要大量地为程序、类、变量、方法等取名字，于是就有了<strong>标识符</strong>，简单来说<strong>标识符就是一个名字</strong></p><p>而有一些标识符，Java语言为其赋予了特殊的含义，只能用于特定的地方，这些特殊的标识符就是关键字，<strong>关键字就是被赋予特殊含义的标识符</strong></p><h2 id="Java语言的关键字"><a href="#Java语言的关键字" class="headerlink" title="Java语言的关键字"></a>Java语言的关键字</h2><table><thead><tr><th>分类</th><th>关键字</th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>访问控制</td><td>private</td><td>protected</td><td>public</td><td></td><td></td><td></td><td></td></tr><tr><td>类、方法和变量修饰符</td><td>abstract</td><td>class</td><td>extends</td><td>final</td><td>implements</td><td>interface</td><td>native</td></tr><tr><td></td><td>new</td><td>static</td><td>strictfp</td><td>synchronized</td><td>transient</td><td>volatile</td><td>enum</td></tr><tr><td>程序控制</td><td>break</td><td>continue</td><td>return</td><td>do</td><td>while</td><td>if</td><td>else</td></tr><tr><td></td><td>for</td><td>instanceof</td><td>switch</td><td>case</td><td>default</td><td>assert</td><td></td></tr><tr><td>错误处理</td><td>try</td><td>catch</td><td>throw</td><td>throws</td><td>finally</td><td></td><td></td></tr><tr><td>包相关</td><td>import</td><td>package</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>基本类型</td><td>boolean</td><td>byte</td><td>char</td><td>double</td><td>float</td><td>int</td><td>long</td></tr><tr><td></td><td>short</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>变量引用</td><td>super</td><td>this</td><td>void</td><td></td><td></td><td></td><td></td></tr><tr><td>保留字</td><td>goto</td><td>const</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><blockquote><p>  <code>default</code>这个关键字很特殊，既属于程序控制，也属于类，方法和变量修饰符，还属于访问控制</p><ul><li>在程序控制中，当在<code>switch</code>中匹配不到任何情况时，可以使用<code>default</code>来编写默认匹配的情况</li><li>在类，方法和变量修饰符中，从JDK8开始引入了默认方法，可以使用<code>default</code>关键字来定义一个方法的默认实现</li><li>在访问控制中，如果一个方法前没有任何修饰符，则默认会有一个修饰符<code>default</code>，但是这个修饰符加上了就会报错</li></ul></blockquote><h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><h2 id="Java中的几种基本数据类型？"><a href="#Java中的几种基本数据类型？" class="headerlink" title="Java中的几种基本数据类型？"></a>Java中的几种基本数据类型？</h2><p>在Java中有8中基本数据类型，分别为：</p><ul><li>6种数字类型<ul><li>4种整数型：byte、short、int、long</li><li>2种浮点型：float、double</li></ul></li><li>1种字符类型：char</li><li>1种布尔型：boolean</li></ul><p>String不算基本数据类型，它只代表一个类，属于引用类型，String默认值也是null</p><h3 id="8种基本数据类型"><a href="#8种基本数据类型" class="headerlink" title="8种基本数据类型"></a>8种基本数据类型</h3><table><thead><tr><th>基本类型</th><th>位数</th><th>字节</th><th>默认值</th><th>取值范围</th></tr></thead><tbody><tr><td>byte</td><td>8</td><td>1</td><td>0</td><td>-128~127</td></tr><tr><td>short</td><td>16</td><td>2</td><td>0</td><td>-32768（-2^15）~ 32767（2^15-1）</td></tr><tr><td>int</td><td>32</td><td>4</td><td>0</td><td>-2147483648 ~ 2147483647</td></tr><tr><td>long</td><td>64</td><td>8</td><td>0L</td><td>-9223372036854775808（-2^63） ~ 9223372036854775807（2^63 -1）</td></tr><tr><td>char</td><td>16</td><td>2</td><td>‘u0000’</td><td>0 ~ 65535（2^16 - 1）</td></tr><tr><td>float</td><td>32</td><td>4</td><td>0f</td><td>1.4E-45 ~ 3.4028235E38</td></tr><tr><td>double</td><td>64</td><td>8</td><td>0d</td><td>4.9E-324 ~ 1.7976931348623157E308</td></tr><tr><td>boolean</td><td>1</td><td></td><td>false</td><td>true、false</td></tr></tbody></table><blockquote><p>  为什么像<code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code>能表示的最大正数都减1了？</p><p>  因为在二进制补码表示法中，最高位是用来表示符号的（0表示正数，1表示负数），其余位数表示数值部分，所以如果我们要表示最大的正数，就需要把除了最高位之外的所有位都设为1，如果我们再加1，就会导致溢出，变成一个负数</p></blockquote><blockquote><p>  对于<code>boolean</code>，官方文档并未明确定义，其依赖于JVM厂商的具体实现，逻辑上的理解是占用1位，但是实际中会考虑计算机高效存储因素，另外Java的每种基本类型所占存储空间的大小不会像其他大多数语言那样随机器硬件架构的变化而变化，这种所占存储空间大小的不变性是Java程序比其他大多数语言编写的程序更具可移植性的原因之一</p></blockquote><blockquote><p>  <strong>Considerations</strong></p><ol><li>Java里使用<code>long</code>类型的数据一定要在数值后面加上<strong>L</strong>，否则将作为整型解析</li><li><code>char a = 'h'</code>：单引号，<code>String a = "hello"</code>：双引号</li></ol></blockquote><h2 id="基本类型和包装类型的区别？"><a href="#基本类型和包装类型的区别？" class="headerlink" title="基本类型和包装类型的区别？"></a>基本类型和包装类型的区别？</h2><ol><li><strong>用途</strong>：除了定义一些常量和局部变量之外，我们在其他地方比如方法参数、对象属性中很少会使用基本类型来定义变量，并且，包装类型可以用于泛型，而基本类型不可以</li><li><strong>存储方式</strong>：<ul><li><strong>基本数据类型的局部变量</strong>都存放在Java虚拟机<strong>栈</strong>中的局部变量表中</li><li><strong>基本数据类型的成员变量</strong>（未被<code>static</code>修饰）存放在Java虚拟机的<strong>堆</strong>中</li><li><strong>包装类型</strong>属于对象类型，我们知道几乎所有对象实例都存在于<strong>堆</strong>中</li></ul></li><li><strong>占用空间</strong>：相比于包装类型（对象类型），基本数据类型占用的空间往往非常小</li><li><strong>默认值</strong>：成员变量包装类不赋值就是<code>null</code>，基本类型有默认值且不是<code>null</code></li><li><strong>比较方式</strong><ul><li>对于基本数据类型来说，<code>==</code>比较的是值</li><li>对于包装数据类型来说，<code>==</code>比较的是对象的内存地址</li><li>所有整型包装类之间值得比较，全部使用<code>equals()</code>方法</li></ul></li></ol><blockquote><p>  <strong>为什么说几乎所有对象实例都存在于堆中呢？</strong></p><p>  因为<strong>HotSpot</strong>虚拟机引入了<strong>JIT</strong>优化之后，会对对象进行逃逸分析，如果发现某一个对象并没有逃逸到方法外部，那么就可能通过标量替换来实现栈上分配，从而避免堆上分配内存</p></blockquote><blockquote><p>  <strong>HotSpot</strong>：JVM规范的一种实现，除了HotSpot之外还有J9 VM、Zing VM、JRockit VM等JVM</p><p>  <strong>JIT</strong>（Just in Time Compilation）编译器：属于运行时编译，当JIT编译器完成第一次编译后，其会将字节码对应的机器码保存下来，下次可以直接使用</p><ul><li><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404152216827.png" alt="image-20240415221610774"></li></ul></blockquote><blockquote><p>  <strong>Considerations</strong></p><p>  <strong>基本数据类型存放在栈中是一个很常见的误区！</strong>基本数据类型的存储位置取决于它们的作用域和声明方式，如果它们是局部变量，那么就会存放在栈中，如果它们是成员变量，那么就会存放在堆中</p>  <pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token comment">// 成员变量，存放在堆中</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment">// 被 static 修饰，也存放在堆中，但属于类，不属于对象</span>    <span class="token comment">// JDK1.7 静态变量从永久代移动了 Java 堆中</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 局部变量，存放在栈中</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span> <span class="token comment">// 编译错误，不能在方法中使用 static 修饰局部变量</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></blockquote><h2 id="包装类型的缓存机制？"><a href="#包装类型的缓存机制？" class="headerlink" title="包装类型的缓存机制？"></a>包装类型的缓存机制？</h2><ul><li><p>Java基本数据类型的包装类型的大部分都用到了缓存机制来提升性能</p></li><li><p><code>Byte</code>、<code>Short</code>、<code>Integer</code>、<code>Long</code>这四种包装类默认创建了数组[-128, 127]的相应类型的缓存数据</p><ul><li><p><code>Integer</code>缓存源码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">IntegerCache</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> high<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> cache<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token comment">// high value may be configured by property</span>        <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> integerCacheHighPropValue <span class="token operator">=</span>            sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span><span class="token constant">VM</span><span class="token punctuation">.</span><span class="token function">getSavedProperty</span><span class="token punctuation">(</span><span class="token string">"java.lang.Integer.IntegerCache.high"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>integerCacheHighPropValue <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>integerCacheHighPropValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                i <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// Maximum array size is Integer.MAX_VALUE</span>                h <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token operator">-</span>low<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span> <span class="token class-name">NumberFormatException</span> nfe<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// If the property cannot be parsed into an int, ignore it.</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        high <span class="token operator">=</span> h<span class="token punctuation">;</span>        cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> low<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> cache<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>            cache<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span>        <span class="token keyword">assert</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>high <span class="token operator">&gt;=</span> <span class="token number">127</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * Returns an {@code Integer} instance representing the specified * {@code int} value.  If a new {@code Integer} instance is not * required, this method should generally be used in preference to * the constructor {@link #Integer(int)}, as this method is likely * to yield significantly better space and time performance by * caching frequently requested values. * * This method will always cache values in the range -128 to 127, * inclusive, and may cache other values outside of this range. * * @param  i an {@code int} value. * @return an {@code Integer} instance representing {@code i}. * @since  1.5 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>high<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p><code>Character</code>创建了数值在[0, 127]范围的缓存数据</p><ul><li><p><code>Character</code>缓存源码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CharacterCache</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">CharacterCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Character</span> cache<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Character</span><span class="token punctuation">[</span><span class="token number">127</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cache<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Character</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * Returns a &lt;tt&gt;Character&lt;/tt&gt; instance representing the specified * &lt;tt&gt;char&lt;/tt&gt; value. * If a new &lt;tt&gt;Character&lt;/tt&gt; instance is not required, this method * should generally be used in preference to the constructor * {@link #Character(char)}, as this method is likely to yield * significantly better space and time performance by caching * frequently requested values. * * This method will always cache values in the range {@code * '\u005Cu0000'} to {@code '\u005Cu007F'}, inclusive, and may * cache other values outside of this range. * * @param  c a char value. * @return a &lt;tt&gt;Character&lt;/tt&gt; instance representing &lt;tt&gt;c&lt;/tt&gt;. * @since  1.5 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Character</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;=</span> <span class="token number">127</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// must cache</span>        <span class="token keyword">return</span> <span class="token class-name">CharacterCache</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Character</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p><code>Boolean</code>直接返回<code>TRUE</code> or <code>FALSE</code></p><ul><li><p><code>Boolean</code>缓存源码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Returns a {@code Boolean} instance representing the specified * {@code boolean} value.  If the specified {@code boolean} value * is {@code true}, this method returns {@code Boolean.TRUE}; * if it is {@code false}, this method returns {@code Boolean.FALSE}. * If a new {@code Boolean} instance is not required, this method * should generally be used in preference to the constructor * {@link #Boolean(boolean)}, as this method is likely to yield * significantly better space and time performance. * * @param  b a boolean value. * @return a {@code Boolean} instance representing {@code b}. * @since  1.4 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Boolean</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>b <span class="token operator">?</span> <span class="token constant">TRUE</span> <span class="token operator">:</span> <span class="token constant">FALSE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p>如果超出对应范围仍然会去创建新的对象，缓存的范围区间的大小只是在性能和资源之间的权衡</p></li><li><p>两种浮点型的包装类<code>Float</code>、<code>Double</code>并没有实现缓存机制</p></li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> i1 <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> i2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1 <span class="token operator">==</span> i2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上述代码中，第一行会发生自动装箱，等价于<code>Integer i1 = Integer.valueOf(40);</code>，因此<code>i1</code>这个变量直接使用的是缓存中的对象，而<code>Integer i2 = new Integer(40);</code>会直接创建新的对象，因此输出的结果为<code>false</code></p><blockquote><p>  <strong>所有整型包装类对象之间值的比较，全部使用equals()方法进行比较</strong></p><p>  说明：对于Integer var = ？在[-128, 127]之间的赋值，Integer对象是在IntegerCache.cache产生，会复用已有对象，在此区间内的Integer值可以直接使用<code>==</code>进行判断，但是在这个区间外的所有数据，都会在堆上产生，并不会复用已有对象，此乃大坑，推荐使用equals()方法进行判断</p></blockquote><h2 id="自动装箱与自动拆箱？原理？"><a href="#自动装箱与自动拆箱？原理？" class="headerlink" title="自动装箱与自动拆箱？原理？"></a>自动装箱与自动拆箱？原理？</h2><p>什么是自动拆装箱？</p><ul><li>装箱：将基本数据类型用他们对应的引用类型包装起来</li><li>拆箱：将包装类型转换为基本数据类型</li></ul><p>原理：</p><ul><li>自动装箱调用了包装类的<code>valueOf()</code>方法<ul><li><code>Integer i = 10</code>等价于<code>Integer i = Integer.valueOf(10)</code></li></ul></li><li>自动拆箱调用了包装类<code>xxxValue()</code>方法<ul><li><code>int n = i</code>等价于<code>int n = i.intValue();</code></li></ul></li></ul><h2 id="为什么浮点型运算的时候会有精度丢失的风险？"><a href="#为什么浮点型运算的时候会有精度丢失的风险？" class="headerlink" title="为什么浮点型运算的时候会有精度丢失的风险？"></a>为什么浮点型运算的时候会有精度丢失的风险？</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">float</span> a <span class="token operator">=</span> <span class="token number">2.0f</span> <span class="token operator">-</span> <span class="token number">1.9f</span><span class="token punctuation">;</span><span class="token keyword">float</span> b <span class="token operator">=</span> <span class="token number">1.8f</span> <span class="token operator">-</span> <span class="token number">1.7f</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0.100000024</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0.099999905</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span></code></pre><p>和计算机保存浮点数的机制有很大的关系，计算机是二进制的，而且计算机在表示一个数字时，宽度是有限的，无限循环的小数存储在计算机时，只能被截断，因此就会导致小数精度发生损失的情况，这也就是为什么浮点数没有办法用二进制精度表示</p><h2 id="怎么解决浮点数运算的精度丢失问题？"><a href="#怎么解决浮点数运算的精度丢失问题？" class="headerlink" title="怎么解决浮点数运算的精度丢失问题？"></a>怎么解决浮点数运算的精度丢失问题？</h2><p><code>BigDecimal</code>可以实现对浮点数的运算，不会造成精度丢失，通常情况下，大部分需要浮点数精确运算结果的业务场景（涉及到钱的场景）都是通过<code>BigDecimal</code>来做的</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">BigDecimal</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BigDecimal</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"0.9"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BigDecimal</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"0.8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BigDecimal</span> x <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BigDecimal</span> y <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 0.1 */</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 0.1 */</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* true */</span></code></pre><h2 id="超过long整型的数据应该如何表示？"><a href="#超过long整型的数据应该如何表示？" class="headerlink" title="超过long整型的数据应该如何表示？"></a>超过long整型的数据应该如何表示？</h2><p>基本数据类型都有一个表达范围，如果超过这个范围就会有数值溢出的风险</p><p>在Java中，64位long整型是最大的整数类型</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -9223372036854775808</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></code></pre><p><code>BigInteger</code>内部使用<code>int[]</code>数组来存储任意大小的整型数据</p><p>相对于常规整数类型的运算来说，<code>BigInteger</code>运算的效率会相对较低</p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="成员变量和局部变量的区别？"><a href="#成员变量和局部变量的区别？" class="headerlink" title="成员变量和局部变量的区别？"></a>成员变量和局部变量的区别？</h2><ul><li><strong>语法形式</strong><ul><li>成员变量是属于类的，局部变量是在代码块或者方法中定义的变量或是方法的参数</li><li>成员变量可以被<code>public</code>、<code>private</code>、<code>static</code>等修饰符所修饰，而局部变量不能被访问控制修饰符以及<code>static</code>修饰</li><li>成员变量和局部变量都可以被<code>final</code>修饰</li></ul></li><li><strong>存储方式</strong><ul><li>如果成员变量被<code>static</code>修饰，则该成员变量是<strong>属于类</strong>的，如果没有被<code>static</code>修饰，则该成员变量是<strong>属于实例</strong>的</li><li>对象存在于堆内存，局部变量存在于栈内存</li></ul></li><li><strong>生存时间</strong><ul><li>成员变量是对象的一部分，它随着对象的创建而存在，</li><li>局部变量随着方法的调用而自动生成，随着方法调用的结束而消亡</li></ul></li><li><strong>默认值</strong><ul><li>成员变量如果没有被赋予初始值，则会自动以类型的默认值而赋值（一种情况例外：被<code>final</code>修饰的成员变量也必须显式赋值）</li><li>局部变量不会自动赋值</li></ul></li></ul><p>成员变量&amp;局部变量代码演示</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VariableExample</span> <span class="token punctuation">{</span>    <span class="token comment">// 成员变量</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment">// 在方法中的局部变量</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 在栈中分配的局部变量</span>        <span class="token keyword">int</span> number1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment">// 在栈中分配的局部变量</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 有形参的方法中的局部变量</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 在栈中分配的局部变量</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> number <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 构造器中的局部变量</span>    <span class="token keyword">public</span> <span class="token class-name">VariableExample</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 对成员变量进行赋值</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token comment">// 对成员变量进行赋值</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token comment">// 在栈中分配的局部变量</span>        <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token comment">// 在栈中分配的局部变量</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"Hello, "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">".!"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="为什么成员变量有默认值？"><a href="#为什么成员变量有默认值？" class="headerlink" title="为什么成员变量有默认值？"></a>为什么成员变量有默认值？</h3><ol><li>如果没有默认值，变量存储的是内存地址对应的任意随机值，程序读取该值运行会出现意外</li><li>默认值设置有两种方式：手动和自动，根据第一点，没有手动赋值就一定要自动赋值，成员变量在运行时可以借助反射等方法手动赋值，而局部变量不行</li><li>对于编译器（javac）来说，局部变量有没有赋值很好判断，可以直接报错，而成员变量可能是运行时赋值，无法判断，误报“没默认值”又会影响用户体验，所以采取自动赋默认值</li></ol><h2 id="静态变量有什么作用？"><a href="#静态变量有什么作用？" class="headerlink" title="静态变量有什么作用？"></a>静态变量有什么作用？</h2><p>静态变量就是被<code>static</code>关键字修饰的变量，其被类的所有实例共享，无论一个类创建了多少对象，他们都共享同一份静态变量，即：<strong>静态变量只会被分配一次内存，即使创建多个对象，这样可以节省内存</strong></p><p>静态变量通过类名来访问，例如：<code>StaticVariableExample.staticVar</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticVariableExample</span> <span class="token punctuation">{</span>    <span class="token comment">// 静态变量</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> staticVar <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>但是如果变量被<code>private</code>关键字修饰就无法这样访问了</p><p>通常情况下，静态变量会被<code>final</code>关键字修饰成常量</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConstantVariableExample</span> <span class="token punctuation">{</span>    <span class="token comment">// 常量</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> constantVar <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="字符型常量和字符串常量的区别？"><a href="#字符型常量和字符串常量的区别？" class="headerlink" title="字符型常量和字符串常量的区别？"></a>字符型常量和字符串常量的区别？</h2><ul><li><strong>形式</strong><ul><li>字符常量是单引号引起的一个字符</li><li>字符串常量是双引号引起的<strong>0个</strong>或若干个字符</li></ul></li><li>含义<ul><li>字符常量相当于一个整型值（ASCII码），可以参加表达式运算</li><li>字符串常量代表一个地址值（该字符串在内存中存放的位置）</li></ul></li><li>占内存大小<ul><li>字符常量：2个字节</li><li>字符串常量：若干个字节</li></ul></li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringExample</span> <span class="token punctuation">{</span><span class="token comment">// 字符型常量</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">char</span> <span class="token constant">LETTER_A</span> <span class="token operator">=</span> <span class="token char">'A'</span><span class="token punctuation">;</span>    <span class="token comment">// 字符串常量</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">GREETING_MESSAGE</span> <span class="token operator">=</span> <span class="token string">"Hello, world!"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="静态方法为什么不能调用非静态成员？"><a href="#静态方法为什么不能调用非静态成员？" class="headerlink" title="静态方法为什么不能调用非静态成员？"></a>静态方法为什么不能调用非静态成员？</h2><p>和JVM有关，原因：</p><ol><li>静态方法是属于类的，在类加载的时候就会分配内存，可以通过类名直接访问。而非静态成员属于实例对象，只有在对象实例化之后才存在，需要通过类的实例对象去访问</li><li>在类的非静态成员不存在的时候静态方法已经存在了，此时调用在内存中还不存在的非静态成员，属于非法操作</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span><span class="token comment">// 定义一个字符型常量</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">char</span> <span class="token constant">LETTER_A</span> <span class="token operator">=</span> <span class="token char">'A'</span><span class="token punctuation">;</span>    <span class="token comment">// 定义一个字符串常量</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">GREETING_MESSAGE</span> <span class="token operator">=</span> <span class="token string">"Hello, world!"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 输出字符型常量的值</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字符型常量的值为："</span> <span class="token operator">+</span> <span class="token constant">LETTER_A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 输出字符串常量的值</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字符串常量的值为："</span> <span class="token operator">+</span> <span class="token constant">GREETING_MESSAGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="静态方法和实例方法有什么不同？"><a href="#静态方法和实例方法有什么不同？" class="headerlink" title="静态方法和实例方法有什么不同？"></a>静态方法和实例方法有什么不同？</h2><ol><li><strong>调用方式</strong><ul><li>在外部调用静态方法时，可以使用<code>类名.方法名</code>的方式，也可以使用<code>对象.方法名</code>的方式，而实例方法只有后者这一方式，即：<code>调用静态方法可以无需创建对象</code></li><li>一般不建议使用<code>对象.方法名</code>的方式来调用静态方法，这种方式非常容易造成混淆，静态方法不属于类的某个对象，而是属于这个类，因此一般建议使用前者来进行调用</li></ul></li><li><strong>访问类成员是否存在限制</strong><ul><li>静态方法在访问本类的成员时，只允许访问静态成员（静态成员变量和静态方法），不允许访问实例成员（实例成员变量和实例方法）</li><li>实例方法不存在上述限制</li></ul></li></ol><h2 id="重写和重载有什么区别？"><a href="#重写和重载有什么区别？" class="headerlink" title="重写和重载有什么区别？"></a>重写和重载有什么区别？</h2><blockquote><p>  重载：方法名相同，形参不同，方法可以根据输入的形参不同做出不同的处理</p><p>  重写：当子类继承父类时，形参一致，但是要在方法内做出别的操作时，需要通过重写来覆盖父类方法</p></blockquote><table><thead><tr><th>区别点</th><th>重载方法</th><th>重写方法</th></tr></thead><tbody><tr><td>发生范围</td><td>同一类</td><td>子类</td></tr><tr><td>形参列表</td><td>必须修改</td><td>一定不能修改</td></tr><tr><td>返回类型</td><td>可修改</td><td>子类方法返回值类型比父类方法的返回值类型更小或相等</td></tr><tr><td>异常</td><td>可修改</td><td>子类方法声明抛出的异常类应比父类抛出的异常类更小或相等</td></tr><tr><td>访问修饰符</td><td>可修改</td><td>一定不能做更严格的限制（可以降低限制）</td></tr><tr><td>发生阶段</td><td>编译期</td><td>运行期</td></tr></tbody></table><h2 id="可变形参？"><a href="#可变形参？" class="headerlink" title="可变形参？"></a>可变形参？</h2><p>允许在调用方法时传入不定长度的形参</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// ......</span><span class="token punctuation">}</span></code></pre><p><strong>可变形参只能作为形参列表的最后一个形参，可变形参的前面可以有也可以没有任何形参</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token class-name">String</span> arg1<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// ......</span><span class="token punctuation">}</span></code></pre><p>遇到方法重载时怎么办？会优先匹配固定形参的方法还是可变形参的方法？</p><p>答：优先匹配固定形参的方法</p><p><strong>此外，可变形参在编译后实际会被转换成一个数组</strong></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ-4.0-消息堆积</title>
      <link href="/2024/04/14/rocketmq-4.0-xiao-xi-dui-ji/"/>
      <url>/2024/04/14/rocketmq-4.0-xiao-xi-dui-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="消息堆积问题"><a href="#消息堆积问题" class="headerlink" title="消息堆积问题"></a>消息堆积问题</h1><p>一般认为单条队列消息差值&gt;=10w条的时候，就算堆积问题</p><h2 id="什么情况下出现消息堆积？"><a href="#什么情况下出现消息堆积？" class="headerlink" title="什么情况下出现消息堆积？"></a>什么情况下出现消息堆积？</h2><ol><li><p>生产者生产消息太快了</p><ul><li><p>增加消费者数量，但是消费者数量&lt;=队列数量</p></li><li><p>适当地设置最大的消费线程数量</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * consumeThreadNumber是怎么计算的？ * 线程池里面的最大核心线程数量（n是当前程序运行电脑的最大处理器数量）： *      IO密集型：2n *          读取数据、操作数据库等操作 *      CPU密集型：n或者n+1 *          用于计算、执行循环等操作 */</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@RocketMQMessageListener</span><span class="token punctuation">(</span>        topic <span class="token operator">=</span> <span class="token string">"backlogTopic"</span><span class="token punctuation">,</span>        consumerGroup <span class="token operator">=</span> <span class="token string">"backlog-consumer-group"</span><span class="token punctuation">,</span>        <span class="token comment">// 消息堆积的处理：适当地设置最大的消费线程数量（根据IO（2n）/CPU（n+1））</span>        consumeThreadNumber <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EBacklogListener1</span> <span class="token keyword">implements</span> <span class="token class-name">RocketMQListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是测试积压的第一个消费者："</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里的consumeThreadNumber是根据当前机器的逻辑处理器来算出的，就是公式里的n</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404142157692.png" alt="image-20240414215724613"> </p></li><li><p>动态扩容队列数量，从而增加消费者数量</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404142158343.png" alt="image-20240414215817311"> </p><blockquote><p>  注意：扩容可以在消息没消费完的时候进行，但是缩容不行，缩容只能在消息消费完后进行设置，不然会导致消息丢失不会被消费</p></blockquote></li></ul></li><li><p>消费者消费出现问题</p><ul><li>排查消费者程序的问题</li></ul></li></ol><h1 id="跳过堆积"><a href="#跳过堆积" class="headerlink" title="跳过堆积"></a>跳过堆积</h1><p>当消息出现堆积问题且不想处理的话可以对其进行跳过堆积处理（不推荐）</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404142159547.png" alt="image-20240414215930529"> </p>]]></content>
      
      
      <categories>
          
          <category> RocketMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> RocketMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ-3.0-SpringBoot集成RocketocketMQ</title>
      <link href="/2024/04/13/rocketmq-3.0-springboot-ji-cheng-rocketocketmq/"/>
      <url>/2024/04/13/rocketmq-3.0-springboot-ji-cheng-rocketocketmq/</url>
      
        <content type="html"><![CDATA[<h1 id="RocketMQ集成SpringBoot"><a href="#RocketMQ集成SpringBoot" class="headerlink" title="RocketMQ集成SpringBoot"></a>RocketMQ集成SpringBoot</h1><p>我们创建两个SpringBoot项目，一个模拟生产者方的服务器，一个模拟消费者方的服务器</p><p>生产者方的application.yml文件</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">rocketmq</span><span class="token punctuation">:</span>    <span class="token key atrule">name-server</span><span class="token punctuation">:</span> 192.168.183.131<span class="token punctuation">:</span><span class="token number">9876</span>    <span class="token key atrule">producer</span><span class="token punctuation">:</span>        <span class="token key atrule">group</span><span class="token punctuation">:</span> boot<span class="token punctuation">-</span>producer<span class="token punctuation">-</span>group</code></pre><p>消费者方的application.yml文件</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span><span class="token key atrule">rocketmq</span><span class="token punctuation">:</span>    <span class="token key atrule">name-server</span><span class="token punctuation">:</span> 192.168.183.131<span class="token punctuation">:</span><span class="token number">9876</span>    <span class="token comment"># 一个boot项目中可以写很多个消费者程序，但是在一般开发中，一个boot项目只对应一个消费者</span></code></pre><h1 id="生产者发送消息"><a href="#生产者发送消息" class="headerlink" title="生产者发送消息"></a>生产者发送消息</h1><p>MsgModel</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MsgModel</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> orderSn<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> userId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span><span class="token comment">// 下单 短信 物流</span><span class="token punctuation">}</span></code></pre><h2 id="通过RocketMQTemplate发送同步、异步、单向、延迟、顺序消息"><a href="#通过RocketMQTemplate发送同步、异步、单向、延迟、顺序消息" class="headerlink" title="通过RocketMQTemplate发送同步、异步、单向、延迟、顺序消息"></a>通过RocketMQTemplate发送同步、异步、单向、延迟、顺序消息</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// RocketMQTemplate</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">RocketMQTemplate</span> rocketMQTemplate<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 同步消息</span>    rocketMQTemplate<span class="token punctuation">.</span><span class="token function">syncSend</span><span class="token punctuation">(</span><span class="token string">"bootTestTopic"</span><span class="token punctuation">,</span> <span class="token string">"我是boot的一个消息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 异步消息</span>    rocketMQTemplate<span class="token punctuation">.</span><span class="token function">asyncSend</span><span class="token punctuation">(</span><span class="token string">"bootTestTopic"</span><span class="token punctuation">,</span> <span class="token string">"我是boot的一个异步消息"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SendCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token class-name">SendResult</span> sendResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onException</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"失败："</span> <span class="token operator">+</span> throwable<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 单向消息</span>    rocketMQTemplate<span class="token punctuation">.</span><span class="token function">sendOneWay</span><span class="token punctuation">(</span><span class="token string">"bootOnewayTopic"</span><span class="token punctuation">,</span> <span class="token string">"我是boot的一个单向消息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> message <span class="token operator">=</span> <span class="token class-name">MessageBuilder</span><span class="token punctuation">.</span><span class="token function">withPayload</span><span class="token punctuation">(</span><span class="token string">"我是boot的一个延迟消息"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 延迟消息</span>    rocketMQTemplate<span class="token punctuation">.</span><span class="token function">syncSend</span><span class="token punctuation">(</span><span class="token string">"bootMsTopic"</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 顺序消息</span>    <span class="token comment">// 发送者方 需要将一组消息都发在同一个队列中</span>    <span class="token comment">// 消费者方 需要单线程消费</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MsgModel</span><span class="token punctuation">&gt;</span></span> msgModels <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">MsgModel</span><span class="token punctuation">(</span><span class="token string">"qwer"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"下单"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">MsgModel</span><span class="token punctuation">(</span><span class="token string">"qwer"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"短信"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">MsgModel</span><span class="token punctuation">(</span><span class="token string">"qwer"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"物流"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">MsgModel</span><span class="token punctuation">(</span><span class="token string">"zxcv"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"下单"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">MsgModel</span><span class="token punctuation">(</span><span class="token string">"zxcv"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"短信"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">MsgModel</span><span class="token punctuation">(</span><span class="token string">"zxcv"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"物流"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    msgModels<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>msgModel <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token comment">// 发送顺序消息 一般都是以json的格式进行处理</span>        rocketMQTemplate<span class="token punctuation">.</span><span class="token function">syncSendOrderly</span><span class="token punctuation">(</span><span class="token string">"bootOrderlyTopic"</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>msgModel<span class="token punctuation">)</span><span class="token punctuation">,</span> msgModel<span class="token punctuation">.</span><span class="token function">getOrderSn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="发送带Tag的消息"><a href="#发送带Tag的消息" class="headerlink" title="发送带Tag的消息"></a>发送带Tag的消息</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 带tag的消息 * * @throws Exception */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">tagKeyTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token comment">// topic:tag</span><span class="token comment">//        rocketMQTemplate.syncSend("bootTagTopic:tagA", "我是一个带tag的消息");</span><span class="token comment">//        rocketMQTemplate.syncSend("bootTagTopic:3", "我是一个带tag的消息 a = 3");</span>    <span class="token comment">// key是携带在消息头里的</span>    <span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> message <span class="token operator">=</span> <span class="token class-name">MessageBuilder</span><span class="token punctuation">.</span><span class="token function">withPayload</span><span class="token punctuation">(</span><span class="token string">"我是一个带key的消息"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token class-name">RocketMQHeaders</span><span class="token punctuation">.</span><span class="token constant">KEYS</span><span class="token punctuation">,</span> <span class="token string">"qwertyasdf"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rocketMQTemplate<span class="token punctuation">.</span><span class="token function">syncSend</span><span class="token punctuation">(</span><span class="token string">"bootKeyTopic:tagA"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="测试消息消费模式"><a href="#测试消息消费模式" class="headerlink" title="测试消息消费模式"></a>测试消息消费模式</h2><p>消息消费模式：</p><ul><li>集群模式</li><li>广播模式</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 测试消息消费模式 集群模式、广播模式 * * @throws Exception */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">modeTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        rocketMQTemplate<span class="token punctuation">.</span><span class="token function">syncSend</span><span class="token punctuation">(</span><span class="token string">"modeTopic"</span><span class="token punctuation">,</span> <span class="token string">"我是第"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"条消息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="消费者消费信息"><a href="#消费者消费信息" class="headerlink" title="消费者消费信息"></a>消费者消费信息</h1><p>集成了SpringBoot后，生产者方发送消息几乎都是大差不差，真正有区别的是消费者方</p><h2 id="消费同步、异步、单向、延迟消息"><a href="#消费同步、异步、单向、延迟消息" class="headerlink" title="消费同步、异步、单向、延迟消息"></a>消费同步、异步、单向、延迟消息</h2><p>ABootSimpleMsgListener</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@RocketMQMessageListener</span><span class="token punctuation">(</span>        topic <span class="token operator">=</span> <span class="token string">"bootTestTopic"</span><span class="token punctuation">,</span>        consumerGroup <span class="token operator">=</span> <span class="token string">"boot-test-consumer-group"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ABootSimpleMsgListener</span> <span class="token keyword">implements</span> <span class="token class-name">RocketMQListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 消费者方法     * 如果泛型制定了固定的类型 那么消息体就是我们的参数     *     * @param message 方法没有报错就证明消息被签收了     * 报错了就是拒收，会重试     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">MessageExt</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>消费单向消息和延迟消息同理</p><h2 id="消费顺序消息"><a href="#消费顺序消息" class="headerlink" title="消费顺序消息"></a>消费顺序消息</h2><p>在非SpringBoot发送RocketMQ消息里面有提及过并发模式和顺序模式：</p><ul><li>MessageListenerConcurrently 并发模式 多线程的 重试16次</li><li>MessageListenerOrderly 顺序模式 单线程</li></ul><p>同理的，在集成了SpringBoot后写法如下</p><p>ConsumeMode：</p><ul><li>CONCURRENTLY</li><li>ORDERLY</li></ul><p>BOrderMsgListener</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@RocketMQMessageListener</span><span class="token punctuation">(</span>        topic <span class="token operator">=</span> <span class="token string">"bootOrderlyTopic"</span><span class="token punctuation">,</span>        consumerGroup <span class="token operator">=</span> <span class="token string">"boot-orderly-consumer-group"</span><span class="token punctuation">,</span>        consumeMode <span class="token operator">=</span> <span class="token class-name">ConsumeMode</span><span class="token punctuation">.</span><span class="token constant">ORDERLY</span><span class="token punctuation">,</span> <span class="token comment">// 顺序消费模式 单线程</span>        maxReconsumeTimes <span class="token operator">=</span> <span class="token number">5</span> <span class="token comment">// 消费重试的次数</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BOrderlyMsgListener</span> <span class="token keyword">implements</span> <span class="token class-name">RocketMQListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">MessageExt</span> messageExt<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MsgModel</span> msgModel <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>messageExt<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">MsgModel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msgModel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="消费带Tag的消息"><a href="#消费带Tag的消息" class="headerlink" title="消费带Tag的消息"></a>消费带Tag的消息</h2><p>注意一下，在selectorExpression里面的||，是并的意思，不是或，意为消费带tagA和tagB的消息</p><p>CTagMsgListener</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@RocketMQMessageListener</span><span class="token punctuation">(</span>        topic <span class="token operator">=</span> <span class="token string">"bootKeyTopic"</span><span class="token punctuation">,</span><span class="token comment">//        topic = "bootTagTopic",</span>        consumerGroup <span class="token operator">=</span> <span class="token string">"boot-tag-consumer-group"</span><span class="token punctuation">,</span>        selectorType <span class="token operator">=</span> <span class="token class-name">SelectorType</span><span class="token punctuation">.</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token comment">// tag过滤模式</span>        selectorExpression <span class="token operator">=</span> <span class="token string">"tagA || tagB"</span><span class="token comment">//        selectorType = SelectorType.SQL92, // sql92过滤模式，官方默认不支持sql92，要去yml配置文件开启（不常用，了解即可）</span><span class="token comment">//        selectorExpression = "a &lt; 5" // broker.conf中开启enablePropertyFilter=true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CTagMsgListener</span> <span class="token keyword">implements</span> <span class="token class-name">RocketMQListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">MessageExt</span> messageExt<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>messageExt<span class="token punctuation">.</span><span class="token function">getKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>messageExt<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="消费模式"><a href="#消费模式" class="headerlink" title="消费模式"></a>消费模式</h1><h2 id="CLUSTERING"><a href="#CLUSTERING" class="headerlink" title="CLUSTERING"></a>CLUSTERING</h2><p>集群模式，负载均衡模式，也是messageModel默认的模式</p><p>在此模式下，同一消费者组中的消费者会对所有的消息进行负载均衡消费，即多个消费者交替消费同一个主题里面的消息</p><p>例如：往某一主题发送了十条消息，则在该模式下，所有的消费者会均摊消费这十条消息。</p><p>DConsumerClustering1</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * [CLUSTERING] 集群模式下，队列会被消费者分摊，队列数量&gt;=消费者数量，RocketMQ服务器会记录消息的消费位点并处理 * BROADCASTING 广播模式下，消息会被每一个消费者都处理一次，RcoketMQ服务器不会记录消费位点，也不会重试 */</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@RocketMQMessageListener</span><span class="token punctuation">(</span>        topic <span class="token operator">=</span> <span class="token string">"modeTopic"</span><span class="token punctuation">,</span>        consumerGroup <span class="token operator">=</span> <span class="token string">"mode-consumer-group-a"</span><span class="token punctuation">,</span>        <span class="token comment">// messageModel默认是集群模式（CLUSTERING）负载均衡</span>        messageModel <span class="token operator">=</span> <span class="token class-name">MessageModel</span><span class="token punctuation">.</span><span class="token constant">CLUSTERING</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DConsumerClustering1</span> <span class="token keyword">implements</span> <span class="token class-name">RocketMQListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是mode-consumer-group-a组的第一个消费者: "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>DConsumerClustering2</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@RocketMQMessageListener</span><span class="token punctuation">(</span>        topic <span class="token operator">=</span> <span class="token string">"modeTopic"</span><span class="token punctuation">,</span>        consumerGroup <span class="token operator">=</span> <span class="token string">"mode-consumer-group-a"</span><span class="token punctuation">,</span>        <span class="token comment">// messageModel默认是集群模式（CLUSTERING）负载均衡</span>        messageModel <span class="token operator">=</span> <span class="token class-name">MessageModel</span><span class="token punctuation">.</span><span class="token constant">CLUSTERING</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DConsumerClustering2</span> <span class="token keyword">implements</span> <span class="token class-name">RocketMQListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是mode-consumer-group-a组的第二个消费者: "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>DConsumerClustering3</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@RocketMQMessageListener</span><span class="token punctuation">(</span>        topic <span class="token operator">=</span> <span class="token string">"modeTopic"</span><span class="token punctuation">,</span>        consumerGroup <span class="token operator">=</span> <span class="token string">"mode-consumer-group-a"</span><span class="token punctuation">,</span>        messageModel <span class="token operator">=</span> <span class="token class-name">MessageModel</span><span class="token punctuation">.</span><span class="token constant">CLUSTERING</span> <span class="token comment">// 集群模式</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DConsumerClustering3</span> <span class="token keyword">implements</span> <span class="token class-name">RocketMQListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是mode-consumer-group-a组的第三个消费者: "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="BROADCASTING"><a href="#BROADCASTING" class="headerlink" title="BROADCASTING"></a>BROADCASTING</h2><p>广播模式，表示每个消费者都消费一遍订阅的主题的消息</p><p>例如：有五条消息，则每个消费者各都会消费五条，而不是一共消费五条</p><p>DConsumerBroadcasting1</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@RocketMQMessageListener</span><span class="token punctuation">(</span>        topic <span class="token operator">=</span> <span class="token string">"modeTopic"</span><span class="token punctuation">,</span>        consumerGroup <span class="token operator">=</span> <span class="token string">"mode-consumer-group-b"</span><span class="token punctuation">,</span>        messageModel <span class="token operator">=</span> <span class="token class-name">MessageModel</span><span class="token punctuation">.</span><span class="token constant">BROADCASTING</span> <span class="token comment">// 广播模式</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DConsumerBroadcasting1</span> <span class="token keyword">implements</span> <span class="token class-name">RocketMQListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是mode-consumer-group-b组的第一个消费者: "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>DConsumerBroadcasting2</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@RocketMQMessageListener</span><span class="token punctuation">(</span>        topic <span class="token operator">=</span> <span class="token string">"modeTopic"</span><span class="token punctuation">,</span>        consumerGroup <span class="token operator">=</span> <span class="token string">"mode-consumer-group-b"</span><span class="token punctuation">,</span>        messageModel <span class="token operator">=</span> <span class="token class-name">MessageModel</span><span class="token punctuation">.</span><span class="token constant">BROADCASTING</span> <span class="token comment">// 广播模式</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DConsumerBroadcasting2</span> <span class="token keyword">implements</span> <span class="token class-name">RocketMQListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是mode-consumer-group-b组的第二个消费者: "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>DConsumerBroadcasting3</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@RocketMQMessageListener</span><span class="token punctuation">(</span>        topic <span class="token operator">=</span> <span class="token string">"modeTopic"</span><span class="token punctuation">,</span>        consumerGroup <span class="token operator">=</span> <span class="token string">"mode-consumer-group-b"</span><span class="token punctuation">,</span>        messageModel <span class="token operator">=</span> <span class="token class-name">MessageModel</span><span class="token punctuation">.</span><span class="token constant">BROADCASTING</span> <span class="token comment">// 广播模式</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DConsumerBroadcasting3</span> <span class="token keyword">implements</span> <span class="token class-name">RocketMQListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是mode-consumer-group-b组的第三个消费者: "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> RocketMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> RocketMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sunshine+Moonlight串流</title>
      <link href="/2024/04/13/1.0-sunshine-moonlight-chuan-liu/"/>
      <url>/2024/04/13/1.0-sunshine-moonlight-chuan-liu/</url>
      
        <content type="html"><![CDATA[<h1 id="串流是什么？"><a href="#串流是什么？" class="headerlink" title="串流是什么？"></a>串流是什么？</h1><p>调用存储在其他设备上的文件，实时传输，来实现在本设备的实时播放，只要是调用不属于本地的视频、音乐、游戏，都属于串流</p><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><ol><li><p>主机（就是你的电脑）上安装sunshine</p><ul><li><p>sunshine在github的官方开源网址：<a href="https://github.com/LizardByte/Sunshine/releases">Releases · LizardByte/Sunshine (github.com)</a></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404131044468.png" alt="image-20240413104440422"> </p></li><li><p>登不上github的我把两个软件都放在了奶牛快传（app-nonRoot-release.apk是安卓版的moonlight）：</p><p><a href="https://cowtransfer.com/s/2794362b448849">https://cowtransfer.com/s/2794362b448849</a></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404151546944.png" alt="image-20240415154637919"> </p><p>下完之后记得删掉文件后面的(delete)</p></li></ul></li><li><p>手机或者你要串流到的设备上安装moonlight，安卓版的也在上面的链接里，iOS版的自行去AppStore搜索<code>Moonlight</code></p><ul><li><p>官方github开源网址：<a href="https://github.com/moonlight-stream">Moonlight Game Streaming Project (github.com)</a></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404131100683.png" alt="image-20240413110014622"></p></li></ul></li></ol><h1 id="Sunshine安装与配置"><a href="#Sunshine安装与配置" class="headerlink" title="Sunshine安装与配置"></a>Sunshine安装与配置</h1><p>安装sunshine的时候除了要留意一下它在电脑里的安装路径外，其他直接默认然后下一步就好，装好之后会看到这样一个图标：</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404131104715.png" alt="image-20240413110420693"> </p><p>右键，Open Sunshine，就会打开一个网页，第一次打开会显示如下内容：</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404131107538.png" alt="image-20240413110732510"> </p><p>根据个人喜好设置好用户名和密码之后进行登录就可以到这个页面进行Sunshine设置了</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404131108980.png" alt="image-20240413110858889"> </p><p>初始页面是英文的，可以在配置（Configuration）里面设置中文</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404131111456.png" alt="image-20240413111129441"> </p><p>非常人性化的Sunshine其实已经帮我们配置好了大部分的设置，我们只需小小的按照个人需求去配置即可</p><p>点击NetWork，将UPnP打开</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404131114451.png" alt="image-20240413111404433"> </p><p>UPnP就是方便端口转发的网络协议，可以让设备自动配置端口转发，同时要在路由器打开UPnP服务即可</p><p>如果有要使用IPV6进行串流的需要进行设置：</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404131117391.png" alt="image-20240413111705371"> </p><p>设置完之后记得<strong>保存</strong>，<strong>应用</strong>，不然配置不会生效</p><h1 id="Moonlight配置"><a href="#Moonlight配置" class="headerlink" title="Moonlight配置"></a>Moonlight配置</h1><p>Moonlight安装就不讲了，安卓版的直接在设备运行apk文件就行了，iOS更简单</p><p>下载后是这个东东</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404131055634.jpg" alt="6a23079ec3aa7b60b7364b5141e0248"> </p><p>打开Moonlight之后添加你的主机ip进去即可</p><p>主机ip的获取方式：</p><ol><li>在电脑上按<code>win</code>键+<code>r</code>键</li><li>输入<code>cmd</code>，按回车</li><li>在弹出的黑窗口中输入：<code>ipconfig</code></li><li>将ipv4地址输入到Moonlight中</li></ol><p>选择DESKTOP连接到电脑的桌面</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404131127998.png" alt="c42abd2d7ae7818e7f5d622ed6b0036"> </p><p>然后就可以开玩辣</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404131126631.png" alt="image-20240413112611239"> </p>]]></content>
      
      
      <categories>
          
          <category> 串流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 串流 </tag>
            
            <tag> Moonlight </tag>
            
            <tag> Sunshine </tag>
            
            <tag> Github开源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ-1.0-配置与启动RocketMQ</title>
      <link href="/2024/04/12/rocketmq-1.0-pei-zhi-yu-qi-dong-rocketmq/"/>
      <url>/2024/04/12/rocketmq-1.0-pei-zhi-yu-qi-dong-rocketmq/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么要使用RocketMQ？"><a href="#为什么要使用RocketMQ？" class="headerlink" title="为什么要使用RocketMQ？"></a>为什么要使用RocketMQ？</h1><ol><li>系统解耦，当新的模块进来时，可以做到代码改动最小。<strong>能够解耦</strong></li><li>设置流程缓冲池，可以让后端系统按照自身吞吐能力进行消费。<strong>能够削峰限流</strong></li><li>强弱依赖梳理能把非关键调用链路的操作异步化并提升整体系统的吞吐能力。<strong>能够异步</strong></li></ol><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote><p>  Rocket是面向消息的中间件（message-oriented middleware）</p></blockquote><blockquote><p>  是指利用<strong>高效可靠的消息传递机制进行与平台（跨平白）无关的数据交流</strong>，并基于数据通信来进行分布式系统的集成。</p></blockquote><blockquote><p>  通过提供<strong>消息传递和消息排队模型</strong>在分布式环境下提供应用解耦，弹性伸缩，冗余存储，流量削峰，异步通信，数据同步等。</p></blockquote><h1 id="RocketMQ中的概念"><a href="#RocketMQ中的概念" class="headerlink" title="RocketMQ中的概念"></a>RocketMQ中的概念</h1><ul><li>Producer：消息的生产者</li><li>Consumer：消息的消费者</li><li>Broker：暂存和传输消息的管道</li><li>NameServer：管理Broker，相当于Broker的注册中心，保留了Broker的信息</li><li>Queue：队列，消息存放的位置，一个Broker中可以有多个队列</li><li>Topic：主题，消息的分类</li><li>ProducerGroup：生产者组</li><li>ConsumerGroup：消费者组</li></ul><p><strong>消息发送的流程</strong></p><p>Producer询问NameServer，NameServer分配一个broker，然后Consumer也要询问NameServer，得到一个具体的broker，然后消费消息</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404131630150.jpg" alt="img"> </p><p><strong>消息的生产和消费</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404131631273.jpg" alt="img"> </p><h1 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><strong>RocketMQ下载地址</strong>:<a href="https://archive.apache.org/dist/rocketmq/4.9.2/rocketmq-all-4.9.2-bin-release.zip">https://archive.apache.org/dist/rocketmq/4.9.2/rocketmq-all-4.9.2-bin-release.zip</a></p><p>将压缩包放到Linux服务器后使用unzip解压</p><p>unzip安装命令：<code>yum install unzip</code></p><p>解压后进入目录：</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404131635733.png" alt="image-20240413163535717"> </p><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>为RocketMQ配置环境变量：<code>vim /etc/profile</code></p><p>在profile最后一行添加：<code>export NAMESRV_ADDR=localhost:9876</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404131637408.png" alt="image-20240413163735377"> </p><h2 id="修改nameServer运行脚本"><a href="#修改nameServer运行脚本" class="headerlink" title="修改nameServer运行脚本"></a>修改nameServer运行脚本</h2><p>进入bin目录修改runserver.sh文件，将Xms和Xmx改小</p><p><code>vim runserver.sh</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404131641407.png" alt="image-20240413164101376"> </p><p>上图为已经改好的配置</p><p>修改完后wq保存退出</p><h2 id="修改broker配置文件"><a href="#修改broker配置文件" class="headerlink" title="修改broker配置文件"></a>修改broker配置文件</h2><p>进入conf目录修改broker.conf文件</p><p><code>vim broker.conf</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404131643454.png" alt="image-20240413164332437"> </p><ul><li>namesrvAddr：nameSrver的地址，可以写localhost，因为nameServer和broker在一个服务器</li><li>autoCreateTopicEnable：自动创建主题，不然需要手动创建</li><li>brokerIP1：broker也需要一个公网ip，如果不指定就是阿里云的内网地址，我们在本地无法连接使用，我这里的ip就是虚拟机的ip地址</li></ul><h2 id="启动RocketMQ"><a href="#启动RocketMQ" class="headerlink" title="启动RocketMQ"></a>启动RocketMQ</h2><p>在安装目录下新增logs目录：<code>mkdir logs</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404131654769.png" alt="image-20240413165444749"> </p><p>logs目录用于存放日志文件</p><p>启动nameSrv：<code>nohup sh bin/mqnamesrv &gt; ./logs/namesrv.log &amp;</code></p><p>启动broker（-c指定使用的配置文件）：<code>nohup sh bin/mqbroker -c conf/broker.conf &gt; ./logs/broker.log &amp;</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404131952062.png" alt="image-20240413195212016"> </p><h2 id="安装RocketMQ控制台（可视化MQ的消息发送）"><a href="#安装RocketMQ控制台（可视化MQ的消息发送）" class="headerlink" title="安装RocketMQ控制台（可视化MQ的消息发送）"></a>安装RocketMQ控制台（可视化MQ的消息发送）</h2><p>github官方地址：<a href="https://github.com/apache/rocketmq-dashboard">https://github.com/apache/rocketmq-dashboard</a></p><p>jar包下载地址：<a href="https://github.com/apache/rocketmq-dashboard/archive/refs/tags/rocketmq-dashboard-1.0.0.zip">https://github.com/apache/rocketmq-dashboard/archive/refs/tags/rocketmq-dashboard-1.0.0.zip</a></p><p>下载后进行解压，然后在目录执行：<code>mvn clean package -Dmaven.test.skip=true</code></p><p>将target里面的<strong>rocketmq-dashboard-1.0.0.jar</strong>包上传到服务器</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404132001706.png" alt="image-20240413200126686"> </p><p>执行：<code>nohup java -jar rocketmq-dashboard-1.0.0.jar --server.port=8001 --rocketmq.config.namesrvAddr=127.0.0.1:9876 &gt; dashboard.log &amp;</code></p><p>输入：<code>jps -l</code>查看服务是否被启动</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404132003283.png" alt="image-20240413200334266"> </p><p>启动好了就可以在本机（不是虚拟机）通过访问虚拟机的ip加8001端口访问可视化界面了</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404132004025.png" alt="image-20240413200359925"> </p><p>至此，RocketMQ就算安装并启动完成了</p>]]></content>
      
      
      <categories>
          
          <category> RocketMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> RocketMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis7-9.0-集群（cluster）</title>
      <link href="/2024/04/12/redis7-9.0-ji-qun-cluster/"/>
      <url>/2024/04/12/redis7-9.0-ji-qun-cluster/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis集群（cluster）"><a href="#Redis集群（cluster）" class="headerlink" title="Redis集群（cluster）"></a>Redis集群（cluster）</h1><p>对于主从复制+哨兵的形式还是有所缺陷，于是产生了集群的这一种方式，其不同于复制+哨兵。</p><h2 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h2><p><strong>由于数据量过大， 单个Master复制集难以承受</strong>，因此需要对多个复制集进行集群，形成水平扩展，每个复制集只负责存储整个数据集的一部分，这就是Redis的集群。</p><h2 id="有什么用？"><a href="#有什么用？" class="headerlink" title="有什么用？"></a>有什么用？</h2><p>提供在多个Redis节点间共享数据的程序集</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921231.png" alt="image-20240228215702550"> </p><ul><li>Redis集群支持多个Master，每个Master又可以挂载多个Slave<ul><li>读写分离</li><li>支持数据的高可用</li><li>支持海量数据的读写存储操作</li></ul></li><li>由于Cluster自带Sentinel的故障转移机制，内置了高可用的支持，<strong>无需再去使用哨兵功能</strong></li><li>客户端与Redis的节点连接，不再需要连接集群中所有的节点，只需要任意连接集群中的一个可用节点即可</li><li><strong>槽位slot</strong>负责分配到各个物理服务节点，由对应的集群来负责维护节点、插槽和数据之间的关系</li></ul><h2 id="集群算法-分片-槽位slot"><a href="#集群算法-分片-槽位slot" class="headerlink" title="集群算法-分片-槽位slot"></a>集群算法-分片-槽位slot</h2><p>官网出处：</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921165.png" alt="image-20240228220805475"> </p><h3 id="redis集群的槽位slot"><a href="#redis集群的槽位slot" class="headerlink" title="redis集群的槽位slot"></a>redis集群的槽位slot</h3><p>Redis集群<strong>没有使用一致性hash</strong>，而是引入了<strong>哈希槽</strong>的概念</p><p>Redis集群由16384个哈希槽，每个key通过CRC15校验后对16384取模来决定放置哪个槽，集群的每个节点负责一部分哈希槽，例如：当前集群由3个节点，则</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921158.png" alt="image-20240228221039687"> </p><h3 id="Redis集群的分片"><a href="#Redis集群的分片" class="headerlink" title="Redis集群的分片"></a>Redis集群的分片</h3><p>分片是什么？</p><ul><li>使用Redis集群时我们会将存储的数据分散到多台redis机器上，这称为分片，集群中的每个Redis实例都被认为是整个数据的一个分片</li></ul><p>如何找到给定key的分片？</p><ul><li>为了找到给定key的分片，我们对key进行CRC16(key)算法处理并通过对总分片数量取模，然后<strong>使用确定性哈希函数</strong>，意味着给定的key<strong>将多次始终映射到同一个分片</strong>，我们可以推断将来读取特定key的位置</li></ul><h3 id="槽位和分片的优势"><a href="#槽位和分片的优势" class="headerlink" title="槽位和分片的优势"></a>槽位和分片的优势</h3><p><strong>最大优势：方便扩缩容和数据分派查找</strong></p><ul><li>这种结构很容易添加或删除节点，如果想添加一个新的节点，则需要从前面的节点中得到部分槽位给新的节点上，如果想移除某个节点则需要将该结点中的槽位移动到剩余节点的曹魏中，然后将没有任何槽位的节点移除即可，由于从一个节点将哈希槽移动到另一个节点并不会停止服务，所以无论添加删除或者改变某个节点的哈希槽的数量都不会造成集群不可用的状态</li></ul><h3 id="slot槽位映射的解决方案"><a href="#slot槽位映射的解决方案" class="headerlink" title="slot槽位映射的解决方案"></a>slot槽位映射的解决方案</h3><ol><li><p>哈希取余分区</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921611.png" alt="image-20240228222703410"> </p><ul><li>两亿条记录就是两亿个k，v键值对，我们单机不行必须要分布式多机器，用户每次读写操作都是根据公式：<code>hash(key) % N个机器数量</code>，计算出哈希值，用来决定数据映射到哪一个节点上</li><li>优点：简单粗暴且直接有效，只需要预估好数据，规划好节点，就能保证一段时间的数据支撑，使用Hash算法让固定的一部分请求落到同一台服务器上，这样每台服务器固定处理一部分请求（并维护这些请求的信息），起到负载均衡分而治之的作用。</li><li>缺点：原来规划好的节点进行扩容或者缩容会比较麻烦，不管扩缩，每次数据变动导致节点有变动，映射关系需要重新进行计算，在服务器个数固定不变时没有问题，如果需要弹性扩容或故障停机的情况下，原来的取模公式就会发生变化：Hash(key) % 3会变成Hash(key) % ?，此时计算出的哈希地址经过取余运算的结果将发生很大变化，根据公式获取的服务器也会变得不可控。</li></ul></li><li><p>一致性哈希算法分区</p><ul><li><p>是什么？</p><ul><li>为了解决<strong>分布式缓存数据变动和映射问题。</strong>某个机器宕机了，分母数量发生改变，自然取余会导致问题的发生。</li></ul></li><li><p>目的：当服务器数量发生变动时，尽量减少影响客户端到服务器的映射关系</p></li><li><p>三大步骤：</p><ol><li><p>算法构建一致性哈希环（哈希环类似循环队列）</p><ul><li><p>一致性哈希环算法必然有个hash函数并按照算法产生hash值，这个算法的所有可能哈希值会构成一个集合，这个集合可以成为一个hash空间[0,2^32-1]，但这是一个线性空间（类似线性队列），于是我们通过对2^32取模，将其在逻辑上形成一个虚拟的环形空间，一致性Hash算法对2^32取模</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921619.png" alt="image-20240228224517161"> <strong>哈希环</strong></p></li></ul></li><li><p>redis服务器IP节点映射</p><ul><li><p>将集群中的各个IP节点映射到环上的某一个位置</p></li><li><p>将服务器使用Hash算法确定每台机器在哈希环上的位置</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921016.png" alt="image-20240228224818527"></p></li></ul></li><li><p>key落到服务器的落键规则</p><ul><li><p>当我们需要存储一个kv键值对时，会按照和计算哈希环相同的函数去计算key的哈希值，然后再从计算出的位置沿着环的顺时针进行行走，遇到的第一台redis服务器就是该key应该定位到的服务器</p></li><li><p>例如：现在有ObjectA、ObjectB、ObjectC、ObjectD四个数据对象，经过哈希函数算出位置如下图，这时候各自再沿着哈希环顺时针行走知道遇到的第一个服务器就是他们各自应该在的服务器即：ObjectA会被定位到NodeA上，ObjectB会被定位到NodeB上，ObjectC会被定位到NodeC上，ObjectD会被定位到NodeD上</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921033.png" alt="image-20240228225544117"></p></li></ul></li></ol></li><li><p>优点：</p><ul><li><p>容错性：假设NodeC宕机，此时的A、B、D不会受到影响，一般的在一致性Hash算法中，如果一台服务器不可用，则<strong>受影响的数据仅仅是此服务器到其环空间中前一台服务器（即沿着哈希环逆时针行走遇到的第一台服务器）之间的数据</strong>，其他的不会收到影响，即C宕机了，受到影响的只是B、C之间的数据，且<strong>这些数据会转移到D进行存储</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921040.png" alt="image-20240228230338623"> </p></li><li><p>扩展性：数据量增加，需要增加一台节点NodeX，X的位置在A和B之间，那受到影响的也就只是A到X之间的数据，重新把A到X的数据录入到X上即可，不会导致Hash取余全部数据重新计算</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921060.png" alt="image-20240228230359053"></p></li></ul></li><li><p>缺点：哈希环的数据倾斜问题。一致性Hash算法在服务节点太少时，容易因为节点分布不均匀而造成数据倾斜，即被缓存的对象大部分集中缓存在某一台服务器上</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921311.png" alt="image-20240228230808454"></p></li></ul></li><li><p><strong>哈希槽分区</strong></p><ul><li><p>目的：为了解决一致性哈希算法的<strong>数据倾斜</strong>问题</p></li><li><p>实质：是一个数组[0,2^14-1]形成hash slot空间</p></li><li><p>能干什么？</p><ul><li><p>解决均匀分配的问题，<strong>在数据和节点之间又加入了一层，把这层称为哈希槽（hash slot），用于管理数据和节点之间的关系</strong>，现在就相当于节点上放的是槽，槽里放的是数据。</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921319.png" alt="image-20240229083050262"> </p><p>槽解决的是粒度问题，相当于把粒度变大了，方便数据移动，哈希解决的是映射问题，使用key的哈希值来计算所在的槽，便于数据分配</p></li></ul></li><li><p>多少个哈希槽？</p><ul><li>一个集群只能有16384个槽，编号0-16384（0~2^14-1）。这些槽会分配给集群中的所有主节点，分配策略没有要求</li><li>集群会记录节点和槽的对应关系，解决了节点和槽的关系后，会需要对key求哈希值，然后对16384取模，余数是多少key就落入对应的槽里。<code>HASH_SLOT = CRC16(key) mod 16384</code>以槽为单位移动数据，因为槽的数目是固定的，处理起来比较容易，这样数据移动问题就得以解决</li></ul></li><li><p>哈希槽计算</p><ul><li><p>Redis集群中内置了16384个哈希槽，redis会根据节点数量大致均等的将哈希槽映射到不同的节点，当需要在Redis集群中放置一个key-value时，redis先对key使用CRC16算法算出一个值然后用该值对16384取余数，这样每个key都会对应一个编号在0-16383之间的哈希槽，映射到某个节点上，如下：</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921970.png" alt="image-20240229084901043"></p></li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//import io.lettuce.core.cluster.SlotHash;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">SlotHash</span><span class="token punctuation">.</span><span class="token function">getSlot</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//6373</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">SlotHash</span><span class="token punctuation">.</span><span class="token function">getSlot</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10374</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">SlotHash</span><span class="token punctuation">.</span><span class="token function">getSlot</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//14503</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">SlotHash</span><span class="token punctuation">.</span><span class="token function">getSlot</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//866</span><span class="token punctuation">}</span></code></pre></li></ul></li></ol><h3 id="为什么Redis集群的的最大槽数是16384个？"><a href="#为什么Redis集群的的最大槽数是16384个？" class="headerlink" title="为什么Redis集群的的最大槽数是16384个？"></a>为什么Redis集群的的最大槽数是16384个？</h3><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921105.png" alt="image-20240229093009219"> </p><ol><li>如果槽位为65536（2^16），发送心跳信息的消息头高达8k，发送的心跳包过于庞大<ul><li>在消息头中最占空间的是myslot[CLUSTER_SLOT/8]<ul><li>当槽位为65536时，这块的大小是：65536÷8÷1024=8kb</li><li>当槽位为16384时，这块的大小是：15384÷8÷1024=2kb</li></ul></li><li>因为每秒钟redis节点需要发送一定数量的ping消息作为心跳包，如果槽位为65536，这个ping的消息头太大了，浪费带宽。</li></ul></li><li>redis集群的主节点数量基本不可能超过1000个<ul><li>集群节点越多，心跳包的消息体内携带的数据越多，如果节点过1000个，也会导致网络拥挤，因此redis作者不建议redis cluster节点数量超过1000个，那个对于节点数在1000个以内的redis集群，16384个槽位够用了，没有必要拓展到65536个</li></ul></li><li>槽位越小，节点越少的情况下，压缩比高，容易传输<ul><li>Redis主节点的配置信息中它所负责的哈希槽是通过一张bitmap的形式来保存的，在传输过程中会对bitmap进行压缩，但是如果bitmap的填充率（slots / N）很高的话（N表示节点数），bitmap的压缩率就很低，如果节点数很少，而哈希槽数很多的话，bitmap的压缩率就很低</li></ul></li></ol><h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><p>Redis集群<strong>不保证强一致性</strong>，意味着在特定的条件下，Redis集群可能会丢失一些被系统收到的写入请求命令</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921119.png" alt="image-20240229094041251"> </p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis7-8.0-哨兵（sentinel）</title>
      <link href="/2024/04/12/redis7-8.0-shao-bing-sentinel/"/>
      <url>/2024/04/12/redis7-8.0-shao-bing-sentinel/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis哨兵（sentinel）"><a href="#Redis哨兵（sentinel）" class="headerlink" title="Redis哨兵（sentinel）"></a>Redis哨兵（sentinel）</h1><p><strong>作用：无人值守运维</strong></p><h2 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h2><p>吹哨人巡查监控后台master主机是否故障，如果故障了根据投票数自动将一个从库转换为新主库，继续对外服务</p><h2 id="能干什么？"><a href="#能干什么？" class="headerlink" title="能干什么？"></a>能干什么？</h2><ol><li><strong>主从监控</strong><ul><li>监控主从redis库运行是否正常</li></ul></li><li><strong>消息通知</strong><ul><li>哨兵可以将故障转移的结果发送给客户端</li></ul></li><li><strong>故障转移</strong><ul><li>如果master异常，则会进行主从切换，将其中一个slave作为新的master</li></ul></li><li><strong>配置中心</strong><ul><li>客户端通过连接哨兵来获得当前redis服务的主节点地址</li></ul></li></ol><h2 id="怎么用？"><a href="#怎么用？" class="headerlink" title="怎么用？"></a>怎么用？</h2><p>哨兵架构说明（6台机器）：</p><ul><li>3个哨兵：自动监控和维护集群，不存放数据，只是吹哨人</li><li>1主2从：用于数据读取和存放</li></ul><h4 id="默认的sentinel-conf文件内容"><a href="#默认的sentinel-conf文件内容" class="headerlink" title="默认的sentinel.conf文件内容"></a>默认的sentinel.conf文件内容</h4><ul><li>bind<ul><li>服务监听地址，用于客户端连接，默认本机地址</li></ul></li><li>daemonize<ul><li>是否以后台daemonize方式运行</li></ul></li><li>protected-mode<ul><li>安全保护模式</li></ul></li><li>port<ul><li>端口</li></ul></li><li>logfile<ul><li>日志文件路径</li></ul></li><li>pidfile<ul><li>pid文件路径</li></ul></li><li>dir<ul><li>工作目录</li></ul></li><li><strong>sentinel monitor <master-name> <ip> <redis-port> <quorum></quorum></redis-port></ip></master-name></strong><ul><li>设置要监控的master服务器</li><li>quorum表示最少有几个哨兵认可客观下线，同一故障迁移的法定票数<ul><li>有的时候网络是不可靠的，一个sentinel会因为网络堵塞误认为一个master已经宕机，在sentinel集群环境下需要多个sentinel相互沟通来确认某个master是否真的已经宕机了，quorum这个参数是进行客观下线的一个依据，意思是至少有quorum个sentinel认为这个master有故障，才会对这个master进行下线以及故障转移，因为有的时候sentinel节点可能因为自身网络原因，导致无法连接master，而此时master并没有出现故障，所以这就需要多个sentinel都一致认为该master有问题，才可以进行下一步操作，这就保证了公平性和高可用。</li></ul></li></ul></li><li><strong>sentinel auth-pass <master-name> <password></password></master-name></strong><ul><li>master设置了密码，连接master服务的密码</li></ul></li><li>其他<ul><li><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921285.png" alt="image-20240130222816628"></li></ul></li></ul><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>当一个主从配置中的master失效后，sentinel可以选举出一个新的master用于自动接替原master的工作，主从配置中的其他redis服务器自动指向新的master同步数据，一般建议sentinel采取奇数台，防止某一台sentinel无法连接到master导致误切换</p><p><strong>运行流程和故障切换</strong></p><p><strong>SDown主观下线（Subjectively Down）：</strong></p><ul><li>指的是单个Sentinel实例对服务器做出的下线判断，即单个sentinel认为某个服务下线（有可能是接收不到订阅，之间的网络不通等等原因）</li><li>SDOWN主观不可用是单个sentinel自己主观上监测到的关于master的状态，从sentinel的角度来看，如果发送了PING心跳后在一定时间内没有受到合法的回复就视为达到了SDOWN的条件</li><li>sentinel配置文件中的down-after-milliseconds设置了判断主观下线的时间长度<ul><li><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921289.png" alt="image-20240226201439479"> </li><li>sentinel down-after-milliseconds <mastername> <timeout></timeout></mastername></li></ul></li></ul><p><strong>ODown客观下线（Objectively Down）：</strong></p><ul><li>ODOWN需要一定数量的sentinel，多个哨兵达成一致意见才能认为一个master客观上已经宕掉</li><li><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921288.png" alt="image-20240226211452689"> <ul><li>master-name：是对某个master+slave组合的一个区分标识（一套sentinel可以监听多组master+slave这样的组合）</li><li>quorum：是进行客观下线的一个依据，也称为法定人数/法定票数，意思是至少有quorum个sentinel认为这个master有故障才会对这个master进行下线以及故障转移，因为有的时候某个sentinel节点可能因为自身网络原因导致无法连接master，而此时master并没有出现故障，所以这就需要多个sentinel都一致认为该master有问题才可以进行下一步操作，报这个了公平性和高可用。</li></ul></li></ul><p><strong>当主节点被判断为客观下线：</strong>各个哨兵节点会进行协商，先选举出一个领导者哨兵节点，并由该领导节点进行故障迁移（failover）</p><p><strong>怎么选取出领导者哨兵节点？</strong></p><p>Raft算法：</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921279.png" alt="image-20240226212248667"> </p><p>监视该主节点的所有哨兵都有可能被选为领导者哨兵，选举使用的算法是Raft算法，其基本思路是<strong>先到先得</strong>，即在一轮选举中，哨兵A向B发送成为领导者的申请，如果B没有同意过其他哨兵，则会同意A成为领导者</p><p><strong>由领导者哨兵节点开始推动故障切换流程并选出一个新的master：</strong></p><ol><li><p>某个slave被选中成为新master</p><ul><li><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921577.png" alt="image-20240226213025479"> </p></li><li><p>选出新master的规则（剩余slave节点健康的前提下）：</p><ul><li><p>redis.conf文件中，优先级slave-priority或者replica-priority最高的从节点（数字越小优先度越高）</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921045.png" alt="image-20240226212830087"> </p></li><li><p>复制偏移位置offset最大的从节点</p></li><li><p>最小Run ID的从节点（字典顺序，ASCII码）</p></li></ul></li></ul></li><li><p>重新确立master</p><ul><li>执行slaveof no one命令让选出来的从节点成为新的主节点，并通过slaveof命令让其他节点成为其从节点</li><li>sentinel leader会对选举出的新master执行slaveof no one操作，将其提升为master节点</li><li>sentinel leader向其他slave发送命令，让剩余的slave成为新的master节点的slave</li></ul></li><li><p>之前宕机的master重连后不会成为master</p><ul><li>将之前已经下线的老master设置为新选出的新master的从节点，当老master重新上线后，他会成为新master的从节点</li><li>sentinel leader会让原来的master降级为slave并恢复正常工作</li></ul></li></ol><h3 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h3><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921093.png" alt="image-20240226213528086"> </p><h2 id="哨兵使用建议"><a href="#哨兵使用建议" class="headerlink" title="哨兵使用建议"></a>哨兵使用建议</h2><ul><li>哨兵节点的数量应为多个，哨兵本身应该集群，保证高可用</li><li>哨兵节点的数量应该是奇数个</li><li>各个哨兵节点的配置应该一致</li><li>如果哨兵节点部署在Docker等容器里面，尤其要注意端口的正确映射</li><li>哨兵集群+主从复制，并不能保证数据零丢失</li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis7-7.0-复制（replica）</title>
      <link href="/2024/04/12/redis7-7.0-fu-zhi-replica/"/>
      <url>/2024/04/12/redis7-7.0-fu-zhi-replica/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis复制（replica）"><a href="#Redis复制（replica）" class="headerlink" title="Redis复制（replica）"></a>Redis复制（replica）</h1><p><strong>官网</strong>：<a href="https://redis.io/docs/management/replication/">https://redis.io/docs/management/replication/</a></p><h2 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h2><p>主从复制，master以写为主，slave以读为主</p><p>当master数据变化的时候，自动将新的数据异步同步到其他slave数据库</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921436.png" alt="image-20240114190104175"> </p><ul><li>写在Main的主机上，读取数据的时候就在复制的Secondary这台主机上读取，这样就可以避免一台redis数据库既写入数据又读取数据，减轻了redis数据库的负担</li></ul><h2 id="能干什么？"><a href="#能干什么？" class="headerlink" title="能干什么？"></a>能干什么？</h2><ul><li>读写分离</li><li>容灾恢复<ul><li>当主机宕机了之后可以从从机中恢复数据，这是相对于aof和rdb备份数据的另一种更好的方法</li></ul></li><li>数据备份<ul><li>主机和从机的数据都是实时的</li></ul></li><li>水平扩容支撑高并发<ul><li>从机可以有多台</li></ul></li></ul><h2 id="怎么用？"><a href="#怎么用？" class="headerlink" title="怎么用？"></a>怎么用？</h2><p><strong>配从（库）不配主（库）</strong>：由从机slave决定要将哪台redis当成master</p><h3 id="权限细节"><a href="#权限细节" class="headerlink" title="权限细节"></a>权限细节</h3><ul><li>master如果配置了requirepass参数，需要密码登录</li><li>那么slave就要配置masterauth来设置校验密码，否则master就会拒绝slave的访问请求</li></ul><h3 id="基本操作命令"><a href="#基本操作命令" class="headerlink" title="基本操作命令"></a>基本操作命令</h3><h4 id="info-replication"><a href="#info-replication" class="headerlink" title="info replication"></a>info replication</h4><p>可以查看复制节点的主从关系和配置信息</p><h4 id="replicaof-主库IP-主库端口"><a href="#replicaof-主库IP-主库端口" class="headerlink" title="replicaof 主库IP 主库端口"></a>replicaof 主库IP 主库端口</h4><p>一般写入进redis.conf配置文件内</p><h4 id="slaveof-主库IP-主库端口"><a href="#slaveof-主库IP-主库端口" class="headerlink" title="slaveof 主库IP 主库端口"></a>slaveof 主库IP 主库端口</h4><ul><li>每次与master断开之后，都需要重新连接，储配配置进redis.conf文件</li><li>在运行期间修改slave节点的信息，如果该数据库已经是某个主数据库的从数据库，那么就会停止与原主数据库的同步关系<strong>转而和新的主数据库同步，重新确定新的主数据库</strong></li></ul><h4 id="slaveof-no-one"><a href="#slaveof-no-one" class="headerlink" title="slaveof no one"></a>slaveof no one</h4><p>使当前数据库停止与其他数据库的同步，<strong>转成主数据库，自立为王</strong></p><h3 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h3><p><strong>配置文件</strong></p><p>从机的配置文件：replicaof 主库IP 主库端口</p><p>配从库不配主库</p><ul><li><p>配置从机6380</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921424.png" alt="image-20240122151003133"> </p></li><li><p>配置从机6381</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921469.png" alt="image-20240122151412047"></p></li></ul><p>先启动master再启动slave</p><p>使用命令查看主从机信息</p><ul><li><p>info replication</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921498.png" alt="image-20240122155104517"></p></li></ul><p><strong>从机只能进行读操作不能进行写操作</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921528.png" alt="image-20240122155457696"> </p><p><strong>从机切入点问题</strong></p><p>slave是从头开始复制还是从切入点开始复制？</p><p>首次启动会从头开始复制，后续会跟随，master写，slave跟</p><p><strong>主机shutdown之后从机不会上位，从机的数据依旧可以正常使用，等待主机重新启动</strong></p><p><strong>主机shutdown之后，重启后主从关系依旧存在，从机仍然能够复制主机后续更新的信息</strong></p><p><strong>某台从机shutdown之后，重启后仍然可以复制master的信息</strong></p><p><strong>从属于某台机器</strong>：<code>slaveof xxx.xxx.xxx.xxx port</code></p><p><strong>不从属于任何机器</strong>：<code>slaveof no one</code></p><p><strong>如果确定了主从关系就必须将其写入配置文件中，否则下次重新进入的时候从机就会按照配置文件进行还原</strong></p><h2 id="配置和命令的区别"><a href="#配置和命令的区别" class="headerlink" title="配置和命令的区别"></a>配置和命令的区别</h2><p>写在配置文件中，会持久且稳定，使用命令则只是当次生效，宕机后再次进入就会按照配置文件进行配置</p><p>优先级：配置文件 &gt; 命令</p><h2 id="从机逐级连接"><a href="#从机逐级连接" class="headerlink" title="从机逐级连接"></a>从机逐级连接</h2><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921703.png" alt="image-20240128135855045"> </p><h2 id="主从复制的原理及工作流程"><a href="#主从复制的原理及工作流程" class="headerlink" title="主从复制的原理及工作流程"></a>主从复制的原理及工作流程</h2><ol><li>slave启动<ul><li>slave启动成功连接到master后会发送一个sync命令</li><li>slave首次全新连接master，一次完全同步（全量复制）将被自动执行，slave自身原有数据会被master数据覆盖清除</li></ul></li><li>首次连接，全量复制<ul><li>master节点收到sync命令后会开始在后台保存快照（RDB持久化，所以主从复制时会触发RDB），同时收集所有接收到的用于修改数据集命令缓存起来，master节点执行RDB持久化结束后，master将RDB快照文件和所有缓存的命令发送到所有slave，以完成一次完全同步。</li><li>slave服务在接收到数据库文件数据后，将其存盘并加载到内存中，从而完成复制初始化</li></ul></li><li>master发出ping包（repl-ping-replica-period 10），保持通信<ul><li>master发出ping包的周期，默认是十秒</li><li><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921219.png" alt="image-20240130161656634"></li></ul></li><li>增量复制<ul><li>master继续将新的所有收集到的修改命令自动一次传给slave，完成同步</li></ul></li><li>从机下线，重连续传<ul><li>master会检查backlog里面的offset，master和slave都会保存一个复制的offset还有一个masterId，offset是保存在backlog中的，<strong>master只会把已经复制的offset后面的数据复制给slave</strong>，类似断点续传</li></ul></li></ol><h2 id="主从复制的缺点"><a href="#主从复制的缺点" class="headerlink" title="主从复制的缺点"></a>主从复制的缺点</h2><ul><li><p><strong>复制延时，信号衰减</strong></p><ul><li>由于所有的写操作都是先在master上操作，然后同步更新到slave上，所以从master同步到slave机器上会有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，slave及其数量的增加也会使这个问题更加严重。</li></ul></li><li><p><strong>master一旦挂了</strong></p><ul><li><p>默认情况下，不会在slave节点中自动重选一个master</p></li><li><p>是否每次都需要人工干预？</p><p><strong>无人值守安装变成刚需（哨兵、集群）</strong></p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis7-6.0-发布订阅</title>
      <link href="/2024/04/12/redis7-6.0-fa-bu-ding-yue/"/>
      <url>/2024/04/12/redis7-6.0-fa-bu-ding-yue/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis发布订阅"><a href="#Redis发布订阅" class="headerlink" title="Redis发布订阅"></a>Redis发布订阅</h1><p><strong>是一种消息通信模式：发送者(PUBLISH)发送消息，订阅者(SUBSCRIBE)接收消息，可以实现进程间的消息传递</strong></p><h2 id="能干什么？"><a href="#能干什么？" class="headerlink" title="能干什么？"></a>能干什么？</h2><p>可以订阅任意数量的频道，类似微信关注多个公众号</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921769.png" alt="image-20231122081859211"> </p><ul><li><p>当有新消息通过PUBLISH命令发送给频道channel1时</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921047.png" alt="image-20231122081954410"></p></li></ul><p>发布/订阅其实是一个轻量的队列，只不过数据不会被持久化，一般用来处理<strong>实时性较高的异步消息</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921119.png" alt="image-20231122082051754"> </p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921672.png" alt="image-20231122082206626"> </p><h3 id="SUBSCRIBE-channel-channel-…"><a href="#SUBSCRIBE-channel-channel-…" class="headerlink" title="SUBSCRIBE channel [channel …]"></a>SUBSCRIBE channel [channel …]</h3><p>订阅给定的一个或多个频道的消息，<strong>推荐先执行订阅后再发布，订阅成功之前发布的消息是收不到的</strong></p><p>订阅的客户端每次可以收到3个参数的消息</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921666.png" alt="image-20231122083446784"> </p><ul><li>消息的种类</li><li>始发频道的名称</li><li>实际的消息内容</li></ul><p> <img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921670.png" alt="image-20231122091827796"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921823.png" alt="image-20231122091847552"> </p><h3 id="PUBLISH-channel-message"><a href="#PUBLISH-channel-message" class="headerlink" title="PUBLISH channel message"></a>PUBLISH channel message</h3><p>发布消息到执行的频道</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921953.png" alt="image-20231122091754742"> </p><p>订阅了c1频道的可以接收到“helloc1”的这串信息</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921077.png" alt="image-20240113154033800"> </p><h3 id="PSUBSCRIBE-pattern-pattern-…"><a href="#PSUBSCRIBE-pattern-pattern-…" class="headerlink" title="PSUBSCRIBE pattern [pattern …]"></a>PSUBSCRIBE pattern [pattern …]</h3><p>按照模式批量订阅，订阅一个或多个符合给定模式(支持*号?号之类的)的频道</p><h3 id="PUBSUB-subcommand-argument-argument-…"><a href="#PUBSUB-subcommand-argument-argument-…" class="headerlink" title="PUBSUB subcommand [argument [argument …]]"></a>PUBSUB subcommand [argument [argument …]]</h3><ul><li><p>查看订阅与发布系统状态</p></li><li><p>PUBSUB CHANNELS</p><ul><li><p>由活跃频道组成的列表</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921539.png" alt="image-20231122083902587"></p></li></ul></li><li><p>PUBSUB NUMSUB [channel [channel …]]</p><ul><li><p>某个频道有几个订阅者</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921620.png" alt="image-20231122083948609"></p></li></ul></li><li><p>PUBSUB NUMPAT</p><ul><li><p>只统计使用PSUBCRIBE命令执行的，返回客户端订阅的唯一<strong>模式的数量</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921609.png" alt="image-20240113160233802"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921669.png" alt="image-20240113160243172"></p></li></ul></li></ul><h3 id="UNSUBSCRIBE-channel-channel-…"><a href="#UNSUBSCRIBE-channel-channel-…" class="headerlink" title="UNSUBSCRIBE [channel [channel …]]"></a>UNSUBSCRIBE [channel [channel …]]</h3><p>取消订阅</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921735.png" alt="image-20240113172536457"> </p><h3 id="PUNSUBSCRIBE-pattern-pattern-…"><a href="#PUNSUBSCRIBE-pattern-pattern-…" class="headerlink" title="PUNSUBSCRIBE [pattern [pattern …]]"></a>PUNSUBSCRIBE [pattern [pattern …]]</h3><p>退订所有给定模式的频道</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921976.png" alt="image-20240113172833361"> </p><h2 id="PUB-SUB总结"><a href="#PUB-SUB总结" class="headerlink" title="PUB/SUB总结"></a>PUB/SUB总结</h2><p>Redis可以实现消息中间件MQ的功能，通过发布订阅实现消息的引导和分流。（不建议使用，redis就做好分布式缓存功能就行了，专业的事情交给专业的中间件处理）</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>发布的消息在Redis系统中不能持久化，因此，必须先执行订阅再等消息发布，如果先发布了信息，那么该消息由于没有订阅者，消息将被直接丢弃</li><li>消息只管发送对于发布者而言消息是即发即失的，不管接收，也没有ACK机制，无法保证消息的消费成功</li></ul><p>以上的缺点导致了Redis的PUB/SUB模式就像个小玩具，在生产环境中几乎无用武之地，为此，Redis5.0版本新增了Stream数据结构，不但支持多播，还支持数据持久化，相比PUB/SUB更加强大</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis7-5.0-管道</title>
      <link href="/2024/04/12/redis7-5.0-guan-dao/"/>
      <url>/2024/04/12/redis7-5.0-guan-dao/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis管道"><a href="#Redis管道" class="headerlink" title="Redis管道"></a>Redis管道</h1><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921746.png" alt="image-20231120123420152"> </p><p><strong>如何优化频繁命令往返造成的性能瓶颈？</strong></p><p>管道（pipeline）可以一次性发送多条命令给服务端，服务端依次处理完毕后，<strong>通过一条响应一次性将结果返回，通过减少客户端与redis的通信次数来实现降低往返延时时间。</strong>pipeline实现的原理是<strong>队列</strong>，先进先出特性就保证数据的顺序性。</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921755.png" alt="image-20231120123827191"> </p><h2 id="管道是什么？"><a href="#管道是什么？" class="headerlink" title="管道是什么？"></a>管道是什么？</h2><p>pipeline是为了解决RTT（Round Trip Time）往返时，仅仅是将命令打包一次性发送，对整个redis的执行不造成其他影响（<strong>批处理命令变种优化措施，类似Redis的原生批命令mget和mset</strong>）</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921675.png" alt="image-20231120125554054"> </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>pipeline与<strong>原生批量命令</strong>对比</p><ul><li>原生批量命令是原子性（例如mset、mget），<strong>pipeline是非原子性</strong></li><li>原生批量命令一次只能执行一种命令，pipeline支持批量执行不同命令</li><li>原生批量命令是服务端实现，而pipeline需要服务端与客户端共同完成</li></ul><p>pipeline与<strong>事务</strong>对比</p><ul><li>事务具有原子性，管道不具有原子性</li><li>管道一次性将多条命令发送到服务器，事务是一条一条的发，事务只有在接收到exec命令后才会执行，管道不会</li><li>执行事务时会阻塞其他命令的执行，而执行管道中的命令时不会</li></ul><p>使用pipeline注意事项</p><ul><li>pipeline缓冲的指令只是会依次执行，不保证原子性，如果执行中指令发生异常，将会继续执行后续的指令</li><li>使用pipeline组装的命令个数不能太多，不过数据量过大客户端阻塞的时间可能过久，同时服务端此时也被迫回复一个队列答复，占用很多内存</li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis7-4.0-事务</title>
      <link href="/2024/04/12/redis7-4.0-shi-wu/"/>
      <url>/2024/04/12/redis7-4.0-shi-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis事务"><a href="#Redis事务" class="headerlink" title="Redis事务"></a>Redis事务</h1><p><strong>数据库事务是什么？</strong></p><p>事务是一个或一系列操作的最小逻辑单元，在这个逻辑单元中的所有语句，要不都执行成功，要么都执行失败，不存在任何中间状态，一旦事务执行失败，那么所有的操作都会被撤销，一旦事务执行成功，那么所有的操作结果都会被保存。</p><p><strong>Redis事务是什么？</strong></p><p>可以一次执行多个命令，本质是一组命令的集合。一个事务中的所有命令都会序列化，<strong>按顺序地串行化执行而不会被其他命令插入，不许加塞</strong></p><p><strong>能干什么？</strong></p><p>一个队列中，一次性、顺序性、排他性的执行一系列命令</p><p><strong>Redis事务VS数据库事务</strong></p><table><thead><tr><th>特性</th><th>解释</th></tr></thead><tbody><tr><td>1.单独的隔离操作</td><td>Redis的事务仅仅是保证事务里的操作会被连续独占的执行，redis命令执行是单线程架构，在执行完事务内所有指令前是不可能再去同时执行其他客户端的请求的</td></tr><tr><td>2.没有隔离级别的概念</td><td>因为事务提交前任何指令都不会被实际执行，也就不存在“事务内的查询要看到事务里的更新，在事务外查询不能看到”这种问题了</td></tr><tr><td>3.不保证原子性</td><td>Redis的事务<strong>不保证原子性</strong>，也就是不保证所有指令同时成功或同时失败，只有决定是否开始执行全部指令的能力，没有执行到一半进行回滚的能力</td></tr><tr><td>4.排他性</td><td>Redis会保证一个事务内的命令依次执行，而不会被其他命令插入</td></tr></tbody></table><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="DISCARD"><a href="#DISCARD" class="headerlink" title="DISCARD"></a>DISCARD</h3><p>取消事务，放弃执行事务块内的所有命令</p><h3 id="EXEC"><a href="#EXEC" class="headerlink" title="EXEC"></a>EXEC</h3><p>执行所有事务块内的命令</p><h3 id="MULTI"><a href="#MULTI" class="headerlink" title="MULTI"></a>MULTI</h3><p>标记一个事务块的开始</p><h3 id="UNWATCH"><a href="#UNWATCH" class="headerlink" title="UNWATCH"></a>UNWATCH</h3><p>取消WATCH命令对所有key的监视</p><h3 id="WATCH-key-key-…"><a href="#WATCH-key-key-…" class="headerlink" title="WATCH key [key …]"></a>WATCH key [key …]</h3><p>监视一个（或多个）key，如果在事务执行前这个（或这些）key被其他命令所改动，那么事务会被打断</p><h2 id="例1：正常执行"><a href="#例1：正常执行" class="headerlink" title="例1：正常执行"></a>例1：正常执行</h2><ul><li>MULTI</li><li>EXEC</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921882.png" alt="image-20231118151049756"> </p><h2 id="例2：放弃事务"><a href="#例2：放弃事务" class="headerlink" title="例2：放弃事务"></a>例2：放弃事务</h2><ul><li>MULTI</li><li>DISCARD</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921970.png" alt="image-20231118152934491"> </p><h2 id="例3：事务中有命令出错，全都不成功"><a href="#例3：事务中有命令出错，全都不成功" class="headerlink" title="例3：事务中有命令出错，全都不成功"></a>例3：事务中有命令出错，全都不成功</h2><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921962.png" alt="image-20231118153718158"> </p><h2 id="例4：事务中有命令通过编译但是是错误的，出错的语句不执行"><a href="#例4：事务中有命令通过编译但是是错误的，出错的语句不执行" class="headerlink" title="例4：事务中有命令通过编译但是是错误的，出错的语句不执行"></a>例4：事务中有命令通过编译但是是错误的，出错的语句不执行</h2><p><strong>注意和传统数据库事务区别，不一定要么一起成功要么一起失败</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921137.png" alt="image-20231118154405073"> </p><h2 id="例5：WATCH"><a href="#例5：WATCH" class="headerlink" title="例5：WATCH"></a>例5：WATCH</h2><p>Redis使用Watch来提供乐观锁，类似CAS（Check-and-Set）</p><ul><li>悲观锁：每次拿数据的时候都会上锁，这样别人在拿数据的时候就会block直到他拿到锁</li><li>乐观锁：每次拿数据的时候不会上锁，只有在更新的时候会判断期间有没有人去更新这个数据（<strong>乐观锁策略：提交版本必须大于记录当前版本才能执行更新</strong>）</li><li>CAS：使用WATCH监控key，如果key在修改期间被更新过，则本次事务操作会被打断需要重新执行一次</li></ul><p><strong>watch</strong></p><ul><li><p>初始化k1和balance两个key，先监控再开启multi，保证两个key变动在同一个事务内</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921245.png" alt="image-20231119213925399"> </p></li><li><p>有加塞篡改</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921437.png" alt="image-20231119214420289"></p></li></ul><p><strong>一旦执行了exec，之前的监控锁都会被取消；当客户端连接丢失的时候（退出连接），所有东西都会被取消监视</strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>开启：以<code>multi</code>开始一个事务</li><li>入队：将多个命令入队到事务中，接到这些命令并不会立即执行，而是放到等待执行的事务队列里面</li><li>执行：由<code>exec</code>命令触发事务</li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis7-3.0-持久化</title>
      <link href="/2024/04/12/redis7-3.0-chi-jiu-hua/"/>
      <url>/2024/04/12/redis7-3.0-chi-jiu-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h1><p>官网：<a href="https://redis.io/docs/manual/presistence">https://redis.io/docs/manual/presistence</a></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921760.png" alt="image-20231107123453191"> </p><h2 id="RDB（Redis-DataBase）"><a href="#RDB（Redis-DataBase）" class="headerlink" title="RDB（Redis DataBase）"></a>RDB（Redis DataBase）</h2><p><strong>RDB持久性以指定的时间间隔执行数据集的时间点快照</strong></p><p>实现类似照片记录效果的方式，就是把某一时刻的数据和状态以文件的形式写到磁盘上，也就是</p><p>快照。这样一来即使故障宕机，快照文件也不会丢失，数据的可靠性也就得到了保证。</p><p>这个快照文件就称为RDB文件(dump.rdb)，其中，RDB就是Redis DataBase的缩写。</p><p><strong>使用RDB的优势？</strong></p><ul><li>适合大规模的数据恢复</li><li>按照业务定时备份</li><li>对数据完整性和一致性要求不高</li><li>RDB文件在内存中的加载速度要比AOF快得多</li></ul><p><strong>使用RDB的劣势？</strong></p><ul><li><p>在一定间隔时间做一次备份，如果redis意外挂掉了，就会丢失从当前到最近一次快照期间的数据，快照之间的数据会丢失</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921009.png" alt="image-20231108211306395"> </p></li><li><p>内存数据的全量同步，如果数据量太大会导致I/O严重影响服务器性能</p></li><li><p>RDB依赖于主进程的fork，在更大的数据集中，可能会导致服务请求的瞬间延迟。fork的时候内存中的数据被克隆了一份，大约两倍的膨胀性，需要慎重考虑</p></li></ul><p><strong>怎么检查和修复RDB？</strong></p><ul><li><p><code>redis-check-rdb rdbfilename</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921038.png" alt="image-20231108221047221"></p></li></ul><h3 id="自动触发"><a href="#自动触发" class="headerlink" title="自动触发"></a>自动触发</h3><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921207.png" alt="image-20231107143842527"> </p><p>修改myredis下的redis.conf，添加<code>save 5 2</code>，每五秒触发两次修改，并且修改rdb默认保存路径为自定义的<code>/myredis/dumpfiles</code>，保存的文件名修改为<code>dump6379.rdb</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921217.png" alt="image-20231107150332371"> </p><p>在五秒内改动两条数据</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921573.png" alt="image-20231107214356971"> </p><p>在dumpfiles文件夹自动创建dump6379.rdb文件</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921640.png" alt="image-20231107214538587"> </p><p><strong>如何恢复？</strong></p><p>将备份文件（dump.rdb）移动到redis安装目录并启动服务即可</p><p><strong>备份成功后用flushdb清空redis看看是否可以恢复数据</strong></p><ul><li>结论：执行FLUSHALL/FLUSHDB命令也会产生dump.rdb文件，但里面是空的，没有意义</li><li>下次启动的时候redis会自动从dump.rdb文件中自动读取上一次备份的数据</li></ul><p><strong>物理恢复，一定服务器和备份分机隔离</strong></p><h3 id="手动触发"><a href="#手动触发" class="headerlink" title="手动触发"></a>手动触发</h3><p>redis提供了两个命令来生成RDB文件：save和bgsave</p><h4 id="save"><a href="#save" class="headerlink" title="save"></a>save</h4><p>在主程序中执行<strong>会阻塞</strong>当前redis服务器，知道持久化工作完成，执行save命令期间，redis不能处理其他命令，在实际工作中禁止使用</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921668.png" alt="image-20231107222704865"> </p><p>将dumpfiles里的rdb文件删掉</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921662.png" alt="image-20231107223053637"> </p><p>添加一条键值对，并且手动save</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921879.png" alt="image-20231107223152268"> </p><p>此时dumpfiles里就会创建一个备份的rdb文件</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921291.png" alt="image-20231107223229719"> </p><h4 id="bgsave"><a href="#bgsave" class="headerlink" title="bgsave"></a>bgsave</h4><p>redis会在后台异步进行快照操作，<strong>不阻塞</strong>快照的同时还可以响应客户端的请求，该触发方式会fork一个子进程，由子进程复制持久化过程</p><p>redis默认会使用bgsave对当前内存中的所有数据快照，这个操作是子进程在后台完成的，这就允许主进程同时可以修改数据</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921344.png" alt="image-20231107224722591"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921443.png" alt="image-20231107223715659"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921475.png" alt="image-20231107223746456"> </p><h5 id="fork？"><a href="#fork？" class="headerlink" title="fork？"></a>fork？</h5><ul><li><p>类似git里从当前主分支拉取代码但是不影响主分支的修改</p></li><li><p>在Linux程序中，fork()会产生一个和父进程完全相同的子进程，但是子进程在此后都会exec系统调用，出于效率考虑，尽量避免膨胀</p></li></ul><h5 id="lastsave"><a href="#lastsave" class="headerlink" title="lastsave"></a>lastsave</h5><p>可以通过lasrsave命令获取最后一次成功执行快照的时间</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921470.png" alt="image-20231107225248003"> </p><p>使用<code>data -d @时间戳</code>的方式解析时间戳</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921548.png" alt="image-20231107225302807"> </p><h2 id="AOF（Append-Only-File）"><a href="#AOF（Append-Only-File）" class="headerlink" title="AOF（Append Only File）"></a>AOF（Append Only File）</h2><h4 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h4><ul><li><strong>以日志的形式来记录每个写操作</strong>，将Redis执行过的所有指令记录下来（读操作不记录），只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，即，redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作</li><li>默认情况下redis是没有开启AOF的，开启AOF需要设置配置：appendonly yes</li></ul><h4 id="AOF持久化流程"><a href="#AOF持久化流程" class="headerlink" title="AOF持久化流程"></a>AOF持久化流程</h4><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921870.png" alt="image-20231113102047971"> </p><h4 id="AOF缓冲区三种写回策略"><a href="#AOF缓冲区三种写回策略" class="headerlink" title="AOF缓冲区三种写回策略"></a>AOF缓冲区三种写回策略</h4><ul><li>Always：同步写回，每个写命令执行完立刻同步地将日志协会磁盘</li><li>exerysec：每秒写回，每个写命令执行完，只是先把日志写到AOF文件的内存缓冲区，每隔1秒把缓冲区中的内容写入磁盘</li><li>no：操作系统控制的写回，每个写命令执行完，只是先把日志写到AOF文件的内存缓冲区，由操作系统决定何时将缓冲区内容写回磁盘</li></ul><p><strong>总结</strong></p><table><thead><tr><th align="center">配置项</th><th align="center">写回时机</th><th align="center">优点</th><th align="center">缺点</th></tr></thead><tbody><tr><td align="center">Always</td><td align="center">同步写回</td><td align="center">可靠性高，数据基本不丢失</td><td align="center">每个写命令都要落盘，性能影响很大</td></tr><tr><td align="center">Everysec</td><td align="center">每秒写回</td><td align="center">性能适中</td><td align="center">宕机时丢失一秒内的数据</td></tr><tr><td align="center">No</td><td align="center">操作系统控制的写回</td><td align="center">性能好</td><td align="center">宕机时丢失数据较多</td></tr></tbody></table><h4 id="启动AOF"><a href="#启动AOF" class="headerlink" title="启动AOF"></a>启动AOF</h4><ol><li>将redis.conf里面的appendonly no改成yes</li><li>写操作继续，生成aof文件到指定的目录</li></ol><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921977.png" alt="image-20231114215825306"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921009.png" alt="image-20231114215842496"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921224.png" alt="image-20231114220908772"> </p><h4 id="AOF文件保存名称"><a href="#AOF文件保存名称" class="headerlink" title="AOF文件保存名称"></a>AOF文件保存名称</h4><ul><li>base基本文件</li><li>incr增量文件（写操作命令会被记录在这个文件里面，不记录读操作命令）</li><li>manifest清单文件</li></ul><h4 id="正常恢复"><a href="#正常恢复" class="headerlink" title="正常恢复"></a>正常恢复</h4><p>正常重启的时候redis就会从aof中将命令全部读回来</p><h4 id="异常恢复"><a href="#异常恢复" class="headerlink" title="异常恢复"></a>异常恢复</h4><ul><li><p>故意乱写正常的AOF文件，模拟网络闪断文件写error</p></li><li><p>重启redis之后就会进行AOF文件的载入（无法启动）</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921266.png" alt="image-20231116150935380"> </p></li><li><p>异常修复命令：<code>redis-check-aof --fix</code> 进行修复</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921311.png" alt="image-20231116151153947"></p></li></ul><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><ul><li>有不同的fsync策略：根本不，每秒fsync，每次查询时fsync。fsync是使用后台线程执行的，当没有fsync正在进行时，主线程将努力执行写入，因此只会丢失一秒钟的写入</li><li>AOF日志是一个仅附加日志，因此不会出现寻道问题，也不会再断电时出现损坏问题，即使由于某种原因（磁盘已满或其他原因）日志以写一半的命令结尾，redis-check-aof工具也可以进行修复</li><li>当AOF变化太大时，redis能够在后台重写aof。重写是完全安全的，因为当redis继续附加到旧文件时，会使用创建当前数据集所需的最少操作集生成一个全新的文件，一旦第二个文件准备就绪，redis就会切换两者并开始附加到新的那一个</li></ul><h4 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h4><ul><li>相同数据集的数据而言，aof文件要远远大于rdb文件，恢复速度也慢于rdb文件</li><li>aof运行效率要慢于rdb，每秒同步策略效率较好，不同步效率与rdb相同</li></ul><h4 id="AOF的重写机制"><a href="#AOF的重写机制" class="headerlink" title="AOF的重写机制"></a>AOF的重写机制</h4><p><strong>由于AOF持久化是redis不断将写命令记录到AOF文件中，随着redis不断进行，AOF文件会越来越大（文件越大，占用服务器内存越大以及AOF恢复要求时间越长）</strong></p><p>为了解决上述问题redis新增的重写机制，即：当AOF文件的大小超过所设定的峰值时，redis就会自动启动AOF文件的内容压缩，只保留可以恢复数据的最小指令集，或者可以<strong>手动使用命令bgrewtiteaof来重写</strong></p><p><strong>触发机制</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921447.png" alt="image-20231116154234017"> </p><ul><li>自动触发<ul><li>满足配置文件中的选项后，redis会记录上一次重写时的AOF大小，默认配置时当AOF文件大小是上次rewrite后大小的一倍且文件大于64M时</li></ul></li><li>手动触发<ul><li>客户端向服务器发送bgrewriteaof命令</li></ul></li></ul><p><strong>重写机制的原理</strong></p><ol><li>在重写开始前，redis会创建一个“重写子进程”，这个子进程会读取现有的AOF文件，并将其包含的指令进行分析压缩并写入到一个临时文件中</li><li>同时主进程会将数据接收到的写指令一边累积到内存缓冲区中，一边继续写入到原有的AOF文件中，这样是保证原有的AOF文件的可用性，避免在重写过程中出现意外</li><li>当“重写子进程”完成重写工作后，它会给父进程发一个信号，当父进程接收到信号后就会将内存中缓存的写指令追加到新AOF文件中</li><li>追加结束后，redis就会用新的AOF文件来代替旧的AOF文件，之后再有新的写指令，就会追加到新的AOF文件中</li><li>重写AOF文件的操作，并没有读取旧的AOF文件，而是将整个内存中的数据库内容用命令的方式重写了一个新的AOF文件，类似于快照</li></ol><p><strong>总结</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921439.png" alt="image-20231116233426499"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921776.png" alt="image-20231116233540271"> </p><h3 id="RDB-AOF混合持久化"><a href="#RDB-AOF混合持久化" class="headerlink" title="RDB+AOF混合持久化"></a>RDB+AOF混合持久化</h3><p><strong>当RDB和AOF同时启用的时候，会优先使用AOF，如果没有AOF再使用RDB</strong></p><h4 id="同时开启两种持久化方式"><a href="#同时开启两种持久化方式" class="headerlink" title="同时开启两种持久化方式"></a>同时开启两种持久化方式</h4><ul><li>在这种情况下，<strong>当redis重启的时候会优先载入AOF文件来恢复原始的数据，</strong>因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整</li><li>RDB的数据不实时i，同时使用两者时服务器重启也只会AOF文件。（保留RDB以防万一）</li></ul><h4 id="纯缓存模式"><a href="#纯缓存模式" class="headerlink" title="纯缓存模式"></a>纯缓存模式</h4><p>关闭RDB+AOF：</p><ul><li><code>save ""</code>：禁用RDB，禁用的时候仍然可以使用save、bgsave生成rdb文件</li><li><code>appendonly no</code>：禁用AOF，禁用的时候仍然可以使用bgrewriteaof生成aof文件</li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis7-2.0-十大数据类型</title>
      <link href="/2024/04/12/redis7-2.0-shi-da-shu-ju-lei-xing/"/>
      <url>/2024/04/12/redis7-2.0-shi-da-shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis10大数据类型"><a href="#Redis10大数据类型" class="headerlink" title="Redis10大数据类型"></a>Redis10大数据类型</h1><p><strong>数据类型是value的数据类型，key的类型都是字符串</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921367.png" alt="image-20231024213951213"> </p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li><p><code>keys *</code>：查看当前库所有key</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921777.png" alt="image-20231024221029566"> </p></li><li><p><code>exists key</code>：判断某个key是否存在</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921696.png" alt="image-20231024221100601"> </p></li><li><p><code>type key</code>：查看你的key是什么类型</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921702.png" alt="image-20231024221121886"> </p></li><li><p><code>del key</code>：删除指定的key数据</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921712.png" alt="image-20231024221147761"> </p></li><li><p><code>unlink key</code>：非阻塞删除，仅仅将keys从keyspace元数据中删除，真正的删除会在后续异步中操作</p></li><li><p><code>ttl key</code>：查看还有多少秒过期，-1表示永不过期，-2表示已过期</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921338.png" alt="image-20231024221219613"> </p></li><li><p><code>expire key 秒钟</code>：为给定的key设置过期时间</p><ul><li>Redis 的过期时间设置有四种形式：<ol><li>EXPIRE 秒——设置指定的过期时间(秒)，表示的是时间间隔。</li><li>PEXPIRE 毫秒——设置指定的过期时间，以毫秒为单位，表示的是时间间隔。</li><li>EXPIREAT 时间戳-秒——设置指定的 Key 过期的 Unix 时间，单位为秒，表示的是时间/时刻。</li><li>PEXPIREAT 时间戳-毫秒——设置指定的 Key 到期的 Unix 时间，以毫秒为单位，表示的是时间/时刻。</li></ol></li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921323.png" alt="image-20231024223228890"> </p></li><li><p><code>move key dbindex [0-15]</code>：将当前数据库的key移动到给定的数据库db当中</p><ul><li>redis默认携带着16个数据库，默认使用0号数据库</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921029.png" alt="image-20231024223504384"> </p></li><li><p><code>select dbindex</code>：切换数据库[0-15]，默认为0</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310242235415.png" alt="image-20231024223553397"> </p></li><li><p><code>dbsize</code>：查看当前数据库key的数量</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310242236041.png" alt="image-20231024223634020"> </p></li><li><p><code>flushdb</code>：清空当前库</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310242237326.png" alt="image-20231024223705308"> </p></li><li><p><code>flushall</code>：通杀全部库</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310242237686.png" alt="image-20231024223737668"></p></li></ul><h2 id="字符串（String）"><a href="#字符串（String）" class="headerlink" title="字符串（String）"></a>字符串（String）</h2><p>string是redis最基本的类型，一个key对应一个value。</p><p>string类型是二进制安全的，意思是redis的string可以包含任何数据，比如jpg图片或者序列化的对象 。</p><p>string类型是Redis最基本的数据类型，一个redis中字符串value最多可以是512M</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310281127026.png" alt="image-20231028112706990"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921925.png" alt="image-20231028112739153"> </p><h3 id="最常用的命令"><a href="#最常用的命令" class="headerlink" title="最常用的命令"></a>最常用的命令</h3><h4 id="set-key-value"><a href="#set-key-value" class="headerlink" title="set key value"></a>set key value</h4><p><code>set key value [NX|XX] [GET] [EX seconds|PX milliseconds|EXAT unix-time-seconds|PXAT unix-time-milliseconds|KEEPTTL]</code></p><ul><li><p><code>EX seconds</code>：以秒为单位设置过期时间</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921930.png" alt="image-20231026230101867"> </p></li><li><p><code>PX milliseconds</code>：以毫秒为单位设置过期时间</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921922.png" alt="image-20231026230209223"> </p></li><li><p><code>EXAT timestamp</code>：设置以秒为单位的UNIX时间戳所对应的时间为过期时间</p></li><li><p><code>PXAT milliseconds-timestamp</code>：设置以毫秒为单位的UNIX时间戳所对应的时间为过期时间</p></li><li><p><code>NX</code>：键不存在的时候设置键值</p></li><li><p><code>XX</code>：键存在的时候设置键值</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921912.png" alt="image-20231026225730606"> </p></li><li><p><code>KEEPTTL</code><strong>（重要）</strong>：<strong>保留设置前指定键的生存时间</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921919.png" alt="image-20231026230631576"> </p></li><li><p><code>GET</code>：返回指定键原本的值，若键不存在时返回nil</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921751.png" alt="image-20231026225917226"></p></li></ul><h4 id="get-key"><a href="#get-key" class="headerlink" title="get key"></a>get key</h4><h3 id="同时设置-获取多个键值"><a href="#同时设置-获取多个键值" class="headerlink" title="同时设置/获取多个键值"></a>同时设置/获取多个键值</h3><h4 id="MSET-key-value-key-value-……"><a href="#MSET-key-value-key-value-……" class="headerlink" title="MSET key value [key value ……]"></a>MSET key value [key value ……]</h4><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921959.png" alt="image-20231026231216551"> </p><h4 id="MGET-key-key-……"><a href="#MGET-key-key-……" class="headerlink" title="MGET key [key ……]"></a>MGET key [key ……]</h4><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921019.png" alt="image-20231026231234380"> </p><h4 id="mset-mget-msetnx"><a href="#mset-mget-msetnx" class="headerlink" title="mset/mget/msetnx"></a>mset/mget/msetnx</h4><p>msetnx只有在全部键都不存在的情况下才会执行成功</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921032.png" alt="image-20231026231452451"> </p><h3 id="获取指定区间范围内的值"><a href="#获取指定区间范围内的值" class="headerlink" title="获取指定区间范围内的值"></a>获取指定区间范围内的值</h3><h4 id="getrange"><a href="#getrange" class="headerlink" title="getrange"></a>getrange</h4><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921108.png" alt="image-20231026232015484"> </p><h4 id="setrange"><a href="#setrange" class="headerlink" title="setrange"></a>setrange</h4><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921115.png" alt="image-20231026232031029"> </p><h3 id="数值增减"><a href="#数值增减" class="headerlink" title="数值增减"></a>数值增减</h3><p><strong>一定要是数字才能进行增减</strong></p><h4 id="递增数字（INCR-key）"><a href="#递增数字（INCR-key）" class="headerlink" title="递增数字（INCR key）"></a>递增数字（INCR key）</h4><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921797.png" alt="image-20231028110147135"> </p><h4 id="增加指定的整数（INCRBY-key-increment）"><a href="#增加指定的整数（INCRBY-key-increment）" class="headerlink" title="增加指定的整数（INCRBY key increment）"></a>增加指定的整数（INCRBY key increment）</h4><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921885.png" alt="image-20231028110322042"> </p><h4 id="递减数值（DECR-key）"><a href="#递减数值（DECR-key）" class="headerlink" title="递减数值（DECR key）"></a>递减数值（DECR key）</h4><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921921.png" alt="image-20231028110337433"> </p><h4 id="减少指定的整数（DECRBY-key-increment）"><a href="#减少指定的整数（DECRBY-key-increment）" class="headerlink" title="减少指定的整数（DECRBY key increment）"></a>减少指定的整数（DECRBY key increment）</h4><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921919.png" alt="image-20231028110350473"> </p><h3 id="获取字符串长度和内容追加"><a href="#获取字符串长度和内容追加" class="headerlink" title="获取字符串长度和内容追加"></a>获取字符串长度和内容追加</h3><h4 id="STRLEN-key"><a href="#STRLEN-key" class="headerlink" title="STRLEN key"></a>STRLEN key</h4><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921927.png" alt="image-20231028110837268"> </p><h4 id="APPEND-key-value"><a href="#APPEND-key-value" class="headerlink" title="APPEND key value"></a>APPEND key value</h4><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921991.png" alt="image-20231028110848004"> </p><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921764.png" alt="image-20231028111639555"> </p><h4 id="setex（相当于set-expire）"><a href="#setex（相当于set-expire）" class="headerlink" title="setex（相当于set+expire）"></a>setex（相当于set+expire）</h4><p>设置键值对的过期时间</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921761.png" alt="image-20231028111859429"> </p><h4 id="setnx"><a href="#setnx" class="headerlink" title="setnx"></a>setnx</h4><p>当键不存在的时候才会创建成功</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921816.png" alt="image-20231028111915443"> </p><h3 id="getset（先get再set）"><a href="#getset（先get再set）" class="headerlink" title="getset（先get再set）"></a>getset（先get再set）</h3><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921871.png" alt="image-20231028112102913"> </p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>文章点赞、点赞某个商品等情况均可使用<code>INCR key</code></p><h2 id="列表（List）"><a href="#列表（List）" class="headerlink" title="列表（List）"></a>列表（List）</h2><p>Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）</p><p>它的底层实际是个双端链表，最多可以包含 2^32 - 1 个元素 (4294967295, 每个列表超过40亿个元素)</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921830.png" alt="image-20231028112604471"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921895.png" alt="image-20231028112802727"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921606.png" alt="image-20231028112822195"> </p><h3 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="lpush-rpush-lrange"><a href="#lpush-rpush-lrange" class="headerlink" title="lpush/rpush/lrange"></a>lpush/rpush/lrange</h4><p>从左边进</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921738.png" alt="image-20231028113527125"> </p><p>从右边进</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921656.png" alt="image-20231028113543717"> </p><p>遍历的时候两个顺序有所不同</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921740.png" alt="image-20231028113610635"> </p><p><strong>没有rrange，只有lrange</strong></p><h4 id="lpop-rpop"><a href="#lpop-rpop" class="headerlink" title="lpop/rpop"></a>lpop/rpop</h4><p>lpop：从左边弹出</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921742.png" alt="image-20231028113806734"> </p><p>rpop：从右边弹出</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921783.png" alt="image-20231028113846973"> </p><h4 id="lindex"><a href="#lindex" class="headerlink" title="lindex"></a>lindex</h4><p>按照索引下标获得元素（从上到下）</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921557.png" alt="image-20231028114649622"> </p><h4 id="llen"><a href="#llen" class="headerlink" title="llen"></a>llen</h4><p>获取列表中元素个数</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921696.png" alt="image-20231028114719317"> </p><h4 id="lrem-key-数字N-v1"><a href="#lrem-key-数字N-v1" class="headerlink" title="lrem key 数字N v1"></a>lrem key 数字N v1</h4><p>删除N个 值等于v1的元素</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921653.png" alt="image-20231028114921587"> </p><p>删除了list3里面3个值等于v2的元素</p><h4 id="ltrim-key-开始index-结束index"><a href="#ltrim-key-开始index-结束index" class="headerlink" title="ltrim key 开始index 结束index"></a>ltrim key 开始index 结束index</h4><p>截取指定范围的值后再赋值给key</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921846.png" alt="image-20231028115744232"> </p><p>截取5~9号元素赋值给list3（从0开始算）</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921763.png" alt="image-20231028115819108"> </p><h4 id="rpoplpush-源列表-目标列表"><a href="#rpoplpush-源列表-目标列表" class="headerlink" title="rpoplpush 源列表 目标列表"></a>rpoplpush 源列表 目标列表</h4><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921853.png" alt="image-20231028151048798"> </p><p>将list1中的元素弹出，并弹入给list2中</p><p>list1中的元素从最后一个元素开始弹出</p><h4 id="lset-key-index-value"><a href="#lset-key-index-value" class="headerlink" title="lset key index value"></a>lset key index value</h4><p>将列表中index位置的值改成value</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921552.png" alt="image-20231028151659457"> </p><p>将3号索引位置的值改成”Java”</p><h4 id="linsert-key-before-after-已有值-插入的新值"><a href="#linsert-key-before-after-已有值-插入的新值" class="headerlink" title="linsert key before/after 已有值 插入的新值"></a>linsert key before/after 已有值 插入的新值</h4><p>在”Java”前插入”PHP”</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921510.png" alt="image-20231028151959451"> </p><p>在”Java”后插入”Mysql”</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921667.png" alt="image-20231028152034892"> </p><h2 id="哈希表（Hash）"><a href="#哈希表（Hash）" class="headerlink" title="哈希表（Hash）"></a>哈希表（Hash）</h2><p>Redis hash 是一个 string 类型的 field（字段） 和 value（值） 的映射表，hash 特别适合用于存储对象。</p><p>Redis 中每个 hash 可以存储 2^32 - 1 键值对（40多亿）</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921679.png" alt="image-20231028152656920"> </p><p>仍然还是KV键值对的模式，但是value用来存放一对键值对</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921684.png" alt="image-20231028153010474"> </p><h3 id="常用命令-2"><a href="#常用命令-2" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="hset-hget-hmset-hmget-hgetall-hdel"><a href="#hset-hget-hmset-hmget-hgetall-hdel" class="headerlink" title="hset/hget/hmset/hmget/hgetall/hdel"></a>hset/hget/hmset/hmget/hgetall/hdel</h4><p>hset：</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921710.png" alt="image-20231028153435724"> </p><p>hget：</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921391.png" alt="image-20231028153505778"> </p><p>hmset和hset一致</p><p>hmget：可以一次性获取键值对中map里多个键对应的值</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921361.png" alt="image-20231028153930046"> </p><p>hgetall：遍历map所有键和值</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921516.png" alt="image-20231028154242748"> </p><p>hdel：删除键值对</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921436.png" alt="image-20231028154507785"> </p><p>找到age并且把age对应的值也一并删除了</p><h4 id="hlen"><a href="#hlen" class="headerlink" title="hlen"></a>hlen</h4><p>获取某个key内的全部数量</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921574.png" alt="image-20231028154700452"> </p><p>user:001里面只剩下id和name</p><h4 id="hexists-key-在key里面的某个值的key"><a href="#hexists-key-在key里面的某个值的key" class="headerlink" title="hexists key 在key里面的某个值的key"></a>hexists key 在key里面的某个值的key</h4><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921704.png" alt="image-20231028154904963"> </p><p>在user:001这个key里面有name和id两个key，没有score这个key</p><h4 id="hkeys-hvals"><a href="#hkeys-hvals" class="headerlink" title="hkeys/hvals"></a>hkeys/hvals</h4><p>hkeys：获取当前key下的所有key</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921186.png" alt="image-20231028155035935"> </p><p>hvals：获取当前key下的所有key对应的value值</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921666.png" alt="image-20231028155152041"> </p><h4 id="hincrby-hincrbyfloat"><a href="#hincrby-hincrbyfloat" class="headerlink" title="hincrby/hincrbyfloat"></a>hincrby/hincrbyfloat</h4><p>hincrby：让某个值以<strong>整数形式</strong>自增</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921664.png" alt="image-20231028155442902"> </p><p>hincrbyfloat：让某个值以<strong>浮点数形式</strong>自增</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921235.png" alt="image-20231028155648274"> </p><h4 id="hsetnx"><a href="#hsetnx" class="headerlink" title="hsetnx"></a>hsetnx</h4><p>若没有则赋值，若有则无效</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921237.png" alt="image-20231028155810277"> </p><h2 id="集合（Set）"><a href="#集合（Set）" class="headerlink" title="集合（Set）"></a>集合（Set）</h2><p>Redis 的 Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据，集合对象的编码可以是 intset 或者 hashtable。</p><p>Redis 中Set集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。</p><p>集合中最大的成员数为 2^32 - 1 (4294967295, 每个集合可存储40多亿个成员)</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921482.png" alt="image-20231028160255264"> </p><p>单值多value且无重复</p><h3 id="常用命令-3"><a href="#常用命令-3" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="SADD-key-member-member-…"><a href="#SADD-key-member-member-…" class="headerlink" title="SADD key member [member …]"></a>SADD key member [member …]</h4><p>添加元素</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921888.png" alt="image-20231028161653323"> </p><p>由于set的性质不能在集合中插入重复的元素，所以只有五个元素被插入进集合中</p><h4 id="SMEMBERS-key"><a href="#SMEMBERS-key" class="headerlink" title="SMEMBERS key"></a>SMEMBERS key</h4><p>遍历集合中的所有元素</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921030.png" alt="image-20231028162512557"> </p><h4 id="SISMEMBER-key-member"><a href="#SISMEMBER-key-member" class="headerlink" title="SISMEMBER key member"></a>SISMEMBER key member</h4><p>判断元素是否在集合中</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921028.png" alt="image-20231028162526420"> </p><h4 id="SREM-key-member-member-…"><a href="#SREM-key-member-member-…" class="headerlink" title="SREM key member [member …]"></a>SREM key member [member …]</h4><p>删除元素</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921291.png" alt="image-20231028164925685"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921304.png" alt="image-20231028162811721"> </p><h4 id="scard"><a href="#scard" class="headerlink" title="scard"></a>scard</h4><p>获取集合里面的元素个数</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921489.png" alt="image-20231028162843430"> </p><h4 id="SRANDMEMBER-key-数字"><a href="#SRANDMEMBER-key-数字" class="headerlink" title="SRANDMEMBER key [数字]"></a>SRANDMEMBER key [数字]</h4><p>从集合中随机<strong>展现设置的数字个数</strong>元素，元素不删除</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921891.png" alt="image-20231028162922640"> </p><h4 id="SPOP-key-数字"><a href="#SPOP-key-数字" class="headerlink" title="SPOP key [数字]"></a>SPOP key [数字]</h4><p>从集合中随机<strong>弹出</strong>一个元素，弹出一个删一个</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921889.png" alt="image-20231028163328829"> </p><h4 id="smove-key1-key2-在key1里已存在的某个值"><a href="#smove-key1-key2-在key1里已存在的某个值" class="headerlink" title="smove key1 key2 在key1里已存在的某个值"></a>smove key1 key2 在key1里已存在的某个值</h4><p>将key1里已存在的某个值赋给key2</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921894.png" alt="image-20231028163429005"> </p><p>set1中只有1 2 5 三个元素，set2中只有3 4 6三个元素</p><p>把set1中的2移给set2，此时的set1</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921392.png" alt="image-20231028164216988"> </p><h4 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h4><h5 id="差集"><a href="#差集" class="headerlink" title="差集"></a>差集</h5><p>属于集合A但不属于集合B的元素构成的集合</p><p><code>SDIFF key [key ...]</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921387.png" alt="image-20231028173433117"> </p><h5 id="并集"><a href="#并集" class="headerlink" title="并集"></a>并集</h5><p>属于集合A或者属于集合B合并后的元素</p><p><code>SUNION key [key ...]</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921390.png" alt="image-20231028173531764"> </p><h5 id="交集"><a href="#交集" class="headerlink" title="交集"></a>交集</h5><p>属于集合A也属于集合B共同拥有的元素构成的集合</p><p><code>SINTER key [key ...]</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921589.png" alt="image-20231028173641390"> </p><p><code>SINTERCARD numkeys key [key ...] [LIMIT limit]</code></p><p>numkeys：有多少个key</p><p><code>SINTERCARD 2 seta setb</code>：有2个key</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921984.png" alt="image-20231028174143775"> </p><p>seta和setb两个集合的交集元素有3个</p><p>交集元素有三个但是只让他显示一条</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921985.png" alt="image-20231028174421598"> </p><h3 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>抽奖</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921411.png" alt="image-20231028174639836"> </p><ul><li>微信朋友圈点赞查看同赞朋友</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921203.png" alt="image-20231028174910631"> </p><ul><li>QQ可能认识的人</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921421.png" alt="image-20231028175023418"> </p><h2 id="有序集合（ZSet）"><a href="#有序集合（ZSet）" class="headerlink" title="有序集合（ZSet）"></a>有序集合（ZSet）</h2><p>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。</p><p>不同的是每个元素都会关联一个double类型的分数，redis正是通过分数来为集合中的成员进行从小到大的排序。</p><p>zset的成员是唯一的,但分数(score)却可以重复。</p><p>zset集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。 集合中最大的成员数为 2^32 - 1</p><p><strong>zset在set的基础上，每个val值前加一个score分数值，之前set是k1 v1 v2 v3，现在zset是k1 score1 v1 score2 v2。</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921708.png" alt="image-20231028215212310"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921151.png" alt="image-20231028215240393"> </p><h3 id="常用命令-4"><a href="#常用命令-4" class="headerlink" title="常用命令"></a>常用命令</h3><p>向有序集合中加入一个元素和该元素的分数</p><h4 id="ZADD-key-score-member-score-member-…"><a href="#ZADD-key-score-member-score-member-…" class="headerlink" title="ZADD key score member [score member …]"></a>ZADD key score member [score member …]</h4><p>添加元素</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921706.png" alt="image-20231029105506583"> </p><h4 id="ZRANGE-key-start-stop-WITHSCORES"><a href="#ZRANGE-key-start-stop-WITHSCORES" class="headerlink" title="ZRANGE key start stop [WITHSCORES]"></a>ZRANGE key start stop [WITHSCORES]</h4><p>按照元素分数从小到大的顺序返回索引从start到stop之间的所有元素</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921408.png" alt="image-20231029105532053"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921420.png" alt="image-20231029105607518"> </p><h4 id="ZREVRANGE-key-start-stop-WITHSCORES"><a href="#ZREVRANGE-key-start-stop-WITHSCORES" class="headerlink" title="ZREVRANGE key start stop [WITHSCORES]"></a>ZREVRANGE key start stop [WITHSCORES]</h4><p>按照元素分数从大到小的顺序返回索引从start到stop之间的所有元素</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921477.png" alt="image-20231029105810822"> </p><h4 id="ZRANGEBYSCORE-key-min-max-WITHSCORES-LIMIT-offset-count"><a href="#ZRANGEBYSCORE-key-min-max-WITHSCORES-LIMIT-offset-count" class="headerlink" title="ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]"></a>ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]</h4><p>获取指定分数范围</p><ul><li><code>withscore</code>：显示每对键值对的分数</li><li><code>(</code>：不包含</li><li><code>limit</code>：返回限制，limit 开始下标步 多少步</li></ul><p>显示60~90（包含60和90）分的元素</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921514.png" alt="image-20231029110058452"> </p><p>显示60~90（不包含60）的元素</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921505.png" alt="image-20231029110130626"> </p><p>显示大于60小于90的元素（60和90都取不到）</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921200.png" alt="image-20231029110210779"> </p><p>加上limit，要求一次显示多少条（有点像分页查询）</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921223.png" alt="image-20231029110320301"> </p><h4 id="ZSCORE-key-member"><a href="#ZSCORE-key-member" class="headerlink" title="ZSCORE key member"></a>ZSCORE key member</h4><p>获取元素的分数</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921381.png" alt="image-20231029110419739"> </p><h4 id="ZCARD-key"><a href="#ZCARD-key" class="headerlink" title="ZCARD key"></a>ZCARD key</h4><p>获取集合中元素的数量</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921230.png" alt="image-20231029110505866"> </p><h4 id="ZREM-key-某score下对应的value值"><a href="#ZREM-key-某score下对应的value值" class="headerlink" title="ZREM key 某score下对应的value值"></a>ZREM key 某score下对应的value值</h4><p>删除元素</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921286.png" alt="image-20231029110607850"> 删除了”v6”和”v5”</p><h4 id="ZINCRBY-key-increment-member"><a href="#ZINCRBY-key-increment-member" class="headerlink" title="ZINCRBY key increment member"></a>ZINCRBY key increment member</h4><p>增加某个元素的分数</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921387.png" alt="image-20231029110752362"> </p><h4 id="ZCOUNT-key-min-max"><a href="#ZCOUNT-key-min-max" class="headerlink" title="ZCOUNT key min max"></a>ZCOUNT key min max</h4><p>获取指定分数范围内的元素个数</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921392.png" alt="image-20231029111719270"> </p><h4 id="ZMPOP"><a href="#ZMPOP" class="headerlink" title="ZMPOP"></a>ZMPOP</h4><p>从键名列表中的第一个非空排序集中弹出一个或多个元素，他们的成员是分数对</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921394.png" alt="image-20231029114418696"> </p><p>按key的输入顺序从左到右选择第一个非空的有序集合删除并返回元素，numkeys为输入的key数量，必须要等于输入key数，否则会报错，参数为min则从最小开始，参数为max则从最大的开始，count为弹出元素的最大数量，默认是1</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921417.png" alt="image-20231029115854348"> </p><h4 id="ZRANK-key-values"><a href="#ZRANK-key-values" class="headerlink" title="ZRANK key values"></a>ZRANK key values</h4><p>获得下标值</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921371.png" alt="image-20231029120152326"> </p><h4 id="ZREVRANK-key-values"><a href="#ZREVRANK-key-values" class="headerlink" title="ZREVRANK key values"></a>ZREVRANK key values</h4><p>逆序获得下标值</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921379.png" alt="image-20231029120244520"> </p><h3 id="应用场景-2"><a href="#应用场景-2" class="headerlink" title="应用场景"></a>应用场景</h3><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921362.png" alt="image-20231029105408000"> </p><h2 id="位图（bitmap）"><a href="#位图（bitmap）" class="headerlink" title="位图（bitmap）"></a>位图（bitmap）</h2><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921307.png" alt="image-20231024215740300"> </p><p>用在哪？</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921312.png" alt="image-20231029161820053"> </p><p>说明：<strong>用String类型作为底层数据结构实现的一种统计二值状态的数据类型，位图的本质是数组</strong>，它是基于String数据类型的按位的操作。该数组有多个二进制位组成，每个二进制位都对应一个偏移量（就是索引）。</p><p>Bitmap支持的最大位数是<strong>2^32</strong>位，它可以极大的节约存储空间，使用512M内存就可以存储多达42.9亿的字节信息（2^32 = 4294967296）</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921380.png" alt="image-20231029162555281"> </p><h3 id="常用命令-5"><a href="#常用命令-5" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="setbit-key-offset-value"><a href="#setbit-key-offset-value" class="headerlink" title="setbit key offset value"></a>setbit key offset value</h4><p>setbit 键 偏移位 只能0或1</p><p><strong>Bitmap的偏移量是从0开始算的</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921332.png" alt="image-20231029165025330"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921336.png" alt="image-20231029165245577"> </p><h4 id="getbit"><a href="#getbit" class="headerlink" title="getbit"></a>getbit</h4><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921396.png" alt="image-20231029165503402"> </p><h4 id="strlen"><a href="#strlen" class="headerlink" title="strlen"></a>strlen</h4><p>统计字节数占用多少</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921306.png" alt="image-20231029172503087"> </p><p>不是统计字符串长度，而是占据几个字节，超过8位后自己按照8位一组<strong>一byte</strong>再扩容</p><p>0<del>7 8</del>15</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921300.png" alt="image-20231029172716876"> 你看，扩容了</p><h4 id="bitcount-key-start-end"><a href="#bitcount-key-start-end" class="headerlink" title="bitcount key [start end]"></a>bitcount key [start end]</h4><p>全部键里面含有1的有多少个</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921369.png" alt="image-20231029173411168"> </p><p><strong>bitmap是按八个为一组算的，bitcount算的是byte为单位，所以不像setbit和getbit一样可以定位到bit</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921302.png" alt="image-20231029220933100"> </p><p>如上，0<del>1是八个一组，1</del>2是八个一组</p><h4 id="bitop"><a href="#bitop" class="headerlink" title="bitop"></a>bitop</h4><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921409.png" alt="image-20231029174919198"> </p><ul><li>operation：<ul><li>and：交集</li><li>or：并集</li><li>not</li><li>xor</li></ul></li><li>destkey：将生成的结果集要存放的key</li></ul><p>用来判断连续几天签到的用户有多少</p><p>比如先创建两个用户</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921374.png" alt="image-20231029174238991"> </p><p>0号和1号用户都存进uid:map里面</p><p>0、1、2、3号用户在20231029这天都签到了</p><p>0、1号用户在20231030这天签到了</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921157.png" alt="image-20231029174544164"> </p><p>求连续两天签到的用户有多少个（把两个表相交的用户存进新的表k3中）</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921159.png" alt="image-20231029174807195"> </p><h4 id="setbit和getbit的案例说明"><a href="#setbit和getbit的案例说明" class="headerlink" title="setbit和getbit的案例说明"></a>setbit和getbit的案例说明</h4><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921151.png" alt="image-20231029221129350"> </p><h2 id="基数统计（HyperLogLog）"><a href="#基数统计（HyperLogLog）" class="headerlink" title="基数统计（HyperLogLog）"></a>基数统计（HyperLogLog）</h2><p>HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定且是很小的。</p><p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基 数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</p><p>但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p><h3 id="常用命令-6"><a href="#常用命令-6" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="PFADD-key-element-element-…"><a href="#PFADD-key-element-element-…" class="headerlink" title="PFADD key element [element …]"></a>PFADD key element [element …]</h4><p>添加指定元素到HyperLogLog中</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921299.png" alt="image-20231030154208283"> </p><h4 id="PFCOUNT-key-key-…"><a href="#PFCOUNT-key-key-…" class="headerlink" title="PFCOUNT key [key …]"></a>PFCOUNT key [key …]</h4><p>返回给定HyperLogLog的基数估算值（去重）</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921301.png" alt="image-20231030154227639"> </p><h4 id="PFMERGE-destkey-sourcekey-sourcekey-…"><a href="#PFMERGE-destkey-sourcekey-sourcekey-…" class="headerlink" title="PFMERGE destkey sourcekey [sourcekey …]"></a>PFMERGE destkey sourcekey [sourcekey …]</h4><p>将多个HyperLogLog合并为一个HyperLogLog</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921319.png" alt="image-20231030154252584"> </p><h2 id="地理空间（GEO）"><a href="#地理空间（GEO）" class="headerlink" title="地理空间（GEO）"></a>地理空间（GEO）</h2><p>Redis GEO 主要用于存储地理位置信息，并对存储的信息进行操作，包括：</p><p>添加地理位置的坐标。</p><p>获取地理位置的坐标。</p><p>计算两个位置之间的距离。</p><p>根据用户给定的经纬度坐标来获取指定范围内的地理位置集合</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921180.png" alt="image-20231031111832791"> </p><p><strong>获取某个地址的经纬度：</strong></p><p><a href="https://lbs.qq.com/getPoint/">https://lbs.qq.com/getPoint/</a></p><h3 id="常用命令-7"><a href="#常用命令-7" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="GEOADD-key-longitude-latitude-member-longitude-latitude-member-…"><a href="#GEOADD-key-longitude-latitude-member-longitude-latitude-member-…" class="headerlink" title="GEOADD key longitude latitude member [longitude latitude member …]"></a>GEOADD key longitude latitude member [longitude latitude member …]</h4><p>多个经度（longitude）、纬度（latitude）、位置名称（member）添加到指定的key中</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921074.png" alt="image-20231031120157425"> </p><p><strong>解决中文乱码问题</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921157.png" alt="image-20231031120257838"> </p><h4 id="GEOPOS-key-member-member-…"><a href="#GEOPOS-key-member-member-…" class="headerlink" title="GEOPOS key member [member …]"></a>GEOPOS key member [member …]</h4><p>从键里面返回所有给定元素的位置（经度和纬度）</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921154.png" alt="image-20231031120744276"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921178.png" alt="image-20231031121030784"> </p><h4 id="GEODIST-key-member1-member2-m-km-ft-mi"><a href="#GEODIST-key-member1-member2-m-km-ft-mi" class="headerlink" title="GEODIST key member1 member2 [m|km|ft|mi]"></a>GEODIST key member1 member2 [m|km|ft|mi]</h4><p>返回两个给定位置之间的距离</p><ul><li>m：米</li><li>km：千米</li><li>ft：英尺</li><li>mi：英里</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921207.png" alt="image-20231101084255354"> </p><p>不加双引号也可以</p><h4 id="GEORADIUS"><a href="#GEORADIUS" class="headerlink" title="GEORADIUS"></a>GEORADIUS</h4><p>以给定的经纬度为中心，返回与中心的距离不超过给定最大距离的所有位置元素</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921854.png" alt="image-20231101084823466"> </p><ul><li>WITHDIST：返回位置元素的同时，将位置元素与中心之间的距离也一并返回。距离的单位和用户给定的范围单位保持一致</li><li>WITHCOORD：将位置元素的经度和纬度也一并返回</li><li>WITHHASH：以52位有符号整数的形式（Integer），返回位置元素经过元素geohash编码的有序集合分值。这个选项主要用于底层应用或者调试，史记中的作用不大</li><li>COUNT：限定返回的记录数</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921038.png" alt="image-20231101221705540"> </p><h4 id="GEORADIUSBYMEMBER"><a href="#GEORADIUSBYMEMBER" class="headerlink" title="GEORADIUSBYMEMBER"></a>GEORADIUSBYMEMBER</h4><p>跟GEORADIUS类似</p><p>直接输入名字判断在其周围范围内的坐标</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921170.png" alt="image-20231101221946747"> </p><h4 id="GEOHASH-key-member-member-…"><a href="#GEOHASH-key-member-member-…" class="headerlink" title="GEOHASH key member [member …]"></a>GEOHASH key member [member …]</h4><p>返回一个或多个位置元素的Geohash表示</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921204.png" alt="image-20231101220455404"> </p><h2 id="流（Stream）"><a href="#流（Stream）" class="headerlink" title="流（Stream）"></a>流（Stream）</h2><p>Redis Stream 是 Redis 5.0 版本新增加的数据结构。</p><p>Redis Stream 主要用于消息队列（MQ，Message Queue），Redis 本身是有一个 Redis 发布订阅 (pub/sub) 来实现消息队列的功能，但它有个缺点就是消息无法持久化，如果出现网络断开、Redis 宕机等，消息就会被丢弃。</p><p>简单来说发布订阅 (pub/sub) 可以分发消息，但无法记录历史消息。</p><p>而 Redis Stream 提供了消息的持久化和主备复制功能，可以让任何客户端访问任何时刻的数据，并且能记住每一个客户端的访问位置，还能保证消息不丢失</p><h3 id="在redis5-0之前"><a href="#在redis5-0之前" class="headerlink" title="在redis5.0之前"></a>在redis5.0之前</h3><ul><li>使用List实现消息队列</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921249.png" alt="image-20231101223005015"> </p><ul><li>pub/sub</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921389.png" alt="image-20231101223114642"> </p><p>Stream：Redis版本的MQ消息中间件 + 阻塞队列</p><p><strong>实现消息队列，Stream支持消息的持久化、支持自动生成全局唯一ID、支持ack确认消息的模式、支持消费组模式等，让消息队列更加稳定和可靠</strong></p><h3 id="底层结构及原理说明"><a href="#底层结构及原理说明" class="headerlink" title="底层结构及原理说明"></a>底层结构及原理说明</h3><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921546.png" alt="image-20231101224331260"> </p><h3 id="队列相关命令"><a href="#队列相关命令" class="headerlink" title="队列相关命令"></a>队列相关命令</h3><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921804.png" alt="image-20231101224519811"> </p><h4 id="XADD"><a href="#XADD" class="headerlink" title="XADD"></a>XADD</h4><p>添加消息到队列末尾</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921872.png" alt="image-20231101230401836"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921960.png" alt="image-20231101230517488"> </p><ul><li><strong>消息ID</strong>必须要比上一个<strong>消息ID</strong>大（是消息ID，不是id值）</li><li>消息ID默认用星号表示自动生成规矩</li></ul><h4 id="XRANGE"><a href="#XRANGE" class="headerlink" title="XRANGE"></a>XRANGE</h4><p>获取消息队列（可以指定范围），忽略删除的消息</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921957.png" alt="image-20231102220121790"> </p><p>可以在后面加上count限制显示多少条数据</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921034.png" alt="image-20231102220228109"> </p><h4 id="XREVRANGE"><a href="#XREVRANGE" class="headerlink" title="XREVRANGE"></a>XREVRANGE</h4><p>和XRANGE相比区别在于反向获取，ID从大到小</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921480.png" alt="image-20231102220647892"> </p><h4 id="XDEL"><a href="#XDEL" class="headerlink" title="XDEL"></a>XDEL</h4><p>删除消息</p><p>删除messageID=”1698850723494-0”的数据</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921507.png" alt="image-20231102221043982"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921591.png" alt="image-20231102234519698"> </p><h4 id="XTRIM"><a href="#XTRIM" class="headerlink" title="XTRIM"></a>XTRIM</h4><p>限制Stream的长度，如果已经超长会进行截取</p><ul><li><p>MAXLEN：允许的最大长度，对Stream流进行修剪限制长度</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921702.png" alt="image-20231102235454966"> </p></li><li><p>MINID：允许的最小id，从某个id值开始比该id值小的将会被抛弃</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921705.png" alt="image-20231102235649337"></p></li></ul><h4 id="XLEN"><a href="#XLEN" class="headerlink" title="XLEN"></a>XLEN</h4><p>获取Stream中的消息长度</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921735.png" alt="image-20231102234633777"> </p><h4 id="XREAD"><a href="#XREAD" class="headerlink" title="XREAD"></a>XREAD</h4><p>获取消息（阻塞/非阻塞），返回大于指定ID的消息</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921998.png" alt="image-20231105203501223"> </p><ul><li><p>COUNT：最多读取多少条消息</p></li><li><p>BLOCK：是否以阻塞的方式读取消息，默认不阻塞，如果milliseconds设置为0，表示永远阻塞</p></li><li><p>非阻塞：</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921189.png" alt="image-20231105215057785"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921233.png" alt="image-20231105215216538"> </p><ul><li>$代表特殊ID，表示以当前Stream已经存的最大ID作为最后一个ID，当前Stream中不存在大于当前最大ID的消息，因此返回nil</li><li>0-0代表从最小的ID开始获取Stream中的消息，当不指定count，将会返回Stream中的所有消息，注意也可以使用0（00/000也都是可以的）</li></ul></li><li><p>阻塞：</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921333.png" alt="image-20231105215743876"> </p><p>新建客户端，在新的客户端中往mystream中添加消息</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921344.png" alt="image-20231106140417757"> </p><p>此时原来的客户端就会接收到，并且变成非阻塞状态</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921417.png" alt="image-20231106140618729"></p></li></ul><p><strong>总结：</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921875.png" alt="image-20231106140743587"> </p><h3 id="消费组相关指令"><a href="#消费组相关指令" class="headerlink" title="消费组相关指令"></a>消费组相关指令</h3><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921905.png" alt="image-20231101224625822"> </p><h4 id="XGROUP-CREATE"><a href="#XGROUP-CREATE" class="headerlink" title="XGROUP CREATE"></a>XGROUP CREATE</h4><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921917.png" alt="image-20231106141300393"> </p><ul><li>$：表示从流的尾部开始消费</li><li>0：表示从流的头部开始消费</li></ul><p><strong>创建消费者组的时候必须指定ID，ID为0表示从头开始消费，为$表示只消费新的消息，队尾是新来的</strong></p><h4 id="XREADGROUP-GROUP"><a href="#XREADGROUP-GROUP" class="headerlink" title="XREADGROUP GROUP"></a>XREADGROUP GROUP</h4><ul><li><p>“&gt;”：表示从第一条尚未被消费的信息开始读取</p></li><li><p>消费组groupA内的消费者consumer1从mystream消息队列中读取所有消息</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921983.png" alt="image-20231106170726061"> </p><p><strong>stream中的消息一旦被消费组里的一个消费者读取了，就不能再被该消费组内的其他消费者读取了，即同一个消费组里的消费者不能消费同一条信息，刚才的xreadgroup命令再执行一次，此时读到的就会是空值（nil）</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921028.png" alt="image-20231106171033766"> </p></li><li><p>不同消费组的消费者可以消费同一条消息</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921210.png" alt="image-20231106191411026"> </p><p>因为是groupB组的，所以能读取</p></li><li><p>消费组的目的在于：</p><ul><li>让组内的多个消费者共同分担读取消息，所以，通常会让每个消费者读取部分消息，从而实现消息读取负载在多个消费者间是均衡分布的。</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921574.png" alt="image-20231106191755687"></p></li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921774.png" alt="image-20231106192210197"> </p><h4 id="XPENDING"><a href="#XPENDING" class="headerlink" title="XPENDING"></a>XPENDING</h4><ul><li><p>查询每个消费组内所有消费者已读取但未确认的消息</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921576.png" alt="image-20231106192927258"> </p></li><li><p>查看某个消费者具体读取了哪些数据</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921770.png" alt="image-20231106193107455"></p></li></ul><h4 id="XACK"><a href="#XACK" class="headerlink" title="XACK"></a>XACK</h4><p>向队列确认消息处理已经完成</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921810.png" alt="image-20231106193547897"> </p><p><strong>已经确认过的消息会被删除，不会出现在队列里</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921813.png" alt="image-20231106193707008"> </p><h4 id="XINFO-GEOUPS"><a href="#XINFO-GEOUPS" class="headerlink" title="XINFO GEOUPS"></a>XINFO GEOUPS</h4><p>查询消费者组的信息</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921317.png" alt="image-20231106194108138"> </p><h4 id="XINFO-STREAM"><a href="#XINFO-STREAM" class="headerlink" title="XINFO STREAM"></a>XINFO STREAM</h4><p>查询消息队列的信息</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921313.png" alt="image-20231106194145429"> </p><h4 id="XINFO-CONSUMERS"><a href="#XINFO-CONSUMERS" class="headerlink" title="XINFO CONSUMERS"></a>XINFO CONSUMERS</h4><p>查询消费者组里消费者的信息</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921553.png" alt="image-20231106194206819"> </p><h4 id="XGROUP-SETID"><a href="#XGROUP-SETID" class="headerlink" title="XGROUP SETID"></a>XGROUP SETID</h4><p>设置消费者组最后递送消息的ID</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921556.png" alt="image-20231106195447646"> </p><h4 id="XGROUP-DELCONSUMER"><a href="#XGROUP-DELCONSUMER" class="headerlink" title="XGROUP DELCONSUMER"></a>XGROUP DELCONSUMER</h4><p>删除消费者组</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921651.png" alt="image-20231106200047777"> </p><h4 id="XCLAIM"><a href="#XCLAIM" class="headerlink" title="XCLAIM"></a>XCLAIM</h4><p>转移消息的归属权（将长期未处理/无法处理的消息转交给其他消费者组进行处理）</p><h3 id="四个特殊符号"><a href="#四个特殊符号" class="headerlink" title="四个特殊符号"></a>四个特殊符号</h3><h4 id=""><a href="#" class="headerlink" title="- +"></a>- +</h4><p>最小和最大可能出现的ID</p><h4 id="-1"><a href="#-1" class="headerlink" title="$"></a>$</h4><p>表示只消费新的消息，当前流中最大的ID，可用于将要到来的消息</p><h4 id="-2"><a href="#-2" class="headerlink" title=">"></a>&gt;</h4><p>用于<strong>XREADGROUP</strong>命令，表示迄今还没有发送给组中使用者信息，会更新消费者组的最后ID</p><h4 id="-3"><a href="#-3" class="headerlink" title="*"></a>*</h4><p>用于<strong>XADD</strong>命令，让系统自动生成ID</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合框架-1.0-概述</title>
      <link href="/2024/04/11/ji-he-kuang-jia-1.0-gai-shu/"/>
      <url>/2024/04/11/ji-he-kuang-jia-1.0-gai-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="Java集合框架体系"><a href="#Java集合框架体系" class="headerlink" title="Java集合框架体系"></a>Java集合框架体系</h1><p>java.util包下</p><blockquote><p><strong>java.util.Collection:存储一个一个的数据</strong></p></blockquote><ul><li><p>子接口：<code>List</code>：存储有序的，可重复的数据（”动态“数组）</p><ul><li><code>ArrayList</code>(主要实现类)、<code>LinkedList</code>、<code>Vector</code></li></ul></li><li><p>子接口：<code>Set</code>：存储无序的，不可重复的数据（高中集合）</p><ul><li><code>HashSet</code>（主要实现类）、<code>LinkedHashSet</code>、<code>TreeSet</code></li></ul></li></ul><blockquote><p><strong>java.util.Map:存储一对一对的数据（key-value键值对，类似函数y=f(x)，但是不同的key可以指向同一个value）</strong> </p></blockquote><ul><li><code>HashMap</code>（主要实现类）、<code>LinkedHashMap</code>、<code>TreeMap</code>、<code>Hashtable</code>、<code>Properties</code></li></ul><p>学习的程度把握：</p><ul><li>层次1：针对于具体特点的多个数据，知道选择相应的适合的接口的主要实现类，会实例化，会调用常用的方法</li><li>层次2：区分接口中不同的实现类的区别</li><li>层次3：①针对常用的实现类，需要熟悉底层的源码 ②熟悉常见的数据结构</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面试 </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring杂记</title>
      <link href="/2024/04/11/spring-za-ji-1.0/"/>
      <url>/2024/04/11/spring-za-ji-1.0/</url>
      
        <content type="html"><![CDATA[<h1 id="如何概述SpringFramework"><a href="#如何概述SpringFramework" class="headerlink" title="如何概述SpringFramework"></a>如何概述SpringFramework</h1><p>SpringFramework是一个开源的、松耦合的、分层的、可配置的一站式企业级Java开发框架，它的核心是IOC与AOP，它可以更容易的构建出企业级Java应用，并且它可以根据应用开发的组件需要，整合对应的技术</p><ul><li>加入松耦合的概念是为了描述IOC和AOP</li><li>加入可配置的概念是为了给SpringBoot垫底</li></ul><h1 id="为什么使用SpringFramework"><a href="#为什么使用SpringFramework" class="headerlink" title="为什么使用SpringFramework"></a>为什么使用SpringFramework</h1><ul><li>IOC：组件之间的解耦</li><li>AOP：切面编程可以将应用业务做统一或特定的功能增强，能实现应用业务与增强业务的解耦</li><li>容器与事件：管理应用中使用的组件Bean、托管Bean的生命周期、事件与监听器的驱动机制</li><li>Web、事务控制、测试、与其他技术的整合</li></ul><h1 id="依赖查找与依赖注入的对比"><a href="#依赖查找与依赖注入的对比" class="headerlink" title="依赖查找与依赖注入的对比"></a>依赖查找与依赖注入的对比</h1><ul><li>目标作用不同：<ul><li>依赖注入的作用目标通常是类成员</li><li>依赖查找的作用目标可以是方法体内，也可以是方法体外</li></ul></li><li>实现方式不同：<ul><li>依赖注入通常接著一个上下文被动的接收</li><li>以来查找通常主动使用上下文搜索</li></ul></li></ul><h1 id="BeanFactory与ApplicationContext的对比"><a href="#BeanFactory与ApplicationContext的对比" class="headerlink" title="BeanFactory与ApplicationContext的对比"></a>BeanFactory与ApplicationContext的对比</h1><p><code>BeanFactory</code>接口提供了一个<strong>抽象的配置和对象的管理机制</strong>，<code>ApplicationContext</code>是<code>BeanFactory</code>的子接口，它简化了与AOP的整合、消息机制、事件机制，以及与Web环境的扩展（<code>WebApplicationContext</code>等），<code>BeanFactory</code>是没有这些扩展的</p><p><code>ApplicationContext</code>主要扩展了一下功能：</p><ul><li>AOP的支持（<code>AnnotationAwareAspectJAutoProxyCreator</code>作用于Bean的初始化之后）</li><li>配置元信息（<code>BeanDefinition</code>、<code>Environment</code>、注解等）</li><li>资源管理（<code>Resource</code>抽象）</li><li>事件驱动机制（<code>ApplicationEvent</code>、<code>AppliactionListener</code>）</li><li>消息与国际化（<code>LocaleResolver</code>）</li><li><code>Environment</code>抽象（SpringFramework 3.1 以后）</li></ul><h1 id="Autowired注入的原理逻辑"><a href="#Autowired注入的原理逻辑" class="headerlink" title="@Autowired注入的原理逻辑"></a>@Autowired注入的原理逻辑</h1><p>先拿属性对应的类型，去IOC容器中找Bean，如果找到了一个，直接返回；如果找到多个类型一致的Bean，把属性名拿过去，跟这些Bean的id逐个对比，如果有一个相同的直接返回，如果没有任何相同的id与要注入的属性名相同，则会抛出<code>NoUniqueBeanDefinitionException</code>异常</p><h1 id="依赖注入的注入方式"><a href="#依赖注入的注入方式" class="headerlink" title="依赖注入的注入方式"></a>依赖注入的注入方式</h1><table><thead><tr><th>注入方式</th><th>被注入成员是否可变</th><th>是否依赖IOC框架的API</th><th>使用场景</th></tr></thead><tbody><tr><td>构造器注入</td><td>不可变</td><td>否（xml、编程式注入不依赖）</td><td>不可变的固定注入</td></tr><tr><td>参数注入</td><td>不可变</td><td>否（高版本中注解配置类中的<code>@Bean</code>方法参数注入可不标注注解）</td><td>注解配置类中<code>@Bean</code>方法注册bean</td></tr><tr><td>属性注入</td><td>不可变</td><td>是（只能通过标注注解来侵入式注入）</td><td>通常用于不可变的固定注入</td></tr><tr><td>setter注入</td><td>可变</td><td>否（xml、编程式注入不依赖）</td><td>可选属性的注入</td></tr></tbody></table><h1 id="自动注入的注解对比"><a href="#自动注入的注解对比" class="headerlink" title="自动注入的注解对比"></a>自动注入的注解对比</h1><table><thead><tr><th>注解</th><th>注入方式</th><th>是否支持@Primary</th><th>来源</th><th>Bean不存在时处理</th></tr></thead><tbody><tr><td>@Autowired</td><td>根据类型注入</td><td>是</td><td>SpringFramework原生注解</td><td>可指定required=false来避免注入失败</td></tr><tr><td>@Resource</td><td>根据名称注入</td><td>是</td><td>JSR250规范</td><td>容器中不存在指定Bean会抛出异常</td></tr><tr><td>@Inject</td><td>根据类型注入</td><td>是</td><td>JSR330规范（需要导入jar包）</td><td>容器中不存在指定Bean会抛出异常</td></tr></tbody></table><p><code>@Qualifier</code>：如果被标注的成员/方法在根据类型注入时发现有多个相同类型的Bean，则会根据该注解声明的name寻找特定的bean</p><p><code>@Primary</code>：如果有多个相同类型的Bean同时注册到IOC容器中，使用“根据类型注入”的注解时会注入标注<code>@Primary</code>注解的Bean</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面试 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原型模式</title>
      <link href="/2024/04/11/yuan-xing-mo-shi/"/>
      <url>/2024/04/11/yuan-xing-mo-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><blockquote><p>用于创建重复的对象，同时保证性能。实现了一个原型接口，该接口用于创建当前对象的克隆，当直接创建对象的代价比较大的时候，则采用这种模式。即用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p></blockquote><blockquote><p><strong>解决了什么？</strong></p><p>在运行期间建立和删除原型</p><p><strong>什么时候使用？</strong></p><ol><li>当一个系统应该独立于它的产品创建，构成和表示时</li><li>当要实例化的类是在运行时刻指定时，例如动态装载</li><li>为了避免创建一个与产品类层次平行的工厂类层次时</li><li>当一个类的实例只能由几个不同状态组合中的一种时，建立相应数目的原型并克隆他们可能比每次用适合的状态手工实例化该类更方便</li></ol><p><strong>怎么实现？</strong></p><p>利用已有的原型，快速生成和原型对象一样的实例</p></blockquote><blockquote><p><strong>优点</strong></p><ol><li>性能提高</li><li>避免构造函数的约束</li></ol><p><strong>缺点</strong></p><ol><li>配备克隆方法需要对类的功能进行通盘考虑，这对于全新的类不是很难，但对于已有的类不一定很容易，特别当一个类引用不支持串行化的简介对象，或者引用含有循环结构的时候</li><li>必须实现Cloneable接口</li></ol></blockquote><blockquote><p><strong>使用场景</strong></p><ol><li>资源优化场景</li><li>类初始化需要消化非常多的资源，包括数据、硬件资源等</li><li>性能和安全要求的场景</li><li>通过new产生一个对象非常需要繁琐的数据准备或访问权限</li><li>一个对象多个修改者的场景</li><li>一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用</li><li>在实际项目中原型模式很少单独出现，一般和工厂模式一起出现，通过clone方法创建一个对象，然后又工厂提供给调用者</li></ol></blockquote><blockquote><p><strong>Considerations</strong></p><p>与通过一个类进行实例化来构造新对象不同的是，原型模式是通过拷贝一个现有对象生成新对象的。浅拷贝实现Cloneable，重写，深拷贝是通过实现Serializable读取二进制流</p></blockquote><blockquote><p><strong>代码</strong></p><p>创建Shape抽象类，并实现Cloneable接口重写clone方法，使得每一个继承Shape类的类都可以使用clone方法</p><p>Shape.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>       <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>       <span class="token keyword">protected</span> <span class="token class-name">String</span> type<span class="token punctuation">;</span>       <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> type<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> id<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token class-name">Object</span> clone <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>       <span class="token keyword">try</span> <span class="token punctuation">{</span>       clone <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>       e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span> clone<span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>创建继承Shape抽象类的类</p><p>Rectangle.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       type <span class="token operator">=</span> <span class="token string">"Rectangle"</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"This is Rectangle::draw() method."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Circle.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       type <span class="token operator">=</span> <span class="token string">"Circle"</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"This is Circle::draw() method."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Square.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       type <span class="token operator">=</span> <span class="token string">"Square"</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"This is Square::draw() method."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></blockquote><blockquote><p>创建一个类，从数据库中查询出实体类，并把它们存入Hashtable中</p><p>ShapeCache.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Hashtable</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShapeCache</span> <span class="token punctuation">{</span>       <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Hashtable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Shape</span><span class="token punctuation">&gt;</span></span> shapeMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hashtable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Shape</span> <span class="token function">getShape</span><span class="token punctuation">(</span><span class="token class-name">String</span> shapeId<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Shape</span><span class="token punctuation">)</span> shapeMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>shapeId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token comment">//对每种形状都运行数据库查询，并创建该形状</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">loadCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token class-name">Circle</span> circle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           circle<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           shapeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>circle<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> circle<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">Square</span> square <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           square<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           shapeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>square<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> square<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">Rectangle</span> rectangle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           rectangle<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           shapeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>rectangle<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rectangle<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></blockquote><blockquote><p><strong>测试代码</strong></p><p>PrototypePatternDemo.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrototypePatternDemo</span> <span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment">//先加载，从数据库中查询出所有的形状</span>           <span class="token class-name">ShapeCache</span><span class="token punctuation">.</span><span class="token function">loadCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//查出来的并不是直接获取形状的实体类，而是其克隆的类</span>           <span class="token class-name">Shape</span> cloneShape <span class="token operator">=</span> <span class="token class-name">ShapeCache</span><span class="token punctuation">.</span><span class="token function">getShape</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Shape: "</span> <span class="token operator">+</span> cloneShape<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           cloneShape<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">Shape</span> cloneShape2 <span class="token operator">=</span> <span class="token class-name">ShapeCache</span><span class="token punctuation">.</span><span class="token function">getShape</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Shape: "</span> <span class="token operator">+</span> cloneShape2<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           cloneShape2<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">Shape</span> cloneShape3 <span class="token operator">=</span> <span class="token class-name">ShapeCache</span><span class="token punctuation">.</span><span class="token function">getShape</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Shape: "</span> <span class="token operator">+</span> cloneShape3<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           cloneShape3<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></blockquote><blockquote><p><strong>运行结果</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202403171114744.png" alt="image-20240317111445667"> </p></blockquote><blockquote><p>UML类图</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202403171128624.png" alt="image-20240317112813576"> </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 创建型模式 </tag>
            
            <tag> 原型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ-2.0-非boot方式发送消息</title>
      <link href="/2024/04/11/rocketmq-2.0-fei-boot-fang-shi-fa-song-xiao-xi/"/>
      <url>/2024/04/11/rocketmq-2.0-fei-boot-fang-shi-fa-song-xiao-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="发送一条消息"><a href="#发送一条消息" class="headerlink" title="发送一条消息"></a>发送一条消息</h1><ol><li><p>创建一个demo文件夹</p></li><li><p>创建ASimpleTest.java，pom包导入junit，用@Test的测试单例去模拟启动生产者和消费者</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404110936430.png" alt="image-20240411093540868"> </p></li><li><p>将RocketMQ在的服务器ip单独抽离，后面会重复使用</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MqConstant</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> <span class="token constant">NAME_SRV_ADDR</span> <span class="token operator">=</span> <span class="token string">"192.168.183.131:9876"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>生产者</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 生产者</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">simpleProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token comment">// 创建一个生产者并指定组名</span>    <span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">"test-producer-group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 连接namesrv</span>    producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">MqConstant</span><span class="token punctuation">.</span><span class="token constant">NAME_SRV_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 启动</span>    producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建一个消息</span>        <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"testTopic"</span><span class="token punctuation">,</span> <span class="token string">"我是一条简单的消息"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 发送消息</span>        <span class="token class-name">SendResult</span> sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sendResult<span class="token punctuation">.</span><span class="token function">getSendStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 关闭生产者</span>    producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>消费者</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 消费者</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">simpleConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token comment">// 不管是push还是pull，底层都是pull模式，通过长轮询的方案实现</span>    <span class="token comment">// 创建一个消费者</span>    <span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">"test-consumer-group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        DefaultMQPullConsumer pullConsumer = new DefaultMQPullConsumer("test-consumer-group");</span>    <span class="token comment">// 连接namesrv</span>    consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">MqConstant</span><span class="token punctuation">.</span><span class="token constant">NAME_SRV_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 订阅一个主题   * 表示订阅这个主题中所有的消息，后期会有消息过滤</span>    consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"testTopic"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置消息监听器（一直监听，异步回调方式）</span>    consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">ConsumeConcurrentlyStatus</span> <span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">ConsumeConcurrentlyContext</span> consumeConcurrentlyContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 这个就是消费的方法（业务处理）</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是消费者"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费的上下文："</span> <span class="token operator">+</span> consumeConcurrentlyContext<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 返回值 CONSUME_SUCCESS成功，表示消息会从mq出队，</span>            <span class="token comment">// RECONSUME_LATER（报错/null）失败，消息会重新回到mq队列，过一会重新投递出来，给当前消费者或者其他消费者消费</span>            <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span><span class="token constant">CONSUME_SUCCESS</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 启动</span>    consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 挂起当前的jvm</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><h1 id="发送一条异步消息"><a href="#发送一条异步消息" class="headerlink" title="发送一条异步消息"></a>发送一条异步消息</h1><ol><li><p>BSyncTest.java中添加生产异步消息的生产者</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404132240621.png" alt="image-20240411100121420"> </p></li><li><p>消费者</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">asyncProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">"async-producer-group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">MqConstant</span><span class="token punctuation">.</span><span class="token constant">NAME_SRV_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"asyncTopic"</span><span class="token punctuation">,</span> <span class="token string">"我是一条异步消息"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SendCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token class-name">SendResult</span> sendResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发送成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onException</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发送失败"</span> <span class="token operator">+</span> throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"先执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><h1 id="发送一条单向消息"><a href="#发送一条单向消息" class="headerlink" title="发送一条单向消息"></a>发送一条单向消息</h1><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404111001159.png" alt="image-20240411100153991"> </p><h2 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onewayProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">"oneway-producer-group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">MqConstant</span><span class="token punctuation">.</span><span class="token constant">NAME_SRV_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"onewayTopic"</span><span class="token punctuation">,</span> <span class="token string">"日志xxx"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">sendOneway</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成功发送一条单向消息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 消费者</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onewayConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token comment">// 不管是push还是pull，底层都是pull模式，通过长轮询的方案实现</span>    <span class="token comment">// 创建一个消费者</span>    <span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">"oneway-consumer-group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        DefaultMQPullConsumer pullConsumer = new DefaultMQPullConsumer("test-consumer-group");</span>    <span class="token comment">// 连接namesrv</span>    consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">MqConstant</span><span class="token punctuation">.</span><span class="token constant">NAME_SRV_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 订阅一个主题   * 表示订阅这个主题中所有的消息，后期会有消息过滤</span>    consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"onewayTopic"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置消息监听器（一直监听，异步回调方式）</span>    consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">ConsumeConcurrentlyStatus</span> <span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">ConsumeConcurrentlyContext</span> consumeConcurrentlyContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 这个就是消费的方法（业务处理）</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是消费者"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费的上下文："</span> <span class="token operator">+</span> consumeConcurrentlyContext<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 返回值 CONSUME_SUCCESS成功，表示消息会从mq出队，</span>            <span class="token comment">// RECONSUME_LATER（报错/null）失败，消息会重新回到mq队列，过一会重新投递出来，给当前消费者或者其他消费者消费</span>            <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span><span class="token constant">CONSUME_SUCCESS</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 启动</span>    consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 挂起当前的jvm</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="发送一条延迟消息"><a href="#发送一条延迟消息" class="headerlink" title="发送一条延迟消息"></a>发送一条延迟消息</h1><p><code>message.setDelayTimeLevel(3);</code>：</p><p>给消息设置一个延迟等级（一共有十八个等级）</p><p>1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h</p><h2 id="生产者-1"><a href="#生产者-1" class="headerlink" title="生产者"></a>生产者</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 生产者</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">msProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">"ms-producer-group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">MqConstant</span><span class="token punctuation">.</span><span class="token constant">NAME_SRV_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"orderMsTopic"</span><span class="token punctuation">,</span> <span class="token string">"订单号， 座位号"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 给消息设置一个延迟等级（一共有十八个等级）</span>    <span class="token comment">// 1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h</span>    message<span class="token punctuation">.</span><span class="token function">setDelayTimeLevel</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="消费者-1"><a href="#消费者-1" class="headerlink" title="消费者"></a>消费者</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 消费者</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">msConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">"ms-consumer-group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">MqConstant</span><span class="token punctuation">.</span><span class="token constant">NAME_SRV_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"orderMsTopic"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">ConsumeConcurrentlyStatus</span> <span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">ConsumeConcurrentlyContext</span> consumeConcurrentlyContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 消费的方法</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是消费者"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费的上下文："</span> <span class="token operator">+</span> consumeConcurrentlyContext<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span><span class="token constant">CONSUME_SUCCESS</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="发送一组消息"><a href="#发送一组消息" class="headerlink" title="发送一组消息"></a>发送一组消息</h1><h2 id="生产者-2"><a href="#生产者-2" class="headerlink" title="生产者"></a>生产者</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBatchProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">"batch-producer-group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">MqConstant</span><span class="token punctuation">.</span><span class="token constant">NAME_SRV_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&gt;</span></span> messages <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"BatchTopic"</span><span class="token punctuation">,</span> <span class="token string">"一组消息里的A消息"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"BatchTopic"</span><span class="token punctuation">,</span> <span class="token string">"一组消息里的B消息"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"BatchTopic"</span><span class="token punctuation">,</span> <span class="token string">"一组消息里的C消息"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"BatchTopic"</span><span class="token punctuation">,</span> <span class="token string">"一组消息里的D消息"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SendResult</span> sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>messages<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sendResult<span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>消息监听里<code>MessageListenerConcurrently</code>是并发模式，多线程的，失败了会重试16次</p><h2 id="消费者-2"><a href="#消费者-2" class="headerlink" title="消费者"></a>消费者</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBatchConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">"batch-consumer-group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">MqConstant</span><span class="token punctuation">.</span><span class="token constant">NAME_SRV_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"BatchTopic"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">ConsumeConcurrentlyStatus</span> <span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">ConsumeConcurrentlyContext</span> consumeConcurrentlyContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 这里执行消费的代码，默认是多线程消费</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"----"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span><span class="token constant">CONSUME_SUCCESS</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="发送顺序消息"><a href="#发送顺序消息" class="headerlink" title="发送顺序消息"></a>发送顺序消息</h1><p>在发送消息的时候要按顺序发送</p><p>定义一个MsgModel</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404111020147.png" alt="image-20240411102057125"> </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MsgModel</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> orderSn<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> userId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span><span class="token comment">// 下单 短信 物流</span><span class="token punctuation">}</span></code></pre><p>yml配置连接数据库：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>    <span class="token key atrule">datasource</span><span class="token punctuation">:</span>        <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver        <span class="token key atrule">username</span><span class="token punctuation">:</span> root        <span class="token key atrule">password</span><span class="token punctuation">:</span> Hzx492357816        <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/rcktest<span class="token punctuation">?</span>serverTimezone=GMT%2B8</code></pre><p>mysql数据库</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404111046650.png" alt="image-20240411104617625"> </p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/* Navicat Premium Data Transfer Source Server         : localhost Source Server Type    : MySQL Source Server Version : 80031 Source Host           : localhost:3306 Source Schema         : rcktest Target Server Type    : MySQL Target Server Version : 80031 File Encoding         : 65001 Date: 11/04/2024 10:46:34*/</span><span class="token keyword">SET</span> NAMES utf8mb4<span class="token punctuation">;</span><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Table structure for order_oper_log</span><span class="token comment">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>order_oper_log<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>order_oper_log<span class="token punctuation">`</span></span>  <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'id'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>type<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb3 <span class="token keyword">COLLATE</span> utf8mb3_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>order_sn<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb3 <span class="token keyword">COLLATE</span> utf8mb3_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>user<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb3 <span class="token keyword">COLLATE</span> utf8mb3_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">,</span>  <span class="token keyword">UNIQUE</span> <span class="token keyword">INDEX</span> <span class="token identifier"><span class="token punctuation">`</span>order_unique_sn<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>order_sn<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">29</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> utf8mb3 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8mb3_general_ci ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Records of order_oper_log</span><span class="token comment">-- ----------------------------</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>order_oper_log<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">,</span> <span class="token string">'111'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>order_oper_log<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'60f0e378-698e-45f5-ba5d-ef2c08efb9b7'</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>order_oper_log<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'80a2aecd-ec6e-4f09-a186-579ebd221bba'</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>order_oper_log<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'e245548f-0e28-4f28-bc9f-1fa3f298dfac'</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>order_oper_log<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'3eaf357a-c753-4057-8b88-e7738eb37b48'</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><p>生产者：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">orderlyProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">"orderly-producer-group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">MqConstant</span><span class="token punctuation">.</span><span class="token constant">NAME_SRV_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 发送顺序消息 发送时要确保有序 并且要发到同一个队列里面</span>    msgModels<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>msgModel <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"orderlyTopic"</span><span class="token punctuation">,</span> msgModel<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 发 相同的订单号去相同的队列</span>            producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MessageQueueSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token class-name">MessageQueue</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">&gt;</span></span> mqs<span class="token punctuation">,</span> <span class="token class-name">Message</span> msg<span class="token punctuation">,</span> <span class="token class-name">Object</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// 选择队列</span>                    <span class="token keyword">int</span> hashCode <span class="token operator">=</span> arg<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 取模</span>                    <span class="token keyword">int</span> i <span class="token operator">=</span> hashCode <span class="token operator">%</span> mqs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> mqs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> msgModel<span class="token punctuation">.</span><span class="token function">getOrderSn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发送完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>消费者</p><p>将消息监听设置为<code>MessageListenerOrderly</code>单线程消费</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">orderlyConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">"orderly-consumer-group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">MqConstant</span><span class="token punctuation">.</span><span class="token constant">NAME_SRV_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"orderlyTopic"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// MessageListenerConcurrently 并发模式 多线程的 重试16次</span>    <span class="token comment">// MessageListenerOrderly 顺序模式 单线程</span>    consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerOrderly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">ConsumeOrderlyStatus</span> <span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">ConsumeOrderlyContext</span> consumeOrderlyContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程id: "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">ConsumeOrderlyStatus</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="发送带Tag的消息"><a href="#发送带Tag的消息" class="headerlink" title="发送带Tag的消息"></a>发送带Tag的消息</h1><p>生产者</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 生产者</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tagProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">"tag-producer-group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">MqConstant</span><span class="token punctuation">.</span><span class="token constant">NAME_SRV_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Message</span> message1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"tagTopic"</span><span class="token punctuation">,</span> <span class="token string">"vip1"</span><span class="token punctuation">,</span> <span class="token string">"我是v1的文章"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Message</span> message2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"tagTopic"</span><span class="token punctuation">,</span> <span class="token string">"vip2"</span><span class="token punctuation">,</span> <span class="token string">"我是v2的文章"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message1<span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发送成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>消费者在消费消息的时候可以加入过滤，指定哪些带了tag的消息会被消费，哪些不会</p><p>消费者消费tag为vip1的消息</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 消费者 vip1</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tagConsumer1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">"tag-consumer-group-a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">MqConstant</span><span class="token punctuation">.</span><span class="token constant">NAME_SRV_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"tagTopic"</span><span class="token punctuation">,</span> <span class="token string">"vip1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">ConsumeConcurrentlyStatus</span> <span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">ConsumeConcurrentlyContext</span> consumeConcurrentlyContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是vip1的消费者"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span><span class="token constant">CONSUME_SUCCESS</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>消费者消费vip1和vip2的消息</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 消费者 vip2</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tagConsumer2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">"tag-consumer-group-b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">MqConstant</span><span class="token punctuation">.</span><span class="token constant">NAME_SRV_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// String[] tags = subString.split("\\|\\|"); 源码里面是通过||区分标签的</span>    consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"tagTopic"</span><span class="token punctuation">,</span> <span class="token string">"vip1 || vip2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">ConsumeConcurrentlyStatus</span> <span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">ConsumeConcurrentlyContext</span> consumeConcurrentlyContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是vip2的消费者"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span><span class="token constant">CONSUME_SUCCESS</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="发送带Key的消息"><a href="#发送带Key的消息" class="headerlink" title="发送带Key的消息"></a>发送带Key的消息</h1><p>自定义唯一Key<code>String key = UUID.randomUUID().toString();</code></p><p>生产者</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Key 业务参数 我们自身要确保唯一 * 为了查阅和去重 * @throws Exception */</span><span class="token comment">// 生产者</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">keyProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">"key-producer-group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">MqConstant</span><span class="token punctuation">.</span><span class="token constant">NAME_SRV_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"keyTopic"</span><span class="token punctuation">,</span> <span class="token string">"vip1"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token string">"我是vip1的文章"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发送成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>消费者</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 消费者</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">keyConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">"key-consumer-gruop"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">MqConstant</span><span class="token punctuation">.</span><span class="token constant">NAME_SRV_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"keyTopic"</span><span class="token punctuation">,</span> <span class="token string">"vip1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">ConsumeConcurrentlyStatus</span> <span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">ConsumeConcurrentlyContext</span> consumeConcurrentlyContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">MessageExt</span> messageExt <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是keyTopic的vip1消费者"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>messageExt<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"业务的标识: "</span> <span class="token operator">+</span> messageExt<span class="token punctuation">.</span><span class="token function">getKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span><span class="token constant">CONSUME_SUCCESS</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="消息重试"><a href="#消息重试" class="headerlink" title="消息重试"></a>消息重试</h1><p>生产者</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 生产者 * @throws Exception */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">retryProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">"retry-producer-group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">MqConstant</span><span class="token punctuation">.</span><span class="token constant">NAME_SRV_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 生产者发送消息 重试次数</span>    producer<span class="token punctuation">.</span><span class="token function">setRetryTimesWhenSendFailed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">setRetryTimesWhenSendAsyncFailed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"retryTopic"</span><span class="token punctuation">,</span> <span class="token string">"vip1"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token string">"我是vip1的文章"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发送成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>  消息重试的时间是根据延迟等级来推进的</p><p>  1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h</p><ul><li>延迟等级（一共有十八个等级）</li><li>默认重试16次</li><li>1.能否自定义重试次数？</li><li>2.如果重试了16次（并发模式）顺序模式下（int最大值次）还是失败？是一个死信消息 则会放在一个死信主题中去：%DLQ%retry-consumer-group</li><li>3.当消息处理失败的时候，该如何正确的处理？</li></ul></blockquote><p>消费者</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 消息重试的时间是根据延迟等级来推进的 * 1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h * 延迟等级（一共有十八个等级） * 默认重试16次 * 1.能否自定义重试次数？ * 2.如果重试了16次（并发模式）顺序模式下（int最大值次）还是失败？是一个死信消息 则会放在一个死信主题中去：%DLQ%retry-consumer-group * 3.当消息处理失败的时候，该如何正确的处理？ * @throws Exception */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">retryConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">"retry-consumer-group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">MqConstant</span><span class="token punctuation">.</span><span class="token constant">NAME_SRV_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"retryTopic"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设定重试次数</span>    consumer<span class="token punctuation">.</span><span class="token function">setMaxReconsumeTimes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">ConsumeConcurrentlyStatus</span> <span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">ConsumeConcurrentlyContext</span> consumeConcurrentlyContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">MessageExt</span> messageExt <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>messageExt<span class="token punctuation">.</span><span class="token function">getReconsumeTimes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>messageExt<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 业务报错 返回null 返回RECONSUME_LATER 都会重试</span>            <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span><span class="token constant">RECONSUME_LATER</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>消费者自定义重试次数</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * * @throws Exception */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">retryDeadConsumer2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">"retry-dead-consumer-group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">MqConstant</span><span class="token punctuation">.</span><span class="token constant">NAME_SRV_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"retryTopic"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设定重试次数</span>    consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">ConsumeConcurrentlyStatus</span> <span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">ConsumeConcurrentlyContext</span> consumeConcurrentlyContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">MessageExt</span> messageExt <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 业务处理</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment">// 对业务处理的代码进行try-catch</span>                <span class="token function">handleDb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 重试</span>                <span class="token keyword">int</span> reconsumeTimes <span class="token operator">=</span> messageExt<span class="token punctuation">.</span><span class="token function">getReconsumeTimes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>reconsumeTimes <span class="token operator">&gt;=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// 重试到一定次数就不要重试了</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通知人工接入处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span><span class="token constant">CONSUME_SUCCESS</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span><span class="token constant">RECONSUME_LATER</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span><span class="token constant">CONSUME_SUCCESS</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleDb</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="消费死信队列"><a href="#消费死信队列" class="headerlink" title="消费死信队列"></a>消费死信队列</h1><p>死信队列topic：<code>%DLQ%retry-consumer-group</code></p><p>消费者</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 消费死信队列的消费者 * 直接监听死信主题的消息，记录并通知人工接入处理 * @throws Exception */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">retryDeadConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">"retry-dead-consumer-group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">MqConstant</span><span class="token punctuation">.</span><span class="token constant">NAME_SRV_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"%DLQ%retry-consumer-group"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设定重试次数</span>    consumer<span class="token punctuation">.</span><span class="token function">setMaxReconsumeTimes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">ConsumeConcurrentlyStatus</span> <span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">ConsumeConcurrentlyContext</span> consumeConcurrentlyContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">MessageExt</span> messageExt <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通知人工接入处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>messageExt<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span><span class="token constant">CONSUME_SUCCESS</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> RocketMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> RocketMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>友链头像</title>
      <link href="/2024/04/10/you-lian-tou-xiang/"/>
      <url>/2024/04/10/you-lian-tou-xiang/</url>
      
        <content type="html"><![CDATA[<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404100951218.png"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"爱划水的鸟"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"这个人很懒，什么都没留下~ (´・ω・`)"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://xenenen.top"</span><span class="token punctuation">}</span></code></pre><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404100951218.png" alt="66883941ec6b1cec8f6ae2095d1397b"></p>]]></content>
      
      
      <categories>
          
          <category> avatar </category>
          
      </categories>
      
      
        <tags>
            
            <tag> avatar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>live2d</title>
      <link href="/2024/04/09/live2d/"/>
      <url>/2024/04/09/live2d/</url>
      
        <content type="html"><![CDATA[<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/live2d/css/live2d.css<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>landlord<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>live2d<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>280<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>250<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>live2d<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hide-button<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>隐藏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/jquery/2.2.4/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> message_Path <span class="token operator">=</span> <span class="token string">'/live2d/'</span>    <span class="token keyword">var</span> home_Path <span class="token operator">=</span> <span class="token string">'https://qetuop91.github.io/'</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/live2d/js/live2d.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/live2d/js/message.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">loadlive2d</span><span class="token punctuation">(</span><span class="token string">"live2d"</span><span class="token punctuation">,</span> <span class="token string">"/live2d/model/tia/model.json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// loadlive2d("live2d", "/live2d/model/nn/nn.model3.json");</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> live2d </category>
          
      </categories>
      
      
        <tags>
            
            <tag> live2d </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建造者模式</title>
      <link href="/2024/04/09/jian-zao-zhe-mo-shi/"/>
      <url>/2024/04/09/jian-zao-zhe-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h1><blockquote><p>使用多个简单的对象一步一步构建成一个复杂的对象。将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示</p></blockquote><blockquote><p><strong>解决了什么？</strong></p><p>一个复杂对象的创建工作，通常由各个部分的子对象用一定的算法构成，由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将他们组合在一起的算法相对稳定。</p><p><strong>什么时候使用？</strong></p><p>一些基本部件不会变，而其组合经常变化的时候</p><p><strong>怎么实现？</strong></p><p>将变和不变分离开</p></blockquote><blockquote><p><strong>优点</strong></p><ul><li>分离构建过程和表示，使得构建过程更加灵活，可以构建不同的表示</li><li>可以更好地控制和构建过程，隐藏具体构建细节</li><li>代码复用性高，可以在不同的构建过程中重复使用相同的构建者</li></ul></blockquote><blockquote><p><strong>缺点</strong></p><ul><li>如果产品的属性较少，建造者模式可能会导致代码冗余</li><li>建造者模式增加了系统的类和对象数量</li></ul></blockquote><blockquote><p><strong>使用场景</strong></p><ol><li>需要生成的对象具有复杂的内部结构</li><li>需要生成的对象内部属性本身互相依赖</li></ol></blockquote><blockquote><p><strong>Considerations</strong></p><p>与工厂模式的区别是，建造者模式更加关注与零件装配的顺序</p></blockquote><p><strong>代码</strong></p><p>“基类”</p><p>Item.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 一个Item需要由食品名、打包方式、价格构成</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Item</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Packing</span> <span class="token function">packing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Packing.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 打包方式会根据不同的食品进行区分，所以并不在这里进行实现，而是定义接口，等到具体情况再进行区分实现</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Packing</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">pack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Meal.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token comment">// 菜单类，需要有添加菜品、计算总价、展示价格单的功能</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Meal</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">&gt;</span></span> items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addItem</span><span class="token punctuation">(</span><span class="token class-name">Item</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>      items<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">getCost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">float</span> cost <span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Item</span> item <span class="token operator">:</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>          cost <span class="token operator">+=</span> item<span class="token punctuation">.</span><span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> cost<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Item</span> item <span class="token operator">:</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Item: "</span> <span class="token operator">+</span> item<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Packing: "</span> <span class="token operator">+</span> item<span class="token punctuation">.</span><span class="token function">packing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Price: "</span> <span class="token operator">+</span> item<span class="token punctuation">.</span><span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>根据不同的打包方式实现Packing</p><p>Bottle.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 食物打包方式（装冷饮用的Bottle）</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bottle</span> <span class="token keyword">implements</span> <span class="token class-name">Packing</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">pack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Bottle"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Wrapper.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 食物的打包方式（装汉堡的包装纸）</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Wrapper</span> <span class="token keyword">implements</span> <span class="token class-name">Packing</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">pack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Wrapper"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>实现Item接口的子类（冷饮套餐和食物套餐）</p><p>ColdDrink.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 冷饮套餐，需要有打包方式及价格</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ColdDrink</span> <span class="token keyword">implements</span> <span class="token class-name">Item</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Packing</span> <span class="token function">packing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Bottle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">float</span> <span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Burger.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 汉堡套餐（需要有打包方式和价格）</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Burger</span> <span class="token keyword">implements</span> <span class="token class-name">Item</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Packing</span> <span class="token function">packing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Wrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">float</span> <span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>具体的食物类</p><p>VegBurger.java（继承Burger类）</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 蔬菜汉堡，汉堡下的分类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VegBurger</span>  <span class="token keyword">extends</span> <span class="token class-name">Burger</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"Veg Burger"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">25.0f</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>ChickenBurger.java（继承Burger类）</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 鸡肉汉堡，汉堡下的分类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChickenBurger</span> <span class="token keyword">extends</span> <span class="token class-name">Burger</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"Chicken Burger"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">50.5f</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Coke.java（继承ColdDrink类）</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 可口可乐，冷饮下的分类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Coke</span> <span class="token keyword">extends</span> <span class="token class-name">ColdDrink</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"Coke"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">30.0f</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Pepsi.java（继承ColdDrink类）</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 百事可乐，冷饮下的分类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pepsi</span> <span class="token keyword">extends</span> <span class="token class-name">ColdDrink</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"Pepsi"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">30.0f</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>构建套餐</p><p>MealBuilder.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 构建菜单类，用户并不实际使用Meal类，而是使用MealBuilder类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MealBuilder</span> <span class="token punctuation">{</span>    <span class="token comment">// 素菜套餐</span>    <span class="token keyword">public</span> <span class="token class-name">Meal</span> <span class="token function">prepareVegMeal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Meal</span> meal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Meal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        meal<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VegBurger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        meal<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Coke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> meal<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 非素套餐</span>    <span class="token keyword">public</span> <span class="token class-name">Meal</span> <span class="token function">prepareNonVegMeal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Meal</span> meal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Meal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        meal<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChickenBurger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        meal<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pepsi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> meal<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Meal</span> <span class="token function">prepareAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Meal</span> meal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Meal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        meal<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VegBurger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        meal<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChickenBurger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        meal<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Coke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        meal<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pepsi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> meal<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试代码</p><p>BuilderPatternDemo.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BuilderPatternDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 调用已经创建好的菜单，而不是自己去创建菜单</span>        <span class="token class-name">MealBuilder</span> mealBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MealBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 从已有菜单中获取素菜套餐</span>        <span class="token class-name">Meal</span> vegMeal <span class="token operator">=</span> mealBuilder<span class="token punctuation">.</span><span class="token function">prepareVegMeal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Veg Meal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Meal类里写了展示菜单的方法</span>        vegMeal<span class="token punctuation">.</span><span class="token function">showItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Total Cost: "</span> <span class="token operator">+</span> vegMeal<span class="token punctuation">.</span><span class="token function">getCost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 从已有菜单中获取非素套餐</span>        <span class="token class-name">Meal</span> nonVegMeal <span class="token operator">=</span> mealBuilder<span class="token punctuation">.</span><span class="token function">prepareNonVegMeal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Non Veg Meal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Meal类里写了展示菜单的方法</span>        nonVegMeal<span class="token punctuation">.</span><span class="token function">showItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Total Cost: "</span> <span class="token operator">+</span> nonVegMeal<span class="token punctuation">.</span><span class="token function">getCost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取全部套餐</span>        <span class="token class-name">Meal</span> allMeal <span class="token operator">=</span> mealBuilder<span class="token punctuation">.</span><span class="token function">prepareAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"All Meal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        allMeal<span class="token punctuation">.</span><span class="token function">showItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Total Cost: "</span> <span class="token operator">+</span> allMeal<span class="token punctuation">.</span><span class="token function">getCost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202403161130758.png" alt="image-20240316113012698"> </p><p>UML类图</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202403161111423.png" alt="image-20240316111146323"> </p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 创建型模式 </tag>
            
            <tag> 建造者模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/2024/04/09/dan-li-mo-shi/"/>
      <url>/2024/04/09/dan-li-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><blockquote><p>涉及到一个单一的类，由该类<strong>负责创建自己的对象</strong>且同时<strong>确保只有一个对象被创建</strong>。</p><p>提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象</p></blockquote><blockquote><p><strong>注意：</strong></p><ol><li>单例类只能有一个实例</li><li>单例类必须创建自己的唯一实例</li><li>单例类必须给所有其他对象提供这一实例</li></ol></blockquote><blockquote><p><strong>解决了什么？</strong><br>一个全局使用的类被频繁的创建与销毁</p><p><strong>什么时候使用？</strong><br>当想控制实例的数目、节省系统资源的时候</p><p><strong>怎么实现？</strong><br>创建一个方法去判断系统是否已经拥有这个单例，有则返回，没有则创建</p></blockquote><blockquote><p><strong>优点</strong></p><ol><li>在内存里只有一个实例，减少了内存的开销，尤其是频繁的对类的创建和销毁</li><li>避免对资源的多重占用（写文件操作）</li></ol></blockquote><blockquote><p><strong>缺点</strong><br>没有接口、不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化</p></blockquote><blockquote><p><strong>使用场景</strong></p><ol><li>要求生产唯一序列号</li><li>WEB中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来</li><li>创建的一个对象需要消耗的资源过多，比如I/O与数据库的连接等</li></ol></blockquote><blockquote><p><strong>Considerations</strong></p><p>getInstance()方法中需要使用同步锁synchronized(Singleton.class)防止多线程同时进入造成instance被多次实例化</p></blockquote><p><strong>代码</strong></p><p>SingleObject（基本实现）</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleObject</span> <span class="token punctuation">{</span>    <span class="token comment">//创建一个SingleObject的私有对象</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SingleObject</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//把构造器私有化，不允许外部直接创建该类</span>    <span class="token keyword">private</span> <span class="token class-name">SingleObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SingleObject</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SingleObject被创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="懒汉式，线程不安全的"><a href="#懒汉式，线程不安全的" class="headerlink" title="懒汉式，线程不安全的"></a>懒汉式，线程不安全的</h2><ul><li>是否Lazy初始化：是</li><li>是否多线程安全：否</li><li>因为没有加锁synchronized，所以严格意义上不算单例模式</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 懒汉式 线程不安全的</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleObject</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SingleObject</span> instance<span class="token punctuation">;</span>    <span class="token comment">//私有化空参构造器</span>    <span class="token keyword">private</span> <span class="token class-name">SingleObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment">//在获取对象的时候判断全局instance是否为null</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SingleObject</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SingleObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="懒汉式，线程安全的"><a href="#懒汉式，线程安全的" class="headerlink" title="懒汉式，线程安全的"></a>懒汉式，线程安全的</h2><ul><li>是否Lazy初始化：是</li><li>是否多线程安全：是</li><li>优点：第一次调用才初始化，避免内存浪费</li><li>缺点：必须加锁synchronized才能保证单例，但是加锁会影响效率</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 懒汉式 线程安全的</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleObject</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SingleObject</span> instance<span class="token punctuation">;</span>    <span class="token comment">//私有化空参构造器</span>    <span class="token keyword">private</span> <span class="token class-name">SingleObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment">//在获取对象的时候判断全局instance是否为null</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">SingleObject</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SingleObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h2><ul><li>是否Lazy初始化：否</li><li>是否多线程安全：是</li><li>优点：没有加锁，执行效率提高</li><li>缺点：类在加载的时候就会初始化，浪费内存</li><li>基于classloader机制避免了多线程的同步问题，但是instance在类装载的时候就实例化，虽然导致类装载的原因有很多种，在单例模式中大多是嗲用getInstance方法， 但是也不能确保有其他的方式或者其他的静态方法导致类装载，这时候初始化instance明显没有打到lazy loading（懒加载）的效果</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 饿汉式 线程安全的</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleObject</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SingleObject</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//私有化空参构造器</span>    <span class="token keyword">private</span> <span class="token class-name">SingleObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment">//在获取对象的时候判断全局instance是否为null</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">SingleObject</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="双检锁-双重校验锁（DCL-double-checked-locking）"><a href="#双检锁-双重校验锁（DCL-double-checked-locking）" class="headerlink" title="双检锁/双重校验锁（DCL: double checked locking）"></a>双检锁/双重校验锁（DCL: double checked locking）</h2><ul><li>是否Lazy初始化：是</li><li>是否多线程安全：是</li><li>采用双锁机制，安全且在多线程情况下保持高性能</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 双检锁</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleObject</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token class-name">SingleObject</span> instance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">SingleObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SingleObject</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 线程1、2同时到达判断instance是否为null</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 线程1进去，线程2被阻塞</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">SingleObject</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//1创建完对象后，instance就不为null，2不会进入if，避免多次初始化</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="登记式-静态内部类"><a href="#登记式-静态内部类" class="headerlink" title="登记式/静态内部类"></a>登记式/静态内部类</h2><ul><li>是否Lazy初始化：是</li><li>是否多线程安全：是</li><li>能达到双检锁方式一样的功效，但实现更简单，对静态域使用延迟初始化，应该使用这种方式而不是双检锁。只适用于静态域的情况，双检锁的方式可以在实例域需要延迟初始化的时候使用。</li><li>利用classloader机制保证初始化instance时只有一个线程，跟饿汉式不同的是：饿汉式只要SingletObject类被装载了，那么instance就会被实例化，没有打到懒加载的效果，而这种方式是SingleObject类被装载了，但是instance不一定被初始化，因为SingletonHolder类没有被主动使用，只有显式调用getInstance方法才会显式装载SingletonHolder从而实例化instance</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 登记式/静态内部类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleObject</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHolder</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">SingleObject</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">SingleObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">SingleObject</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">SingletonHolder</span><span class="token punctuation">.</span>instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><ul><li>是否Lazy初始化：否</li><li>是否多线程安全：是</li><li><strong>实现单例模式的最佳方法</strong></li><li>避免多线程同步的问题，而且还自动支持序列化机制，防止反序列化重新创建新的对象，绝对防止多次实例化</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 枚举</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">SingleObject</span> <span class="token punctuation">{</span>    <span class="token constant">INSTANCE</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"枚举类型的实例"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>Considerations<br>一般情况下不建议使用懒汉式，不管是线程安全还是线程不安全的，比较建议使用饿汉式。而在我们需要明确实现懒加载（lazy loading）的效果时，才会使用登记式（静态内部类）的方式。在涉及到反序列化创建对象的时候，可以使用枚举的方式，其他的特殊需求可以考虑双检锁的方式。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 创建型模式 </tag>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象工厂模式</title>
      <link href="/2024/04/09/chou-xiang-gong-han-mo-shi/"/>
      <url>/2024/04/09/chou-xiang-gong-han-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><blockquote><p>是围绕一个超级工厂创建其他工厂，在该模式中，接口是负责创建一个相关对象的工厂，不需要显示指定他们的类，每个生成的工厂都能按照工厂模式提供对象，提供了一种创建一系列相关或相互依赖对象的接口。</p><p><strong>解决了什么？</strong></p><p>主要解决接口选择的问题</p><p><strong>什么时候使用？</strong></p><p>系统的产品有多于一个的产品族，而系统只消费其中某一族的产品</p><p><strong>怎么解决？</strong></p><p>在一个产品族里面定义多个产品</p></blockquote><blockquote><p><strong>优点</strong></p><p>当一个产品族中的多个对象被设计成一起工作的时候，能保证客户端始终只使用同一个产品族中的对象</p><p><strong>缺点</strong></p><p>产品族扩展非常困难，要增加一个系列的某一产品，既要在抽象的Creator里加代码，又要在具体的类里面加代码</p></blockquote><blockquote><p><strong>使用场景</strong></p><p>生成不同操作系统的程序</p></blockquote><p><strong>代码</strong></p><p>创建一个Shape接口</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>创建一个Color接口</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>创建继承Shape接口的子类</p><p>Square.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">implements</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is Square"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Rectangle.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token keyword">implements</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is Rectangle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Circle.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">implements</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is Circle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>创建继承Color接口的子类</p><p>Red.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Red</span> <span class="token keyword">implements</span> <span class="token class-name">Color</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is Red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Blue.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Blue</span> <span class="token keyword">implements</span> <span class="token class-name">Color</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is Blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Green.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Green</span> <span class="token keyword">implements</span> <span class="token class-name">Color</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is Green"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>创建获取接口的抽象工厂</p><p>AbstractFactory.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">Color</span> <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token class-name">String</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">Shape</span> <span class="token function">getShape</span><span class="token punctuation">(</span><span class="token class-name">String</span> shape<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>创建获取抽象工厂的工厂</p><p>该工厂可以根据传入的参数选择创建不同的抽象工厂</p><p>FactoryProducer.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FactoryProducer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">AbstractFactory</span> <span class="token function">getFactory</span><span class="token punctuation">(</span><span class="token class-name">String</span> choice<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>choice<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"SHAPE"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ShapeFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>choice<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"COLOR"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ColorFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试代码</p><ol><li>通过传入shape/circle给工厂获取对应的抽象工厂</li><li>获取到抽象工厂以后，传入不同的参数来获取具体想要拿到的实体类</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AbstractFactoryPatternDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//获取shape工厂</span>        <span class="token class-name">AbstractFactory</span> shapeFactory <span class="token operator">=</span> <span class="token class-name">FactoryProducer</span><span class="token punctuation">.</span><span class="token function">getFactory</span><span class="token punctuation">(</span><span class="token string">"shape"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用shape工厂获取Circle对象</span>        <span class="token class-name">Shape</span> circle <span class="token operator">=</span> shapeFactory<span class="token punctuation">.</span><span class="token function">getShape</span><span class="token punctuation">(</span><span class="token string">"circle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        circle<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用shape工厂获取Rectangle对象</span>        <span class="token class-name">Shape</span> rectangle <span class="token operator">=</span> shapeFactory<span class="token punctuation">.</span><span class="token function">getShape</span><span class="token punctuation">(</span><span class="token string">"rectangle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rectangle<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用shape工厂获取Square对象</span>        <span class="token class-name">Shape</span> square <span class="token operator">=</span> shapeFactory<span class="token punctuation">.</span><span class="token function">getShape</span><span class="token punctuation">(</span><span class="token string">"square"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        square<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取color工厂</span>        <span class="token class-name">AbstractFactory</span> colorFactory <span class="token operator">=</span> <span class="token class-name">FactoryProducer</span><span class="token punctuation">.</span><span class="token function">getFactory</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用color工厂获取Red对象</span>        <span class="token class-name">Color</span> red <span class="token operator">=</span> colorFactory<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        red<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用color工厂获取Blue对象</span>        <span class="token class-name">Color</span> blue <span class="token operator">=</span> colorFactory<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        blue<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用color工厂获取Green对象</span>        <span class="token class-name">Color</span> green <span class="token operator">=</span> colorFactory<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token string">"green"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        green<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>UML类图</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202403161148392.png" alt="image-20240314091504807"> </p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 创建型模式 </tag>
            
            <tag> 抽象工厂模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂模式</title>
      <link href="/2024/04/09/gong-han-mo-shi/"/>
      <url>/2024/04/09/gong-han-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><blockquote><p>定义一个创建对象的接口,让其子类自己实现实例化哪一个工厂类.<strong>在这个设计模式中,创建对象的过程会被延迟到子类进行</strong></p><p><strong>解决了什么?</strong></p><p>解决接口选择的问题</p><p><strong>什么时候使用?</strong></p><p>要明确地计划在不同条件下创建不同实例的时候</p><p><strong>怎么解决?</strong></p><p>让子类去实现工厂接口,返回的也是一个抽象的产品</p></blockquote><blockquote><p><strong>优点</strong></p><ol><li>一个调用者想创建一个对象,只需要知道其名称即可</li><li>扩展性高,如果 要增加一个产品,只需要扩展一个工厂类就可以了</li><li>屏蔽产品的具体实现,调用者只需要关心产品给出的接口</li></ol><p><strong>缺点</strong></p><p>每次增加一个产品的时候都需要增加一个具体类和对象实现工厂,使得系统中类的个数成倍增加,在一定程度上增加了系统的复杂度,同时也增加了系统具体类的依赖</p></blockquote><blockquote><p><strong>使用场景</strong></p><p>日志记录器</p><p>数据库访问</p><p>设计一个链接服务器的框架(需要三个协议:POP3、IMAP、HTTP)</p></blockquote><blockquote><p>包含的几个核心:</p><ul><li>抽象产品</li><li>具体产品</li><li>抽象工厂</li><li>具体工厂</li></ul></blockquote><p><strong>代码</strong></p><p>创建一个接口</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Sharp</span> <span class="token punctuation">{</span><span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>创建实现接口的子类</p><p>Square.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">implements</span> <span class="token class-name">Sharp</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is Square"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Circle.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">implements</span> <span class="token class-name">Sharp</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is Circle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Rectangle.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token keyword">implements</span> <span class="token class-name">Sharp</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is Rectangle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>创建包含这些子类的工厂类</p><p>ShapeFactory.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 工厂类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShapeFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Sharp</span> <span class="token function">getSharp</span><span class="token punctuation">(</span><span class="token class-name">String</span> sharpType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sharpType <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sharpType<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"CIRCLE"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sharpType<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"RECTANGLR"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sharpType<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"SQUARE"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>UML类图</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202403161133152.png" alt="image-20240313222630308"> </p><blockquote><p><strong>Circle、Rectangle、Square实现Sharp接口,ShapeFactory去创建这三个子类的对象,SharpFactoryDemo使用ShapeFatory获取不同的对象</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 创建型模式 </tag>
            
            <tag> 工厂模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>行为型模式</title>
      <link href="/2024/04/09/xing-wei-xing-mo-shi/"/>
      <url>/2024/04/09/xing-wei-xing-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h1><blockquote><p>这些模式关注对象之间的通信和交互,为了在解决对象之间的责任分配和算法的封装</p></blockquote><ul><li>责任链模式(Chain of Responsibility Pattern)</li><li>命令模式(Command Pattern)</li><li>解释器模式(Interpreter Pattern)</li><li>迭代器模式(Iterator Pattern)</li><li>中介者模式(Mediator Pattern)</li><li>备忘录模式(Memento Pattern)</li><li>观察者模式(Observer Pattern)</li><li>状态模式(State Pattern)</li><li>空对象模式(Null Object Pattern)</li><li>策略模式(Strategy Pattern)</li><li>模板模式(Template Pattern)</li><li>访问者模式(Visitor Pattern)</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 行为型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>结构型模式</title>
      <link href="/2024/04/09/jie-gou-xing-mo-shi/"/>
      <url>/2024/04/09/jie-gou-xing-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h1><blockquote><p>这些模式关注对象之间的组合和关系,为了在解决如何构建灵活且可复用的类和对象结构</p></blockquote><ul><li>适配器模式(Adapter Pattern)</li><li>桥接模式(Bridge Pattern)</li><li>过滤器模式(Filter、Criteria Pattern)</li><li>组合模式(Composite Pattern)</li><li>装饰器模式(Decorator Pattern)</li><li>外观模式(Favade Pattern)</li><li>享元模式(Flyweight Pattern)</li><li>代理模式(Proxy Pattern)</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 结构型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建型模式</title>
      <link href="/2024/04/09/chuang-jian-xing-mo-shi/"/>
      <url>/2024/04/09/chuang-jian-xing-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h1><blockquote><p> 在创建对象的同时隐藏创建逻辑的方式，而不使用new去直接实例化一个对象，使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。</p></blockquote><ul><li>工厂模式(Factory Pattern)</li><li>抽象工厂模式(Abstract Pattern)</li><li>单例模式(Singleton Pattern)</li><li>建造者模式(Builder Pattern)</li><li>原型模式(Prototype Pattern)</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 创建型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2024/04/09/she-ji-mo-shi/"/>
      <url>/2024/04/09/she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><blockquote><p>分成三大类：创建型模式、结构型模式、行为型模式。</p><p>单独讨论的另一类设计模式：J2EE设计模式</p></blockquote><p><strong>六大原则:</strong></p><ol><li><p>开闭原则（OCP）</p><ul><li>对外开放、对修改关闭（热插拔）</li></ul></li><li><p>里氏代换原则（LSP）</p></li><li><p>依赖倒转原则（DIP）</p><ul><li>针对接编程，依赖于抽象而不依赖于具体</li></ul></li><li><p>接口隔离原则（ISP）</p><ul><li>使用多个隔离的接口比使用单个接口好</li><li>降低耦合度</li></ul></li><li><p>迪米特法则（DP）</p><ul><li>一个实体类应该尽可能地减少与其他实体类之间发生相互作用</li></ul></li><li><p>合成复用原则（CRP）</p><ul><li>尽量使用合成/聚合地方式，而不是使用继承</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux8.0 BASH</title>
      <link href="/2024/04/08/linux-8.0-bash/"/>
      <url>/2024/04/08/linux-8.0-bash/</url>
      
        <content type="html"><![CDATA[<h1 id="BASH"><a href="#BASH" class="headerlink" title="BASH"></a>BASH</h1><h2 id="系统的合法shell-与-etc-shells功能"><a href="#系统的合法shell-与-etc-shells功能" class="headerlink" title="系统的合法shell 与 /etc/shells功能"></a>系统的合法shell 与 /etc/shells功能</h2><p>通过查看/etc/shells文件可以看到当前系统有多少个可以使用的shell</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310231500423.png" alt="image-20231023150007380"> </p><h2 id="Bash-shell-的功能"><a href="#Bash-shell-的功能" class="headerlink" title="Bash shell 的功能"></a>Bash shell 的功能</h2><p>bash主要的优点：</p><ul><li>历史命令（history）</li><li>命令与文件补全功能：（[Tab]按键的好处）</li><li>命令别名设置功能：（alias）</li><li>任务管理、前台、后台控制：（job control、foreground、background）</li><li>程序化脚本：（shell scripts）</li><li>通配符：（Wildcard）</li></ul><h2 id="查询命令是否为Bash-shell的内置命令：type"><a href="#查询命令是否为Bash-shell的内置命令：type" class="headerlink" title="查询命令是否为Bash shell的内置命令：type"></a>查询命令是否为Bash shell的内置命令：type</h2><p><code>type [-tpa] name</code></p><ul><li>不加任何参数的时候type会显示出name是外部命令还是bash内置命令</li><li>-t：type将name以下面的字眼表示出其意义：<ul><li>file：表示为外部命令</li><li>alias：表示该命令为命令别名所设置的名称</li><li>builtin：表示该命令为bash内置的命令功能</li></ul></li><li>-p：后面接的name为外部命令的时候，才会显示完整的文件名</li><li>-a：会由PATH变量定义的路径中，将所有含name的命令都列出来，包含alias</li></ul><p>查询ls是否为bash内置</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310241413846.png" alt="image-20231024141322761"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310241414536.png" alt="image-20231024141420505"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310241415861.png" alt="image-20231024141507833"> </p><p>查询cd是否为bash内置</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310241416804.png" alt="image-20231024141646773"> </p><p>小结：type这个命令可以帮助我们知道每个命令是否为bash内置命令，type可以用来作为类似which命令的用途。</p><h2 id="命令的执行与快速编辑按钮"><a href="#命令的执行与快速编辑按钮" class="headerlink" title="命令的执行与快速编辑按钮"></a>命令的执行与快速编辑按钮</h2><p>如果命令行太长想分两行来写，可以使用 <code>\[Enter]</code> ，反斜杠和回车键之间不能有空格</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310241421805.png" alt="image-20231024142139769"> </p><p>组合键</p><table><thead><tr><th>组合键</th><th>功能与示范</th></tr></thead><tbody><tr><td>[ctrl]+u/[ctrl]+k</td><td>分别是从光标处向前删除命令串，及向后删除命令串</td></tr><tr><td>[ctrl]+a/[ctrl]+e</td><td>分别是让光标移动到整个命令串的最前面，或最后面</td></tr></tbody></table><h2 id="Shell的变量功能"><a href="#Shell的变量功能" class="headerlink" title="Shell的变量功能"></a>Shell的变量功能</h2><h3 id="变量的使用与设置：echo、变量设置规则、unset"><a href="#变量的使用与设置：echo、变量设置规则、unset" class="headerlink" title="变量的使用与设置：echo、变量设置规则、unset"></a>变量的使用与设置：echo、变量设置规则、unset</h3><p>变量被使用时，前面必须要加上【$】</p><ul><li><p>变量的使用：echo</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310241432883.png" alt="image-20231024143204850"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310241432230.png" alt="image-20231024143246202"> </p></li><li><p>变量的设置规则</p><ul><li><p>变量与变量内容以【=】连接</p><p><code>myname=vbird</code></p></li><li><p>等号两边不能直接接空格</p><p>错误写法：<code>myname = vbird</code> 或 <code>myname=v bird</code></p></li><li><p>变量名称只能是英文字母和数字，但是开头字符不能是数字</p></li><li><p>变量内容如果空格可以使用【””】或【’’】将变量内容括起来</p></li></ul></li><li><p>双引号内的特殊字符如$等，可以保留原有的特性</p><ul><li><code>var="lang is $LANG"</code>则<code>echo $var</code>可以得到lang is zh_CN.UTF-8</li></ul></li><li><p>单引号内的特殊字符则为一般字符（纯文本）</p><ul><li><p><code>var='lang is $LANG'</code>则<code>echo $var</code>可以得到lang is $LANG</p></li><li><p>可使用转义符【\】将一些特殊符号变成一般符号（例如回车、空格、$等）</p></li><li><p>【``】或【$(命令)】用于借由其他额外命令所提供的信息</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310241455751.png" alt="image-20231024145502716"> </p></li><li><p>若该变量为扩增变量内容时，则可用 <code>"$变量名称"</code> 或 <code>${变量}</code> 累加内容</p><p><code>PATH="$PATH":/home/bin</code> 或 <code>PATH=${PATH}:/home/bin</code></p></li><li><p>若该变量需要在其他子程序执行，则需要以export来是变量变成环境变量</p><p><code>export PATH</code></p></li><li><p>通常大写字母为系统默认变量，自行设置变量可以使用小写字符，方便判断</p></li><li><p>取消变量的方法为unset，<code>unset 变量名称</code></p><p>取消myname的设置：<code>unset myname</code></p></li></ul></li></ul><p>什么是子进程？</p><p>在目前shell情况下，启用另一个新的shell，新的那个就是子进程。在一般情况下父进程的自定义变量是没有办法在子进程中使用的，但是如果把变量通过export变成环境变量后，就能够在子进程下面使用了！</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310241520191.png" alt="image-20231024152032153"> 此时开启了另一个shell</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310241520740.png" alt="image-20231024152058705"> 可见并不能输出name里面的内容</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310241521211.png" alt="image-20231024152123175"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310241522747.png" alt="image-20231024152234710"> 通过export将name设置成环境变量后，可以在另一个shell中输出name的内容</p><p>如何进入目前内核的模块目录？</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310241527153.png" alt="image-20231024152747127"> </p><p>双引号和单引号的区别：</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310241531442.png" alt="image-20231024153122415"> </p><h3 id="环境变量的功能"><a href="#环境变量的功能" class="headerlink" title="环境变量的功能"></a>环境变量的功能</h3><p>查看目前的shell环境中有多少默认的环境变量？：<code>env</code> 和 <code>export</code></p><ul><li><p>用env观察文件变量与常见环境变量</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310251001606.png" alt="image-20231025100059482"> </p><ul><li><p>HOME</p><p>代表用户的根目录</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310251013124.png" alt="image-20231025101316049"> </p></li><li><p>SHELL</p><p>目前这个环境使用的SHELL是哪个程序</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310251013669.png" alt="image-20231025101333639"> </p></li><li><p>HISTSIZE</p><p>与历史命令有关，曾经执行过的命令可以被系统记录下来，记录的条数是有这个值来设置的</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310251013133.png" alt="image-20231025101346101"> </p></li><li><p>MAIL</p><p>当我们使用mail这个命令在收信时，系统会去读取的邮箱文件（mailbox）</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310251014223.png" alt="image-20231025101429192"> </p></li><li><p>PATH</p><p>执行文件查找的路径，目录与目录之间用冒号（:）分隔，有与文件的查找是依序由PATH的变量内的目录来查询，所以目录的顺序也是重要的</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310251015488.png" alt="image-20231025101501461"> </p></li><li><p>LANG</p><p>语系数据，以后作讲解</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310251015585.png" alt="image-20231025101548556"> </p></li><li><p>RANDOM</p><p>随机数的变量，目前大多数Linux发行版都有随机数生成器，在BASH环境下，RANDOM变量的内容介于0~32767的数值，使用declare声明数值类型就可以使用了</p><p><code>declare -i number=$RANDOM*10/32768 ; echo $number</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310251023947.png" alt="image-20231025102349917"></p></li></ul></li><li><p>用set观察所有变量（包含环境变量与自定义变量）</p><ul><li>在Linux默认情况中，使用{大写的字母}来设置的变量一般为系统内定需要的变量</li></ul></li><li><p>export：自定义变量转成环境变量</p></li></ul><h3 id="影响显示结果的语系变量（locale）"><a href="#影响显示结果的语系变量（locale）" class="headerlink" title="影响显示结果的语系变量（locale）"></a>影响显示结果的语系变量（locale）</h3><p>使用locale可以查看Linux支持了多少语系</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310251042657.png" alt="image-20231025104248626"> </p><p>可以通过/etc/locale.conf更改整体系统默认语系</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310251049598.png" alt="image-20231025104959566"> </p><h3 id="变量的有效范围"><a href="#变量的有效范围" class="headerlink" title="变量的有效范围"></a>变量的有效范围</h3><p>基本上可以这样看待：</p><p>环境变量=全局变量</p><p>自定义变量=局部变量</p><ul><li>为什么环境变量的数据可以被子进程引用？<ul><li>当启动一个shell，操作系统会分配一内存区域给shell使用，此内存中的变量可以让子进程使用</li><li>如果在父进程利用export功能，可以让自定义变量的内容写入到上述的内存区域当中（环境变量）</li><li>当加载另一个shell时，（即启动子进程），子shell可以将父shell的环境变量所在的内存区域导入自己的环境变量区块当中</li></ul></li></ul><h3 id="变量键盘读取、数组与声明：read、array、declare"><a href="#变量键盘读取、数组与声明：read、array、declare" class="headerlink" title="变量键盘读取、数组与声明：read、array、declare"></a>变量键盘读取、数组与声明：read、array、declare</h3><ul><li><p>read</p><ul><li><p><code>read [-pt] variable</code></p></li><li><p>-p：后面接提示字符</p></li><li><p>-t：后面接等待的【秒数】，不会一直等待使用者</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310251412252.png" alt="image-20231025141144039"></p></li></ul></li><li><p>declare，typeset</p><ul><li><p>declare或typeset是一样的功能，声明变量的类型，如果后面没有接任何参数，那么bash就会主动将所有变量名称和内容通通显示出来</p></li><li><p><code>declare [-aixr] variable</code></p></li><li><p>-a：将后面的变量定义为数组（array）类型</p></li><li><p>-i：将后面的变量定义为整数（integer）类型</p></li><li><p>-x：用法和export一样，将后面的变量变成环境变量</p></li><li><p>-r：将变量设置为readonly类型，该变量不可被更改内容，也不能unset</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310251446706.png" alt="image-20231025144620659"> </p><p><strong>变量类型默认为字符串，如果不指定变量类型，则1+2为一个字符串而不是计算式</strong></p><p><strong>bash环境中的数值运算，默认最多仅能到达整数形态，所以1/3结果是0</strong></p><p>将sum变成环境变量</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310251456997.png" alt="image-20231025144928274"> </p><p>让sum变量变成只读属性，不可修改，只能注销再登录才能恢复该变量的类型</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310251450322.png" alt="image-20231025145045295"> </p><p>让sum变成非环境变量的自定义变量</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310251453260.png" alt="image-20231025145315895"></p></li></ul></li><li><p>数组（array）变量类型</p><p>设置数组的方式：<code>var[index]=content</code></p><p>数组名为var，数组内容为var[1]=小明。。。，index就是数组下标，</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310251504415.png" alt="image-20231025150427380"> </p><p><strong>一般来说建议使用${数组}的方式来读取，比较准确无误</strong></p></li></ul><h3 id="与文件系统及程序的限制关系：ulimit"><a href="#与文件系统及程序的限制关系：ulimit" class="headerlink" title="与文件系统及程序的限制关系：ulimit"></a>与文件系统及程序的限制关系：ulimit</h3><p>有如下场景：如果Linux主机内同时登陆了十个人，且同时开启了100个文件，每个文件大小约为10MB，此时内存需要多大才够他们用？需要10GB，很明显不太现实，所以bash是可以限制用户的某些系统资源的，包括可开启的文件数量，可使用的CPU时间，可使用的内存总量等。</p><p><code>ulimit [-SHacdfltu] [配额]</code></p><ul><li>-H：hard limit，严格的设置，必定不能超过这个设置的数值</li><li>-S：soft limit，警告的设置，可以超过这个设置值，但是超过会有警告信息</li><li>-a：后面不接任何选项与参数，可列出所有的限制额度</li><li>-c：限制每个内核文件的最大容量（内核文件：当某些程序发生错误时，系统可能会将该程序在内存中的信息写成文件，这种文件就是内核文件）</li><li>-d：程序可使用的最大段内存（segment）容量</li><li>-f：此shell可以建立的最大文件容量（一般为2GB）单位为Kbytes</li><li>-l：k而用于锁定（lock）的内存量</li><li>-t：可使用的最大CPU时间（单位是秒）</li><li>-u：单一使用者可以使用的最大进程（process）数量</li></ul><h2 id="命令别名与历史命令"><a href="#命令别名与历史命令" class="headerlink" title="命令别名与历史命令"></a>命令别名与历史命令</h2><h3 id="命令别名设置：alias、unalias"><a href="#命令别名设置：alias、unalias" class="headerlink" title="命令别名设置：alias、unalias"></a>命令别名设置：alias、unalias</h3><p><strong>命令使用格式</strong>：<code>alias lm='ls -al | more'</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310271418807.png" alt="image-20231027141806691"> </p><p>以后输入lm就相当于执行了<code>ls -al | more</code></p><p><strong>防误删除的方法</strong>：<code>alias rm='rm -i'</code>，这样每次删除文件之前都会确认是否删除该文件</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310271419118.png" alt="image-20231027141919090"> </p><p><strong>查看目前存在的命令别名</strong>：<code>alias</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310271419983.png" alt="image-20231027141945957"> </p><p><strong>使用vi打开vim</strong>：<code>alias vi='vim'</code> </p><p><strong>删除别名</strong>：unalias</p><p>把刚刚创建的别名lm删除：<code>unalias lm</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310271428766.png" alt="image-20231027142829738"> </p><p>1</p><p><strong>命令别名和变量有什么不同？</strong></p><p>命令别名是新创建一个命令，我们可以直接执行该命令，至于变量则需要使用类似<code>echo</code>命令才能够调用出变量的内容。</p><h3 id="历史命令：history"><a href="#历史命令：history" class="headerlink" title="历史命令：history"></a>历史命令：history</h3><p><code>history [n]</code></p><p><code>history [-c]</code></p><p><code>history [-raw] histfiles</code></p><ul><li>n：数字，意思是列出最近n条命令行列表</li><li>-c：将目前的shell中的所有history内容全部清除</li><li>-a：将目前新增的history命令新增入histfiles中，如果没有加histfiles，则默认写入~/.bash_history</li><li>-r：将histfiles的内容读到目前这个shell的history中</li><li>-w：将目前的history记录内容写入到histfiles中</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310271504750.png" alt="image-20231027150359653"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310271504389.png" alt="image-20231027150454363"> </p><p>将目前的数据写入histfile中</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310271508721.png" alt="image-20231027150838691"> </p><p>因为没有histfile，所以默认写入~/.bash_history</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310271510834.png" alt="image-20231027151028804"> </p><ul><li>当我们以bash登录Linux主机之后，系统会主动地由家目录的<del>/.bash_history读取以前曾经执行过的命令，</del>/.bash_history记录的数据条数与HISTFILESIZE变量的值有关</li></ul><p><code>!number</code>、<code>!command</code>、<code>!!</code></p><ul><li>number：执行第几条命令的意思</li><li>command：由最近的命令开始向前查找【命令串开头为command】的那个命令，并执行</li><li>!!：执行上一个命令（相当于按向上键后，按回车）</li></ul><h2 id="Bash-shell的操作环境"><a href="#Bash-shell的操作环境" class="headerlink" title="Bash shell的操作环境"></a>Bash shell的操作环境</h2><h3 id="路径与命令查找顺序"><a href="#路径与命令查找顺序" class="headerlink" title="路径与命令查找顺序"></a>路径与命令查找顺序</h3><p>系统中其实有不少的ls命令，那怎么知道命令运行的顺序？</p><ol><li>以相对/绝对路径执行命令，例如【/bin/ls】或【./ls】</li><li>由alias找到该命令来执行</li><li>由bash内置的（builtin）命令来执行</li><li>通过$PATH这个变量的顺序查找到的第一个命令来执行</li></ol><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310301356326.png" alt="image-20231030135614233"> </p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux7.0 vim程序编辑器</title>
      <link href="/2024/04/08/linux-7.0-vim-cheng-xu-bian-ji-qi/"/>
      <url>/2024/04/08/linux-7.0-vim-cheng-xu-bian-ji-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="vim程序编辑器"><a href="#vim程序编辑器" class="headerlink" title="vim程序编辑器"></a>vim程序编辑器</h1><h2 id="vi与vim"><a href="#vi与vim" class="headerlink" title="vi与vim"></a>vi与vim</h2><p>为什么要学vim？</p><ul><li>所有的UNIX-like系统都会内置vi文本编辑器，其他的文本编辑器不一定会存在</li><li>vim具有程序编辑的能力，可以主动地以字体颜色辨别语法的正确性，方便程序设计</li></ul><h2 id="vi的使用"><a href="#vi的使用" class="headerlink" title="vi的使用"></a>vi的使用</h2><p><strong>vi分三种模式，一般命令模式、编辑模式、命令行模式</strong></p><ul><li>一般命令模式（command mode）：<ul><li>默认的模式，可以使用【上下左右】按键来移动光标，使用【删除字符】或【删除整行】来处理文件内容，也可以使用【复制、粘贴】来处理文件内容</li></ul></li><li>编辑模式（insert mode）：<ul><li>在一般模式中可以进行删除、复制、粘贴等操作，但是无法编辑文件内容，需要按下【i、l、o、O、a、A、r、R】等任何一个字母后才会进入编辑模式。如果要回到一般模式就要按下【ESC】</li></ul></li><li>命令行模式（command-line mode）：<ul><li>在一般模式，输入【: / ?】三个中任何一个按钮，就可以将光标移动到最下面一行，在这个模式中，可以进行读取、保存、批量替换字符、退出vi、显示行号等操作</li></ul></li></ul><p>详细的按键设置及其功能见《鸟哥的Liunx私房菜（基础学习篇第四版）》P293~P296</p><h2 id="可视区块（Visual-Block）"><a href="#可视区块（Visual-Block）" class="headerlink" title="可视区块（Visual Block）"></a>可视区块（Visual Block）</h2><table><thead><tr><th>v</th><th>字符选择，会将光标经过的地方反白</th></tr></thead><tbody><tr><td>V</td><td>行选择，会将光标经过的行反白</td></tr><tr><td>[ctrl] + v</td><td>可视区块，可以用矩形的方式选择数据</td></tr><tr><td>y</td><td>将反白的地方复制起来</td></tr><tr><td>d</td><td>将反白的地方删除掉</td></tr><tr><td>p</td><td>将刚刚复制的区块，在光标所在的地方粘贴</td></tr></tbody></table><h2 id="vim常用命令示意图"><a href="#vim常用命令示意图" class="headerlink" title="vim常用命令示意图"></a>vim常用命令示意图</h2><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310231433850.jpg" alt="0b032ba58634867aac9579f1e589ad8"> </p><h2 id="中文编码问题"><a href="#中文编码问题" class="headerlink" title="中文编码问题"></a>中文编码问题</h2><p>通常需要考虑的方面：</p><ol><li>Linux系统默认支持的语系数据：与/etc/locale.conf有关</li><li>与终端（bash）的语系：LANG、LC_ALL这几个变量有关</li><li>文件原本的编码</li><li>打开终端的软件，例如GNOME下的窗口界面</li></ol><p>修正语系编码：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>feliks@study ~<span class="token punctuation">]</span> $ <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>zh_CN.gb18030<span class="token punctuation">[</span>feliks@study ~<span class="token punctuation">]</span> $ <span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">LC_ALL</span></span><span class="token operator">=</span>zh_CN.gb18030</code></pre><p>然后在终端工具栏的【终端】 –&gt; 【设置字符编码】 –&gt; 【中文（简体）】 选项</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux6.0 文件与文件系统的压缩</title>
      <link href="/2024/04/08/linux-6.0-wen-jian-yu-wen-jian-xi-tong-de-ya-suo/"/>
      <url>/2024/04/08/linux-6.0-wen-jian-yu-wen-jian-xi-tong-de-ya-suo/</url>
      
        <content type="html"><![CDATA[<h1 id="文件与文件系统的压缩"><a href="#文件与文件系统的压缩" class="headerlink" title="文件与文件系统的压缩"></a>文件与文件系统的压缩</h1><p><strong>Linux系统常见的压缩命令</strong></p><p>几个常见的压缩文件扩展名</p><ul><li>*.Z：compress程序压缩的文件</li><li>*.zip：zip程序压缩的文件</li><li>*.gz：gzip程序压缩的文件</li><li>*.bz2：bzip2程序压缩的文件</li><li>*.xz：xz程序压缩的文件</li><li>*.tar：tar程序打包的文件，并没有压缩过</li><li>*.tar.gz：tar程序打包的文件，并且经过gzip的压缩</li><li>*.tar.bz2：tar程序打包的文件，并且经过bzip2的压缩</li><li>*.tar.xz：tar程序打包的文件，并且经过xz的压缩</li></ul><h2 id="gzip，zcat-zmore-zless-zgrep"><a href="#gzip，zcat-zmore-zless-zgrep" class="headerlink" title="gzip，zcat/zmore/zless/zgrep"></a>gzip，zcat/zmore/zless/zgrep</h2><p>gzip可以解压缩compress、zip、gzip等软件所压缩的文件，gzip建立的压缩文件为*.gz</p><p><code>gzip [-cdtv#] 文件名</code></p><ul><li>-c：将压缩的数据输出到屏幕上，可通过数据流重定向来处理</li><li>-d：解压缩的参数</li><li>-t：可以用来检验一个压缩文件的一致性，看看文件有无错误</li><li>-v：可以显示出原文件/压缩文件的压缩比等信息</li><li>-#：#是数字的意思，代表压缩等级，-1最快，但是压缩比最差，-9最慢，但是压缩比最好，默认是-6</li></ul><p>找出/etc下面容量最大的文件，并且复制到/tmp里面，然后以gzip进行压缩</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310141607533.png" alt="image-20231014160747430"> </p><p>使用gzip的时候默认情况下原本的文件会被压缩成为.gz后缀的文件，源文件就不存在了</p><p>由于services是文本文件，请将其压缩文件的内容读取出来</p><p><code>zcat services.gz</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310141619351.png" alt="image-20231014161910303"> </p><p>将services.gz解压缩</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310141623348.png" alt="image-20231014162305319"> </p><p>与gzip -v相反，gzip -d解压缩后会把原来的压缩文件删除</p><p>将services用最高压缩比压缩并保留源文件</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310141625948.png" alt="image-20231014162553924"> </p><p>找出‘http’这个关键字在services.gz中出现在哪几行</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310141628398.png" alt="image-20231014162830349"> </p><h2 id="bzip2，bzcat-bzmore-bzless-bzgrep"><a href="#bzip2，bzcat-bzmore-bzless-bzgrep" class="headerlink" title="bzip2，bzcat/bzmore/bzless/bzgrep"></a>bzip2，bzcat/bzmore/bzless/bzgrep</h2><p>如果说gzip是为了替换compress并提供更好的压缩比而成立的，那么bzip2是为了替换gzip并提供更佳的压缩比而成立的</p><p><code>bzip2 [-cdkzv#] 文件名</code></p><p><code>bzcat 文件名.bz2</code></p><ul><li>-c：将压缩的过程产生的数据输出到屏幕上</li><li>-d：解压缩的参数</li><li>-k：保留原始文件，而不会删除原来的文件</li><li>-z：压缩的参数（默认值）</li><li>-v：可以显示出源文件/压缩文件的压缩比等信息</li><li>-#：与gzip一致，-9最佳，-1最快</li></ul><p>将services文件用bzip2压缩</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310150121781.png" alt="image-20231014232939310"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310150121944.png" alt="image-20231014232954549"> </p><h2 id="xz，xzcat-xzmore-xzless-xzgrep"><a href="#xz，xzcat-xzmore-xzless-xzgrep" class="headerlink" title="xz，xzcat/xzmore/xzless/xzgrep"></a>xz，xzcat/xzmore/xzless/xzgrep</h2><p>xz拥有比bzip2更高的压缩比</p><p><code>xz [-dtlkc#] 文件名</code></p><p><code>xcat 文件名.xz</code></p><ul><li>-d：就是解压缩</li><li>-t：测试压缩文件的完整性，看看有无错误</li><li>-l：列出压缩文件的相关信息</li><li>-k：保留原本的文件不删除</li><li>-c：在屏幕上输出</li><li>-#：#是数字，-9最佳，-1最快</li></ul><p><strong>如果时间不是首要的考虑，那么xz这种有更高压缩比的工具更适合使用，如果要考虑时间的问题，那还是用gzip吧</strong></p><h2 id="打包命令：tar"><a href="#打包命令：tar" class="headerlink" title="打包命令：tar"></a>打包命令：tar</h2><p>tar可以将多个目录或文件打包成一个大文件，同时还可以通过gzip、bzip2、xz的支持</p><h3 id="常用选项与参数"><a href="#常用选项与参数" class="headerlink" title="常用选项与参数"></a>常用选项与参数</h3><p><strong>打包与压缩</strong>：<code>tar [-z|-j|-J] [cv] [-f 待建立新的文件名] filename</code></p><p><strong>查看文件名</strong>：<code>tar [-z|-j|-J] [tv] [-f 已有的tar文件名]</code></p><p><strong>解压缩</strong>：<code>tar [-z|-j|-J] [xv] [-f 已有的tar文件名] [-C 目录]</code></p><ul><li>-c：建立打包文件，可搭配-v来查看过程中被打包的文件名</li><li>-t：查看打包文件的内容含有哪些文件名，重点在查看文件名</li><li>-x：解包或解压缩的功能，可以搭配-C在特定目录解压，特别留意的是**-c、-t、-x不可同时出现在一串命令行中**</li><li>-z：通过gzip的支持进行压缩/解压缩：此时文件名最好为：***.tar.gz **</li><li>-j：通过bzip2的支持进行压缩/解压缩：此时文件名最好为：***.tar.bz2 **</li><li>-J：通过xz的支持进行压缩/解压缩哦：此时文件名最好为：***.tar.xz <strong>，特别留意，</strong>-z、-j、-J不可以同时出现在遗传命令行中**</li><li>-v：在压缩/解压缩的过程中，将正在处理的文件名显示出来</li><li>-f filename：-f后面要立刻接要被处理的文件名，建议-f单独写一个选项（比较不会忘记）</li><li>-C 目录：这个选项用在解压缩，如果要在特定目录解压缩，可以使用这个选项</li><li>-p（小写）：保留备份数据的原本权限和属性，常用于备份（-c）重要的配置文件</li><li>-P（大写）：保留绝对路径，就是允许备份数据中含有根目录存在的意思</li><li>–exclude=FILE：在压缩过程中，不要将FILE打包</li></ul><p>我常用的解压缩命令：<code>tar -xvzf filename</code>，加入了-z，支持gzip</p><ul><li>压缩：<strong>tar -jcv -f filename.tar.bz2 要被压缩的文件或目录</strong></li><li>查询：<strong>tar -jtv -f filename.tar.bz2</strong></li><li>解压缩：<strong>tar -jxv -f filename.tar.bz2 -C 要解压缩的目录</strong></li></ul><p>使用tar加入-z、-j或-J的参数来备份/etc/目录</p><p><code>time tar -zpcv -f /root/etc.tar.gz /etc</code>（-p保留原本文件的权限与属性）</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310150121236.png" alt="image-20231015012110133"> </p><p><code>time tar -jpcv -f /root/etc.tar.bz2 /etc</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310150124908.png" alt="image-20231015012415881"> </p><p><code>time tar -Jpcv -f /root/etc.tar.xz /etc</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310150130312.png" alt="image-20231015013022287"> </p><p>可以看到xz压缩后的文件大小相比其他两个是最小的，但是时间雀食优点久</p><h3 id="为什么要去掉根目录？"><a href="#为什么要去掉根目录？" class="headerlink" title="为什么要去掉根目录？"></a>为什么要去掉根目录？</h3><p>我们使用tar备份的数据可能会需要就压缩回来使用，此时tar记录的文件名就是解压缩后的实际文件名，用/etc/xxx举例子，如果拿掉根目录，我们在/tmp下解开就会变成/tmp/etc/xxx，而如果不去掉根目录，解压出来就会是绝对路径，即解压后的文件会被放到/etc/xxx中，把原来etc下的数据覆盖掉。所以不要随便用-P参数</p><h3 id="将备份的数据解压缩，并考虑特定目录的解压缩操作（-C的应用）"><a href="#将备份的数据解压缩，并考虑特定目录的解压缩操作（-C的应用）" class="headerlink" title="将备份的数据解压缩，并考虑特定目录的解压缩操作（-C的应用）"></a>将备份的数据解压缩，并考虑特定目录的解压缩操作（-C的应用）</h3><p>在本目录下进行解压缩的操作：<code>tar -jxv -f /root/etc.tar.bz2</code>，但是如果我想让其在/tmp目录下解压缩，那就得cd/tmp再执行上述命令，会显得有点麻烦，这时可以使用-C的选项：<code>tar -jxv -f /root/etc.tar.bz2 -C /tmp</code></p><h3 id="仅解开单一文件"><a href="#仅解开单一文件" class="headerlink" title="仅解开单一文件"></a>仅解开单一文件</h3><p>管道|配合grep可以截取关键词，</p><p><code>tar -jtv -f /root/etc.tar.bz2 | grep 'shadow'</code></p><p>语法：</p><p><code>tar -jtv -f 打包文件.tar.bz2 待解开文件名</code></p><p><code>tar -jtv -f /root/etc.tar.bz2 etc/shadow</code></p><h3 id="打包某目录但不含该目录下的某些文件"><a href="#打包某目录但不含该目录下的某些文件" class="headerlink" title="打包某目录但不含该目录下的某些文件"></a>打包某目录但不含该目录下的某些文件</h3><p><code>tar -jcv -f 打包文件.tar.bz2 --exclude=不包含的文件名</code></p><p><strong>基本名称</strong></p><p>tarfile：tar打包出来的文件.tar后缀的就是tarfile</p><p>tarball：带有别的压缩的支持例如<code>.tar.bz2</code>格式的，就是tarball</p><p><strong>利用管道命令与数据流</strong></p><p>将/etc整个目录进行打包的同时在/tmp下解开</p><p><code>tar -cvf - /etc | tar -xvf -</code></p><p>-就表示这个被打包的文件</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux5.0 磁盘与文件系统管理</title>
      <link href="/2024/04/08/linux-5.0-ci-pan-yu-wen-jian-xi-tong-guan-li/"/>
      <url>/2024/04/08/linux-5.0-ci-pan-yu-wen-jian-xi-tong-guan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux磁盘与文件系统管理"><a href="#Linux磁盘与文件系统管理" class="headerlink" title="Linux磁盘与文件系统管理"></a>Linux磁盘与文件系统管理</h1><h2 id="XFS文件系统简介"><a href="#XFS文件系统简介" class="headerlink" title="XFS文件系统简介"></a>XFS文件系统简介</h2><p>从CentOS7开始，默认的文件系统从EXT4变成XFS文件系统，为什么CentOS7要舍弃对Linux支持度最完整的EXT系列而改用XFS？</p><ul><li><p>EXT系列支持度最广，但是格式化很慢</p><p>EXT文件系统系列对于文件格式化的处理方面，采用的是预先规划处所有的inode、区块、元数据等数据，未来系统可以直接使用，不需要再进行动态配置的做法，在早期磁盘容量还不大的情况下没什么问题，但随着磁盘容量越来越大，连传统的MBR分区都已经被GPT分区所取代，当我们的TB以上等级的传统EXT系列文件系统在格式化的时候，光是系统要预先分配inode于区块都要消耗很多时间</p></li></ul><h2 id="XFS文件系统的配置"><a href="#XFS文件系统的配置" class="headerlink" title="XFS文件系统的配置"></a>XFS文件系统的配置</h2><p>XFS基本上就是一个日志式文件系统，而CentOS7拿他当默认的文件系统，原因就是，在最早之前XFS就是被开发来用于高容量磁盘以及高性能文件系统来用的，因此相当适合现在的系统环境，此外几乎所有EXT4文件系统有的功能，XFS都可以具备，</p><p>XFS文件系统在数据上的分布</p><ul><li>数据区（<code>data section</code>）<ul><li>包括inode、数据区块、超级区块等数据都放在这个区块</li><li>分为多个存储区群组（<code>allocation groups</code>）来分别放置文件系统所需要的数据，每个存储区群组都包含了<ul><li>整个文件系统的超级区块</li><li>剩余空间的管理机制</li><li>inode的分配和追踪</li></ul></li></ul></li><li>文件系统活动登陆区（<code>log section</code>）<ul><li>主要用作记录文件系统的变化，文件的变化会在这里记录下来，知道该变化完整地写入到数据区后，该条记录才会被结束</li><li>在该区域中，可以指定外部的磁盘作为XFS文件系统的日志区块，例如：可以将SSD磁盘作为XFS的登陆区，当系统需要进行任何活动时就可以更快速的进行工作。</li></ul></li><li>实时运行区（<code>realtime section</code>）<ul><li>当有文件需要被建立时，XFS会在这个区段里面找到一个到数个的extent区块，将文件放置在这个区块内，等到分配完毕后再写入到<code>data section</code>的inode与区块中</li></ul></li></ul><h2 id="XFS文件系统的描述数据观察"><a href="#XFS文件系统的描述数据观察" class="headerlink" title="XFS文件系统的描述数据观察"></a>XFS文件系统的描述数据观察</h2><ul><li><p>找出系统在/boot这个挂载点下面的文件系统的超级区块记录</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404162016495.png" alt="image-20240416201648433"> </p><ul><li><code>isize</code>：<code>inode</code>容量，每个有512B这么大</li><li><code>agcount</code>：存储区群组（<code>allocation group</code>）的个数，共有4个</li><li><code>agsize</code>：是指每个存储区群组具有65536个区块，配合<code>bsize</code>区块设置为4K，因此整个文件系统的容量就是<code>4*35536*4K</code>这么大</li><li><code>sectsz</code>：逻辑扇区（<code>sector</code>）的容量设置为512B</li><li><code>bsize</code>：区块容量，每个区块为4K，共有262144个区块在这个文件系统内</li><li><code>sunit</code>与<code>swidth</code>：与磁盘阵列的stripe相关性较高，</li><li><code>internal</code>：该登陆区的位置在文件系统内，而不是外部设备的意思，且占用了<code>4K*2560</code>个区块，总共约10M的容量</li><li><code>realtime</code>：里面的extentsize为4K，不过目前没有使用</li></ul></li></ul><h2 id="文件系统的简单操作"><a href="#文件系统的简单操作" class="headerlink" title="文件系统的简单操作"></a>文件系统的简单操作</h2><h3 id="磁盘与目录的容量"><a href="#磁盘与目录的容量" class="headerlink" title="磁盘与目录的容量"></a>磁盘与目录的容量</h3><ul><li><code>df</code>：列出文件系统的整体磁盘使用量</li><li><code>du</code>：查看文件系统的磁盘使用量（常用在查看目录所占磁盘空间）</li></ul><h4 id="df"><a href="#df" class="headerlink" title="df"></a>df</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>feliks@localhost ~<span class="token punctuation">]</span>$ <span class="token function">df</span> <span class="token punctuation">[</span>-ahikHTm<span class="token punctuation">]</span> <span class="token punctuation">[</span>目录或文件名<span class="token punctuation">]</span>选项与参数：-a：列出所有的文件系统，包括系统特有的/proc等文件系统-k：以KBytes的容量显示各文件系统-m：以MBytes的容量显示各文件系统-h：以人们较易阅读的GBytes、MBytes、KBytes等格式自行显示————————————————————————————————————————————————————-H：以 <span class="token assign-left variable">M</span><span class="token operator">=</span>1000K 替换 <span class="token assign-left variable">M</span><span class="token operator">=</span>1024K 的进位方式-T：连同该硬盘分区的文件系统名称（例如XFS）也列出-i：不用磁盘容量，而以inode的数量来显示————————————————————————————————————————————————————<span class="token punctuation">[</span>feliks@localhost ~<span class="token punctuation">]</span>$ <span class="token function">df</span>文件系统                   1K-块    已用    可用 已用% 挂载点devtmpfs                  <span class="token number">480684</span>       <span class="token number">0</span>  <span class="token number">480684</span>    <span class="token number">0</span>% /devtmpfs                     <span class="token number">497816</span>       <span class="token number">0</span>  <span class="token number">497816</span>    <span class="token number">0</span>% /dev/shmtmpfs                     <span class="token number">497816</span>    <span class="token number">8800</span>  <span class="token number">489016</span>    <span class="token number">2</span>% /runtmpfs                     <span class="token number">497816</span>       <span class="token number">0</span>  <span class="token number">497816</span>    <span class="token number">0</span>% /sys/fs/cgroup/dev/mapper/centos-root <span class="token number">10475520</span> <span class="token number">4832244</span> <span class="token number">5643276</span>   <span class="token number">47</span>% //dev/sda2                <span class="token number">1038336</span>  <span class="token number">177544</span>  <span class="token number">860792</span>   <span class="token number">18</span>% /boot/dev/mapper/centos-home  <span class="token number">5232640</span>   <span class="token number">38940</span> <span class="token number">5193700</span>    <span class="token number">1</span>% /hometmpfs                      <span class="token number">99564</span>      <span class="token number">52</span>   <span class="token number">99512</span>    <span class="token number">1</span>% /run/user/1000tmpfs                      <span class="token number">99564</span>       <span class="token number">0</span>   <span class="token number">99564</span>    <span class="token number">0</span>% /run/user/0<span class="token comment"># 在Linux下面如果df没有加任何选项，那么默认会将系统内所有的（不含特殊的内存内的文件系统与swap）</span><span class="token comment"># 都以 1KBytes 的容量来列出来，至于那个/dev/shm是与内存有关的挂载，暂时不予理会</span></code></pre><ul><li><code>Filesystem</code>：代表该文件系统是在哪个硬盘分区，所以列出设备名称</li><li><code>1K-块</code>：1k-blocks，说明下面的数字单位是1KB，可利用 -h 或 -m 来改变容量</li><li><code>已用</code>：Used，使用掉的磁盘空间</li><li><code>可用</code>：Available，剩下的磁盘空间</li><li><code>已用%</code>：Use%，磁盘的使用率，如果使用率高达90%以上，最好注意一下，免得容量不足造成系统问题</li><li><code>挂载点</code>：Mounted on，就是磁盘的挂载目录</li></ul><p>将容量结果以易读的格式显示出来</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>feliks@localhost ~<span class="token punctuation">]</span>$ <span class="token function">df</span> <span class="token parameter variable">-h</span>文件系统                 容量  已用  可用 已用% 挂载点devtmpfs                 470M     <span class="token number">0</span>  470M    <span class="token number">0</span>% /devtmpfs                    487M     <span class="token number">0</span>  487M    <span class="token number">0</span>% /dev/shmtmpfs                    487M  <span class="token number">8</span>.6M  478M    <span class="token number">2</span>% /runtmpfs                    487M     <span class="token number">0</span>  487M    <span class="token number">0</span>% /sys/fs/cgroup/dev/mapper/centos-root   10G  <span class="token number">4</span>.7G  <span class="token number">5</span>.4G   <span class="token number">47</span>% //dev/sda2               1014M  174M  841M   <span class="token number">18</span>% /boot/dev/mapper/centos-home  <span class="token number">5</span>.0G   39M  <span class="token number">5</span>.0G    <span class="token number">1</span>% /hometmpfs                     98M   52K   98M    <span class="token number">1</span>% /run/user/1000tmpfs                     98M     <span class="token number">0</span>   98M    <span class="token number">0</span>% /run/user/0</code></pre><p>将系统内的所有特殊文件格式及名称都列出来</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>feliks@localhost ~<span class="token punctuation">]</span>$ <span class="token function">df</span> <span class="token parameter variable">-aT</span>文件系统                类型               1K-块    已用    可用 已用% 挂载点sysfs                   sysfs                  <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0</span>     - /sysproc                    proc                   <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0</span>     - /procdevtmpfs                devtmpfs          <span class="token number">480684</span>       <span class="token number">0</span>  <span class="token number">480684</span>    <span class="token number">0</span>% /devsecurityfs              securityfs             <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0</span>     - /sys/kernel/securitytmpfs                   tmpfs             <span class="token number">497816</span>       <span class="token number">0</span>  <span class="token number">497816</span>    <span class="token number">0</span>% /dev/shmdevpts                  devpts                 <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0</span>     - /dev/ptstmpfs                   tmpfs             <span class="token number">497816</span>    <span class="token number">8800</span>  <span class="token number">489016</span>    <span class="token number">2</span>% /runtmpfs                   tmpfs             <span class="token number">497816</span>       <span class="token number">0</span>  <span class="token number">497816</span>    <span class="token number">0</span>% /sys/fs/cgroupcgroup                  cgroup                 <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0</span>     - /sys/fs/cgroup/systemdpstore                  pstore                 <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0</span>     - /sys/fs/pstorecgroup                  cgroup                 <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0</span>     - /sys/fs/cgroup/net_cls,net_priocgroup                  cgroup                 <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0</span>     - /sys/fs/cgroup/freezercgroup                  cgroup                 <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0</span>     - /sys/fs/cgroup/memorycgroup                  cgroup                 <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0</span>     - /sys/fs/cgroup/cpu,cpuacctcgroup                  cgroup                 <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0</span>     - /sys/fs/cgroup/devicescgroup                  cgroup                 <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0</span>     - /sys/fs/cgroup/cpusetcgroup                  cgroup                 <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0</span>     - /sys/fs/cgroup/hugetlbcgroup                  cgroup                 <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0</span>     - /sys/fs/cgroup/perf_eventcgroup                  cgroup                 <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0</span>     - /sys/fs/cgroup/pidscgroup                  cgroup                 <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0</span>     - /sys/fs/cgroup/blkioconfigfs                configfs               <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0</span>     - /sys/kernel/config/dev/mapper/centos-root xfs             <span class="token number">10475520</span> <span class="token number">4832252</span> <span class="token number">5643268</span>   <span class="token number">47</span>% /selinuxfs               selinuxfs              <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0</span>     - /sys/fs/selinuxsystemd-1               autofs                 <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0</span>     - /proc/sys/fs/binfmt_miscdebugfs                 debugfs                <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0</span>     - /sys/kernel/debugmqueue                  mqueue                 <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0</span>     - /dev/mqueuehugetlbfs               hugetlbfs              <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0</span>     - /dev/hugepagesfusectl                 fusectl                <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0</span>     - /sys/fs/fuse/connections/dev/sda2               xfs              <span class="token number">1038336</span>  <span class="token number">177544</span>  <span class="token number">860792</span>   <span class="token number">18</span>% /boot/dev/mapper/centos-home xfs              <span class="token number">5232640</span>   <span class="token number">38940</span> <span class="token number">5193700</span>    <span class="token number">1</span>% /homesunrpc                  rpc_pipefs             <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0</span>     - /var/lib/nfs/rpc_pipefstmpfs                   tmpfs              <span class="token number">99564</span>      <span class="token number">52</span>   <span class="token number">99512</span>    <span class="token number">1</span>% /run/user/1000gvfsd-fuse              fuse.gvfsd-fuse        <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0</span>     - /run/user/1000/gvfstmpfs                   tmpfs              <span class="token number">99564</span>       <span class="token number">0</span>   <span class="token number">99564</span>    <span class="token number">0</span>% /run/user/0</code></pre><p>将/etc下面的可用的磁盘容量以易读的容量格式显示</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>feliks@localhost ~<span class="token punctuation">]</span>$ <span class="token function">df</span> <span class="token parameter variable">-h</span> /etc文件系统                 容量  已用  可用 已用% 挂载点/dev/mapper/centos-root   10G  <span class="token number">4</span>.7G  <span class="token number">5</span>.4G   <span class="token number">47</span>% /</code></pre><p>将目前各个硬盘分区可用的inode数量列出</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>feliks@localhost ~<span class="token punctuation">]</span>$ <span class="token function">df</span> <span class="token parameter variable">-ih</span>文件系统                Inode 已用<span class="token punctuation">(</span>I<span class="token punctuation">)</span> 可用<span class="token punctuation">(</span>I<span class="token punctuation">)</span> 已用<span class="token punctuation">(</span>I<span class="token punctuation">)</span>% 挂载点devtmpfs                 118K     <span class="token number">402</span>    117K       <span class="token number">1</span>% /devtmpfs                    122K       <span class="token number">1</span>    122K       <span class="token number">1</span>% /dev/shmtmpfs                    122K    <span class="token number">1001</span>    121K       <span class="token number">1</span>% /runtmpfs                    122K      <span class="token number">16</span>    122K       <span class="token number">1</span>% /sys/fs/cgroup/dev/mapper/centos-root  <span class="token number">5</span>.0M    128K    <span class="token number">4</span>.9M       <span class="token number">3</span>% //dev/sda2                512K     <span class="token number">340</span>    512K       <span class="token number">1</span>% /boot/dev/mapper/centos-home  <span class="token number">2</span>.5M     <span class="token number">183</span>    <span class="token number">2</span>.5M       <span class="token number">1</span>% /hometmpfs                    122K      <span class="token number">25</span>    122K       <span class="token number">1</span>% /run/user/1000tmpfs                    122K       <span class="token number">1</span>    122K       <span class="token number">1</span>% /run/user/0</code></pre><blockquote><p>  <strong>Considerations</strong></p><ul><li>由于df主要读取的数据几乎都是针对一整个文件系统，因此读取的范围主要是在超级区块内的信息，所以这个命令显示结果非常快，在显示过程中要留意一下根目录（/）的剩余容量，因为所有的数据都是由根目录衍生出来的，如果其剩余容量剩下0时问题就会很大了</li><li>使用-a参数时，/proc挂载点里面的东西都是0是因为，/proc里的东西都是Linux系统所需要加载的系统数据，而且是挂载在内存当中，所以当然没有占用任何磁盘空间</li><li>/dev/shm：是<strong>利用内存虚拟出来的磁盘空间，通常是总物理内存的一半</strong></li></ul></blockquote><h4 id="du"><a href="#du" class="headerlink" title="du"></a>du</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>feliks@localhost ~<span class="token punctuation">]</span>$ <span class="token function">du</span> <span class="token punctuation">[</span>-ahskm<span class="token punctuation">]</span> 文件或目录名称选项与参数：-a：列出所有的文件与目录容量，因为默认仅统计目录下面的文件量-h：以人们较易阅读的容量格式（G/M）显示-s：仅列出总量，而不列出每个各别的目录占用容量————————————————————————————————————————————————————————-S：不包括子目录下的总计-k：以KBytes列出容量显示-m：以MBytes列出容量显示</code></pre><p>列出当前目录下的所有文件容量</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>feliks@localhost ~<span class="token punctuation">]</span>$ <span class="token function">du</span><span class="token number">0</span>./.mozilla/extensions<span class="token number">0</span>./.mozilla/plugins<span class="token number">0</span>./.mozilla<span class="token number">4</span>./.cache/gdm<span class="token number">4</span>./.cache/imsettings<span class="token number">0</span>./.cache/libgweather<span class="token number">0</span>./.cache/evolution/addressbook/trash<span class="token number">0</span>./.cache/evolution/addressbook<span class="token number">0</span>./.cache/evolution/calendar/trash<span class="token number">0</span>./.cache/evolution/calendar<span class="token number">0</span>./.cache/evolution/mail/trash<span class="token number">0</span>./.cache/evolution/mail<span class="token number">0</span>./.cache/evolution/memos/trash<span class="token number">0</span>./.cache/evolution/memos<span class="token number">0</span>./.cache/evolution/sources/trash<span class="token number">0</span>./.cache/evolution/sources<span class="token number">0</span>./.cache/evolution/tasks/trash<span class="token number">0</span>./.cache/evolution/tasks<span class="token number">0</span>./.cache/evolution<span class="token number">0</span>./.cache/gnome-shell<span class="token number">3288</span>./.cache/tracker<span class="token number">4</span>./.cache/abrt<span class="token number">488</span>./.cache/gstreamer-1.0<span class="token number">0</span>./.cache/flatpak/system-cache<span class="token number">0</span>./.cache/flatpak<span class="token number">0</span>./.cache/media-art<span class="token number">0</span>./.cache/yelp/WebKitCache/Version <span class="token number">16</span>/Blobs<span class="token number">4</span>./.cache/yelp/WebKitCache/Version <span class="token number">16</span><span class="token number">4</span>./.cache/yelp/WebKitCache<span class="token number">4</span>./.cache/yelp<span class="token number">0</span>./.cache/gnome-software/shell-extensions<span class="token number">1552</span>./.cache/gnome-software/odrs<span class="token number">1552</span>./.cache/gnome-software<span class="token number">5360</span>./.cache<span class="token number">4</span>./.dbus/session-bus<span class="token number">4</span>./.dbus<span class="token number">0</span>./.config/imsettings<span class="token number">0</span>./.config/gnome-session/saved-session<span class="token number">0</span>./.config/gnome-session<span class="token number">68</span>./.config/pulse<span class="token number">4</span>./.config/ibus/bus<span class="token number">4</span>./.config/ibus<span class="token number">8</span>./.config/dconf<span class="token number">4</span>./.config/evolution/sources<span class="token number">4</span>./.config/evolution<span class="token number">0</span>./.config/goa-1.0<span class="token number">0</span>./.config/gconf<span class="token number">4</span>./.config/gtk-3.0<span class="token number">0</span>./.config/abrt<span class="token number">4</span>./.config/nautilus<span class="token number">4</span>./.config/yelp<span class="token number">108</span>./.config<span class="token number">8</span>./.local/share/keyrings<span class="token number">8</span>./.local/share/gnome-shell<span class="token number">0</span>./.local/share/evolution/addressbook/trash<span class="token number">0</span>./.local/share/evolution/addressbook/system/photos<span class="token number">24</span>./.local/share/evolution/addressbook/system<span class="token number">24</span>./.local/share/evolution/addressbook<span class="token number">0</span>./.local/share/evolution/calendar/trash<span class="token number">4</span>./.local/share/evolution/calendar/system<span class="token number">4</span>./.local/share/evolution/calendar<span class="token number">0</span>./.local/share/evolution/mail/trash<span class="token number">0</span>./.local/share/evolution/mail<span class="token number">0</span>./.local/share/evolution/memos/trash<span class="token number">0</span>./.local/share/evolution/memos<span class="token number">0</span>./.local/share/evolution/tasks/trash<span class="token number">0</span>./.local/share/evolution/tasks<span class="token number">28</span>./.local/share/evolution<span class="token number">8</span>./.local/share/telepathy/mission-control<span class="token number">8</span>./.local/share/telepathy<span class="token number">0</span>./.local/share/sounds<span class="token number">0</span>./.local/share/applications<span class="token number">0</span>./.local/share/icc<span class="token number">0</span>./.local/share/gnome-settings-daemon<span class="token number">0</span>./.local/share/flatpak/db<span class="token number">0</span>./.local/share/flatpak/repo/tmp/cache<span class="token number">0</span>./.local/share/flatpak/repo/tmp<span class="token number">0</span>./.local/share/flatpak/repo/extensions<span class="token number">0</span>./.local/share/flatpak/repo/state<span class="token number">0</span>./.local/share/flatpak/repo/refs/heads<span class="token number">0</span>./.local/share/flatpak/repo/refs/mirrors<span class="token number">0</span>./.local/share/flatpak/repo/refs/remotes<span class="token number">0</span>./.local/share/flatpak/repo/refs<span class="token number">0</span>./.local/share/flatpak/repo/objects<span class="token number">4</span>./.local/share/flatpak/repo<span class="token number">4</span>./.local/share/flatpak<span class="token number">36</span>./.local/share/gvfs-metadata<span class="token number">180</span>./.local/share/tracker/data<span class="token number">180</span>./.local/share/tracker<span class="token number">0</span>./.local/share/nautilus/scripts<span class="token number">0</span>./.local/share/nautilus<span class="token number">0</span>./.local/share/webkitgtk/deviceidhashsalts/1<span class="token number">0</span>./.local/share/webkitgtk/deviceidhashsalts<span class="token number">0</span>./.local/share/webkitgtk/databases/indexeddb/v1<span class="token number">0</span>./.local/share/webkitgtk/databases/indexeddb<span class="token number">0</span>./.local/share/webkitgtk/databases<span class="token number">0</span>./.local/share/webkitgtk/localstorage<span class="token number">0</span>./.local/share/webkitgtk<span class="token number">276</span>./.local/share<span class="token number">276</span>./.local<span class="token number">0</span>./桌面<span class="token number">0</span>./下载<span class="token number">0</span>./模板<span class="token number">0</span>./公共<span class="token number">0</span>./文档<span class="token number">0</span>./音乐<span class="token number">0</span>./图片<span class="token number">0</span>./视频<span class="token number">5776</span><span class="token builtin class-name">.</span><span class="token comment"># 直接输入du没有加任何选项时，则du会分析【当前所在目录】的文件与目录所占用的磁盘空间</span><span class="token comment"># 但是实际显示时，仅会显示目录容量（不含文件），因此（.）目录有很多文件没有被列出来</span><span class="token comment"># 所以全部的目录相加不会登录（.）的容量，此外输出的数值数据为1K大小的容量单位</span></code></pre><p>将文件的容量也列出来</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>feliks@localhost ~<span class="token punctuation">]</span>$ <span class="token function">du</span> <span class="token parameter variable">-a</span><span class="token number">0</span>./.mozilla/extensions<span class="token number">0</span>./.mozilla/plugins<span class="token number">0</span>./.mozilla<span class="token number">4</span>./.bash_logout<span class="token number">4</span>./.bash_profile<span class="token number">4</span>./.bashrc<span class="token number">4</span>./.cache/gdm/session.log<span class="token number">4</span>./.cache/gdm<span class="token number">4</span>./.cache/imsettings/log<span class="token number">4</span>./.cache/imsettings<span class="token number">0</span>./.cache/libgweather<span class="token number">0</span>./.cache/evolution/addressbook/trash<span class="token number">0</span>./.cache/evolution/addressbook<span class="token number">0</span>./.cache/evolution/calendar/trash<span class="token number">0</span>./.cache/evolution/calendar<span class="token number">0</span>./.cache/evolution/mail/trash<span class="token number">0</span>./.cache/evolution/mail<span class="token number">0</span>./.cache/evolution/memos/trash<span class="token number">0</span>./.cache/evolution/memos<span class="token number">0</span>./.cache/evolution/sources/trash<span class="token number">0</span>./.cache/evolution/sources<span class="token number">0</span>./.cache/evolution/tasks/trash<span class="token number">0</span>./.cache/evolution/tasks<span class="token number">0</span>./.cache/evolution<span class="token number">0</span>./.cache/gnome-shell/update-check-3.28<span class="token number">0</span>./.cache/gnome-shell<span class="token number">4</span>./.cache/tracker/db-version.txt<span class="token number">1568</span>./.cache/tracker/meta.db<span class="token number">4</span>./.cache/tracker/db-locale.txt<span class="token number">1308</span>./.cache/tracker/meta.db-wal<span class="token number">32</span>./.cache/tracker/meta.db-shm<span class="token number">352</span>./.cache/tracker/ontologies.gvdb<span class="token number">4</span>./.cache/tracker/parser-sha1.txt<span class="token number">4</span>./.cache/tracker/locale-for-miner-user-guides.txt<span class="token number">4</span>./.cache/tracker/locale-for-miner-apps.txt<span class="token number">4</span>./.cache/tracker/last-crawl.txt<span class="token number">4</span>./.cache/tracker/first-index.txt<span class="token number">3288</span>./.cache/tracker<span class="token number">0</span>./.cache/abrt/applet_dirlist<span class="token number">4</span>./.cache/abrt/lastnotification<span class="token number">4</span>./.cache/abrt<span class="token number">12</span>./.cache/event-sound-cache.tdb.ea4a9b366ec245bfb19288f6213d4ee7.x86_64-redhat-linux-gnu<span class="token number">488</span>./.cache/gstreamer-1.0/registry.x86_64.bin<span class="token number">488</span>./.cache/gstreamer-1.0<span class="token number">0</span>./.cache/flatpak/system-cache<span class="token number">0</span>./.cache/flatpak<span class="token number">0</span>./.cache/media-art<span class="token number">4</span>./.cache/yelp/WebKitCache/Version <span class="token number">16</span>/salt<span class="token number">0</span>./.cache/yelp/WebKitCache/Version <span class="token number">16</span>/Blobs<span class="token number">4</span>./.cache/yelp/WebKitCache/Version <span class="token number">16</span><span class="token number">4</span>./.cache/yelp/WebKitCache<span class="token number">4</span>./.cache/yelp<span class="token number">0</span>./.cache/gnome-software/shell-extensions<span class="token number">1552</span>./.cache/gnome-software/odrs/ratings.json<span class="token number">1552</span>./.cache/gnome-software/odrs<span class="token number">1552</span>./.cache/gnome-software<span class="token number">5360</span>./.cache<span class="token number">4</span>./.dbus/session-bus/ea4a9b366ec245bfb19288f6213d4ee7-0<span class="token number">4</span>./.dbus/session-bus<span class="token number">4</span>./.dbus<span class="token number">0</span>./.config/imsettings<span class="token number">0</span>./.config/gnome-session/saved-session<span class="token number">0</span>./.config/gnome-session<span class="token number">12</span>./.config/pulse/ea4a9b366ec245bfb19288f6213d4ee7-device-volumes.tdb<span class="token number">12</span>./.config/pulse/ea4a9b366ec245bfb19288f6213d4ee7-stream-volumes.tdb<span class="token number">28</span>./.config/pulse/ea4a9b366ec245bfb19288f6213d4ee7-card-database.tdb<span class="token number">4</span>./.config/pulse/cookie<span class="token number">4</span>./.config/pulse/ea4a9b366ec245bfb19288f6213d4ee7-default-sink<span class="token number">4</span>./.config/pulse/ea4a9b366ec245bfb19288f6213d4ee7-default-source<span class="token number">68</span>./.config/pulse<span class="token number">4</span>./.config/ibus/bus/ea4a9b366ec245bfb19288f6213d4ee7-unix-0<span class="token number">4</span>./.config/ibus/bus<span class="token number">4</span>./.config/ibus<span class="token number">8</span>./.config/dconf/user<span class="token number">8</span>./.config/dconf<span class="token number">4</span>./.config/evolution/sources/system-proxy.source<span class="token number">4</span>./.config/evolution/sources<span class="token number">4</span>./.config/evolution<span class="token number">0</span>./.config/goa-1.0<span class="token number">4</span>./.config/user-dirs.dirs<span class="token number">4</span>./.config/user-dirs.locale<span class="token number">0</span>./.config/gconf<span class="token number">4</span>./.config/gtk-3.0/bookmarks<span class="token number">4</span>./.config/gtk-3.0<span class="token number">0</span>./.config/abrt<span class="token number">4</span>./.config/nautilus/desktop-metadata<span class="token number">4</span>./.config/nautilus<span class="token number">4</span>./.config/gnome-initial-setup-done<span class="token number">4</span>./.config/yelp/yelp.cfg<span class="token number">4</span>./.config/yelp<span class="token number">108</span>./.config<span class="token number">4</span>./.ICEauthority<span class="token number">4</span>./.local/share/keyrings/login.keyring<span class="token number">4</span>./.local/share/keyrings/user.keystore<span class="token number">8</span>./.local/share/keyrings<span class="token number">4</span>./.local/share/gnome-shell/application_state<span class="token number">4</span>./.local/share/gnome-shell/notifications<span class="token number">8</span>./.local/share/gnome-shell<span class="token number">0</span>./.local/share/evolution/addressbook/trash<span class="token number">24</span>./.local/share/evolution/addressbook/system/contacts.db<span class="token number">0</span>./.local/share/evolution/addressbook/system/photos<span class="token number">24</span>./.local/share/evolution/addressbook/system<span class="token number">24</span>./.local/share/evolution/addressbook<span class="token number">0</span>./.local/share/evolution/calendar/trash<span class="token number">4</span>./.local/share/evolution/calendar/system/calendar.ics<span class="token number">4</span>./.local/share/evolution/calendar/system<span class="token number">4</span>./.local/share/evolution/calendar<span class="token number">0</span>./.local/share/evolution/mail/trash<span class="token number">0</span>./.local/share/evolution/mail<span class="token number">0</span>./.local/share/evolution/memos/trash<span class="token number">0</span>./.local/share/evolution/memos<span class="token number">0</span>./.local/share/evolution/tasks/trash<span class="token number">0</span>./.local/share/evolution/tasks<span class="token number">28</span>./.local/share/evolution<span class="token number">4</span>./.local/share/telepathy/mission-control/accounts.cfg<span class="token number">4</span>./.local/share/telepathy/mission-control/accounts-goa.cfg<span class="token number">8</span>./.local/share/telepathy/mission-control<span class="token number">8</span>./.local/share/telepathy<span class="token number">4</span>./.local/share/gsettings-data-convert<span class="token number">0</span>./.local/share/sounds<span class="token number">0</span>./.local/share/applications<span class="token number">0</span>./.local/share/icc<span class="token number">0</span>./.local/share/gnome-settings-daemon/input-sources-converted<span class="token number">0</span>./.local/share/gnome-settings-daemon<span class="token number">0</span>./.local/share/flatpak/db<span class="token number">4</span>./.local/share/flatpak/repo/config<span class="token number">0</span>./.local/share/flatpak/repo/tmp/cache<span class="token number">0</span>./.local/share/flatpak/repo/tmp<span class="token number">0</span>./.local/share/flatpak/repo/extensions<span class="token number">0</span>./.local/share/flatpak/repo/state<span class="token number">0</span>./.local/share/flatpak/repo/refs/heads<span class="token number">0</span>./.local/share/flatpak/repo/refs/mirrors<span class="token number">0</span>./.local/share/flatpak/repo/refs/remotes<span class="token number">0</span>./.local/share/flatpak/repo/refs<span class="token number">0</span>./.local/share/flatpak/repo/objects<span class="token number">4</span>./.local/share/flatpak/repo<span class="token number">0</span>./.local/share/flatpak/.changed<span class="token number">4</span>./.local/share/flatpak<span class="token number">4</span>./.local/share/gvfs-metadata/home<span class="token number">32</span>./.local/share/gvfs-metadata/home-6a94f74b.log<span class="token number">36</span>./.local/share/gvfs-metadata<span class="token number">0</span>./.local/share/tracker/data/.meta.isrunning<span class="token number">104</span>./.local/share/tracker/data/tracker-store.journal<span class="token number">76</span>./.local/share/tracker/data/tracker-store.ontology.journal<span class="token number">180</span>./.local/share/tracker/data<span class="token number">180</span>./.local/share/tracker<span class="token number">0</span>./.local/share/nautilus/scripts<span class="token number">0</span>./.local/share/nautilus<span class="token number">0</span>./.local/share/webkitgtk/deviceidhashsalts/1<span class="token number">0</span>./.local/share/webkitgtk/deviceidhashsalts<span class="token number">0</span>./.local/share/webkitgtk/databases/indexeddb/v1<span class="token number">0</span>./.local/share/webkitgtk/databases/indexeddb<span class="token number">0</span>./.local/share/webkitgtk/databases<span class="token number">0</span>./.local/share/webkitgtk/localstorage<span class="token number">0</span>./.local/share/webkitgtk<span class="token number">276</span>./.local/share<span class="token number">276</span>./.local<span class="token number">4</span>./.esd_auth<span class="token number">0</span>./桌面<span class="token number">0</span>./下载<span class="token number">0</span>./模板<span class="token number">0</span>./公共<span class="token number">0</span>./文档<span class="token number">0</span>./音乐<span class="token number">0</span>./图片<span class="token number">0</span>./视频<span class="token number">4</span>./.Xauthority<span class="token number">5776</span><span class="token builtin class-name">.</span></code></pre><p>检查根目录下每个目录所占用的容量</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost feliks<span class="token punctuation">]</span><span class="token comment"># du -sm /*</span><span class="token number">0</span>/bin<span class="token number">141</span>/boot<span class="token number">0</span>/dev<span class="token number">42</span>/etc<span class="token number">6</span>/home<span class="token number">0</span>/lib<span class="token number">0</span>/lib64<span class="token number">0</span>/media<span class="token number">0</span>/mnt<span class="token number">0</span>/optdu: 无法访问<span class="token string">"/proc/58138/task/58138/fd/3"</span><span class="token builtin class-name">:</span> 没有那个文件或目录du: 无法访问<span class="token string">"/proc/58138/task/58138/fdinfo/3"</span><span class="token builtin class-name">:</span> 没有那个文件或目录du: 无法访问<span class="token string">"/proc/58138/fd/3"</span><span class="token builtin class-name">:</span> 没有那个文件或目录du: 无法访问<span class="token string">"/proc/58138/fdinfo/3"</span><span class="token builtin class-name">:</span> 没有那个文件或目录<span class="token number">0</span>/proc<span class="token number">1</span>/rootdu: 无法访问<span class="token string">"/run/user/1000/gvfs"</span><span class="token builtin class-name">:</span> 权限不够<span class="token number">9</span>/run<span class="token number">0</span>/sbin<span class="token number">0</span>/srv<span class="token number">0</span>/sys<span class="token number">1</span>/tmp<span class="token number">3672</span>/usr<span class="token number">910</span>/var<span class="token comment"># 利用通配符*来代表每个目录，如果想要检查某个目录下哪个子目录占用最大的容量，可以用这个方法找出来。</span><span class="token comment"># /proc里面的“没有那个文件或目录”（No such file or directory）的错误，只是因为内存中的程序，</span><span class="token comment"># 程序执行结束就会消失，因此会有些目录找不到是正常的</span></code></pre><h2 id="磁盘的分区、格式化、检验与挂载"><a href="#磁盘的分区、格式化、检验与挂载" class="headerlink" title="磁盘的分区、格式化、检验与挂载"></a>磁盘的分区、格式化、检验与挂载</h2><p>当我们想要在系统里面新增一块磁盘时</p><ol><li>对磁盘进行划分，以建立可用的磁盘分区</li><li>对该磁盘分区进行格式化（format），以建立系统可用的文件系统</li><li>对刚建好的文件系统进行检验</li><li>在Linux上，需要建立挂载点（目录），并将其挂载上来</li></ol><h3 id="观察磁盘分区状态"><a href="#观察磁盘分区状态" class="headerlink" title="观察磁盘分区状态"></a>观察磁盘分区状态</h3><h4 id="lsblk（列出系统上的所有磁盘列表）"><a href="#lsblk（列出系统上的所有磁盘列表）" class="headerlink" title="lsblk（列出系统上的所有磁盘列表）"></a>lsblk（列出系统上的所有磁盘列表）</h4><ul><li><p>-d：仅列出磁盘本身，并不会列出该磁盘的分区数据</p></li><li><p>-f：同时列出该磁盘内的文件系统名称</p></li><li><p>-i：使用ASCII的字符输出，不要使用复杂的编码</p></li><li><p>-m：同时输出该设备在/dev下面的权限信息（rwx的数据）</p></li><li><p>-p：列出该设备的完整文件名，而不是仅列出最后的名字</p></li><li><p>-t：列出该磁盘设备的详细数据，包括磁盘阵列机制，预读写的数据量大小等</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310081010722.png" alt="image-20231008081308748"> </p><ul><li><p>NAME：设备的文件名，省略/dev等前导目录</p></li><li><p>MAJ:MIN：主要与次要设备代码（内核识别的设备都是这两个代码来实现的）</p></li><li><p>RM：是否为可卸载设备：例如光盘、USB磁盘</p></li><li><p>SIZE：容量</p></li><li><p>RO：是否为只读设备</p></li><li><p>TYPE：是磁盘（disk）、分区（partition）还是只读存储器（rom）等输出</p></li><li><p>MOUNTPOINT：挂载点</p><p>）</p></li></ul></li></ul><h4 id="blkid（列出设备的UUID参数）"><a href="#blkid（列出设备的UUID参数）" class="headerlink" title="blkid（列出设备的UUID参数）"></a>blkid（列出设备的UUID参数）</h4><ul><li>UUID？<ul><li>UUID是全局唯一标识符（universally unique identifier），这个标识符可以拿来作为挂在或是使用这个设备或文件系统</li></ul></li></ul><h4 id="parted（列出磁盘的分区表类型与分区信息）"><a href="#parted（列出磁盘的分区表类型与分区信息）" class="headerlink" title="parted（列出磁盘的分区表类型与分区信息）"></a>parted（列出磁盘的分区表类型与分区信息）</h4><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310081034102.png" alt="image-20231008103455070"> </p><p>列出/dev/sda磁盘的相关信息</p><h2 id="磁盘分区：gdisk-fdisk"><a href="#磁盘分区：gdisk-fdisk" class="headerlink" title="磁盘分区：gdisk/fdisk"></a>磁盘分区：gdisk/fdisk</h2><p><strong>注意：MBR分区表使用fdisk分区，GPT分区表使用gdisk分区</strong></p><p>① 先通过<code>lsblk</code>或<code>blkid</code>先找到磁盘</p><p>② 使用<code>parted /dev/xxx print</code>来找出内部的分区表类型</p><p>③ 再根据分区表类型判断使用<code>gdisk</code>还是<code>fdisk</code></p><h3 id="gdisk"><a href="#gdisk" class="headerlink" title="gdisk"></a>gdisk</h3><p>常用参数：</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310091407844.png" alt="image-20231009140726801"> </p><ul><li><p>d：删除一个分区 </p></li><li><p>n：增加一个分区</p></li><li><p>p：打印出该磁盘的分区表（常用）</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310091412498.png" alt="image-20231009141232127"> </p></li><li><p>q：不保存分区就直接离开gdisk</p></li><li><p>w：保存分区操作后离开gdisk</p></li></ul><p>该磁盘一共有40GB左右的容量，一共有83886080个扇区，实际上只使用到60708863号扇区</p><p><strong>强调：只要不按下w，直接按q退出就相安无事，此外也不要在MBR分区上使用gdisk，如果命令按错了分区记录会消失，也不要在GPT分区上使用fdisk</strong></p><h4 id="用gdisk新增分区"><a href="#用gdisk新增分区" class="headerlink" title="用gdisk新增分区"></a>用gdisk新增分区</h4><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310091428253.png" alt="image-20231009142805203"> </p><p>First sector：新增磁盘的开始扇区</p><p>Last sector：通过<code>+1G</code>这种操控容量的方式会自动计算结束扇区</p><p>Hex code or GUID：默认是Linux文件系统的8300</p><p>以同样的方法增加两个分区，一个是1G的vfat文件系统（Windows），一个是0.5G的swap（Linux Swap）</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310091434499.png" alt="image-20231009143451444"> </p><p>此时保存退出后系统并不会立刻加载新的分区表，因为Linux担心系统出问题，所以分区表并没有被更新，因此有两种方法：</p><ol><li>重新启动</li><li>通过partprobe来处理</li></ol><h4 id="partprobe更新Linux内核的分区表信息"><a href="#partprobe更新Linux内核的分区表信息" class="headerlink" title="partprobe更新Linux内核的分区表信息"></a>partprobe更新Linux内核的分区表信息</h4><p><code>partprobe -s</code>：更新Linux内核分区表信息</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310091443288.png" alt="image-20231009144356266"> </p><p>查看实际的磁盘分区状态：</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310091444550.png" alt="image-20231009144434520"> </p><p>内核的分区记录：</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310091445531.png" alt="image-20231009144503501"> </p><h4 id="用gdisk删除一个分区"><a href="#用gdisk删除一个分区" class="headerlink" title="用gdisk删除一个分区"></a>用gdisk删除一个分区</h4><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310091457616.png" alt="image-20231009145700564"> </p><p>然后记得用<code>partprobe -s</code>刷新分区表</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310091459915.png" alt="image-20231009145954838"> </p><h3 id="fdisk"><a href="#fdisk" class="headerlink" title="fdisk"></a>fdisk</h3><p>fdisk跟gdisk的使用方式几乎一样，fdisk有时会使用柱面（cylinder）作为分区的最小单位</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404162251099.png" alt="image-20240416225125040"> </p><h2 id="磁盘格式化"><a href="#磁盘格式化" class="headerlink" title="磁盘格式化"></a>磁盘格式化</h2><p>要进行格式化的命令就是【<code>mkfs</code>：makefilesystem】，该命令其实是一个综合命令，它会去调用正确的文件系统格式化工具软件，CentOS7使用XFS作为默认文件系统，先了解mkfs.xfs</p><h3 id="mkfs-xfs"><a href="#mkfs-xfs" class="headerlink" title="mkfs.xfs"></a>mkfs.xfs</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># mkfs.xfs [-b bsize] [-d parms] [-i parms] [-l parms] [-L label] [-f] [-r parms] 设备名称</span></code></pre><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404162303418.jpg" alt="9eaf23ce8ee1135d842011b22d43d20"> </p><p>将上面分出来的/dev/sda4格式化为xfs文件系统</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># partprobe -s</span>/dev/sda: msdos partitions <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># mkfs.xfs -f /dev/sda4</span>meta-data<span class="token operator">=</span>/dev/sda4              <span class="token assign-left variable">isize</span><span class="token operator">=</span><span class="token number">512</span>    <span class="token assign-left variable">agcount</span><span class="token operator">=</span><span class="token number">4</span>, <span class="token assign-left variable">agsize</span><span class="token operator">=</span><span class="token number">72684</span> blks         <span class="token operator">=</span>                       <span class="token assign-left variable">sectsz</span><span class="token operator">=</span><span class="token number">512</span>   <span class="token assign-left variable">attr</span><span class="token operator">=</span><span class="token number">2</span>, <span class="token assign-left variable">projid32bit</span><span class="token operator">=</span><span class="token number">1</span>         <span class="token operator">=</span>                       <span class="token assign-left variable">crc</span><span class="token operator">=</span><span class="token number">1</span>        <span class="token assign-left variable">finobt</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">sparse</span><span class="token operator">=</span><span class="token number">0</span>data     <span class="token operator">=</span>                       <span class="token assign-left variable">bsize</span><span class="token operator">=</span><span class="token number">4096</span>   <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">290736</span>, <span class="token assign-left variable">imaxpct</span><span class="token operator">=</span><span class="token number">25</span>         <span class="token operator">=</span>                       <span class="token assign-left variable">sunit</span><span class="token operator">=</span><span class="token number">0</span>      <span class="token assign-left variable">swidth</span><span class="token operator">=</span><span class="token number">0</span> blksnaming   <span class="token operator">=</span>version <span class="token number">2</span>              <span class="token assign-left variable">bsize</span><span class="token operator">=</span><span class="token number">4096</span>   ascii-ci<span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">ftype</span><span class="token operator">=</span><span class="token number">1</span>log      <span class="token operator">=</span>internal log           <span class="token assign-left variable">bsize</span><span class="token operator">=</span><span class="token number">4096</span>   <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">2560</span>, <span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token number">2</span>         <span class="token operator">=</span>                       <span class="token assign-left variable">sectsz</span><span class="token operator">=</span><span class="token number">512</span>   <span class="token assign-left variable">sunit</span><span class="token operator">=</span><span class="token number">0</span> blks, lazy-count<span class="token operator">=</span><span class="token number">1</span>realtime <span class="token operator">=</span>none                   <span class="token assign-left variable">extsz</span><span class="token operator">=</span><span class="token number">4096</span>   <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">rtextents</span><span class="token operator">=</span><span class="token number">0</span></code></pre><p>使用<code>blkid</code>查看是否格式化完毕</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># blkid /dev/sda4</span>/dev/sda4: <span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">"da2a4d8e-e1c8-4022-9a49-47095b158926"</span> <span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">"xfs"</span> </code></pre><h2 id="文件系统挂载与卸载"><a href="#文件系统挂载与卸载" class="headerlink" title="文件系统挂载与卸载"></a>文件系统挂载与卸载</h2><ul><li>单一文件系统不应该被重复挂载在不同的挂载点（目录）中</li><li>单一目录不应该重复挂载多个文件系统</li><li>要作为挂载点的目录，理论上应该都是空目录才行</li></ul><h3 id="mount"><a href="#mount" class="headerlink" title="mount"></a>mount</h3><p><code>mount -a</code></p><p><code>mount [-l]</code></p><p><code>mount [-t 文件系统] LABEL='' 挂载点</code></p><p><code>mount [-t 文件系统] UUID='' 挂载点</code></p><p><code>mount[-t 文件系统] 设备文件名 挂载点</code></p><ul><li>-a：依照配置文件/etc/fstab的数据将所有未挂载的磁盘都挂载上来</li><li>-l：单纯的输入mount会显示目前挂载的信息，加上-l可增列Label名称</li><li>-t：可以加上文件系统种类来指定想挂载的类型，常见的Linux支持类型有：xfs、ext3、ext4、reiserfs、vfat、iso9660（光盘格式）、nfs、cifs、smbfs（后面三种是网络文件系统类型）</li></ul><p><strong>通过<code>blkid</code>查看设备的UUID，更推荐使用UUID进行挂载，因为UUID是唯一的</strong></p><ul><li>挂载xfs/ext4/vfat等文件系统</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310121440141.png" alt="image-20231012144031082"> </p><ul><li>挂载CD或DVD光盘<ul><li>光驱一挂载之后就无法退出光盘了，除非将他卸载才能够退出（图形化界面会自动将光盘挂载到/media目录）</li></ul></li><li>挂载vfat中文移动磁盘（USB磁盘）:<code>mount -o codepage=950, iocharset=utf8 UUID="xxxxxxxxx" /data/usb</code><ul><li>vfat格式可以使用codepage来处理，中文语系的代码为950</li><li>默认的CentOS7并不支持NTFS文件系统格式</li></ul></li><li>重新挂载根目录与挂在不特定目录：<code>mount -o remount, rw, auto /</code><ul><li>重新挂载（remount）是个非常重要的机制，如果根目录出现【只读】或者挂载的参数要改变就可以用它</li><li>将目录挂载到另一个目录下：<code>mount --bind /var /data/var</code></li></ul></li><li>umount（将设备文件卸载）<ul><li>-f：强制卸载。可用在类似网络文件系统（NFS）无法读取到的情况下</li><li>-l：立刻卸载文件系统，比-f还牛逼</li><li>-n：不更新/etc/mtab情况下卸载</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux4.0 文件与目录管理</title>
      <link href="/2024/04/08/linux-4.0-wen-jian-yu-mu-lu-guan-li/"/>
      <url>/2024/04/08/linux-4.0-wen-jian-yu-mu-lu-guan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux文件与目录管理"><a href="#Linux文件与目录管理" class="headerlink" title="Linux文件与目录管理"></a>Linux文件与目录管理</h1><h2 id="目录与路径"><a href="#目录与路径" class="headerlink" title="目录与路径"></a>目录与路径</h2><h3 id="目录的相关操作"><a href="#目录的相关操作" class="headerlink" title="目录的相关操作"></a>目录的相关操作</h3><table><thead><tr><th>.</th><th align="left">代表此层目录</th></tr></thead><tbody><tr><td>..</td><td align="left">代表上一层目录</td></tr><tr><td>-</td><td align="left">代表前一个工作目录</td></tr><tr><td>~</td><td align="left">代表目前使用者身份所在的家目录</td></tr><tr><td>~ account</td><td align="left">代表account这个使用者的家目录（account是账号名）</td></tr></tbody></table><p>常见的处理目录的命令</p><ul><li><p>cd：切换目录</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309211527193.png" alt="image-20230921152726137"> </p></li><li><p>pwd：显示当前目录</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309211530834.png" alt="image-20230921153004807"> </p><p>-P可以获得正确的目录路径</p><p>/var/mail是/var/spool/mail的链接文件</p></li><li><p>mkdir：建立一个新目录</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309211535605.png" alt="image-20230921153509581"> </p><ul><li>-p：帮助你直接将所需要的目录递归创建</li><li>-m：设置文件权限，不使用默认权限</li><li>默认情况下目录是要一层一层创建的</li><li>图中test目录就是默认权限，而test2目录在创建时赋了711权限</li></ul></li><li><p>rmdir：删除一个空目录</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309211540035.png" alt="image-20230921154029005"> </p><ul><li>-p：连同上层空的目录一起删除</li></ul></li></ul><h3 id="关于执行文件路径的变量：-PATH"><a href="#关于执行文件路径的变量：-PATH" class="headerlink" title="关于执行文件路径的变量：$PATH"></a>关于执行文件路径的变量：$PATH</h3><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309211545003.png" alt="image-20230921154509981"> </p><p>为什么可以在任何地方执行/bin/ls命令？</p><p>因为无论是root还是用户自身账号都有/bin或/usr/bin这个目录在PATH变量内。/bin在CentOS7中就是链接的/usr/bin</p><h2 id="文件与目录管理"><a href="#文件与目录管理" class="headerlink" title="文件与目录管理"></a>文件与目录管理</h2><h3 id="文件与目录的查看：ls"><a href="#文件与目录的查看：ls" class="headerlink" title="文件与目录的查看：ls"></a>文件与目录的查看：ls</h3><p>当我们执行ls命令时，默认显示的只有：非隐藏的文件名、以文件名进行排序及文件名代表的颜色显示而已</p><ul><li>-a：全部文件，连同隐藏文件（开头为.的文件）一起列出来</li><li>-d：仅列出目录本身，而不是列出目录内的文件数据</li><li>-l：详细信息显示，包含文件的属性和权限等数据</li></ul><h3 id="复制、删除与移动：cp、rm、mv"><a href="#复制、删除与移动：cp、rm、mv" class="headerlink" title="复制、删除与移动：cp、rm、mv"></a>复制、删除与移动：cp、rm、mv</h3><ul><li><p>cp（复制文件）</p><ul><li><p>-a：相当于-dr –preserver=all的意思</p><ul><li><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309211611744.png" alt="image-20230921161100718"> </p></li><li><p>直接复制不加任何选项的话，文件的某些属性/权限会被改变</p></li><li><p>如果想要将文件的所有特性一起复制过来就要加-a</p></li></ul></li><li><p>-i：若目标文件已存在，在覆盖时会先询问操作的进行</p><ul><li><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309211604759.png" alt="image-20230921160451735"> </p></li><li><p>用root身份将home目录下的.bashrc复制到/tmp下，并更名为bashrc</p></li><li><p>由于第二次加上了-i选项，所以覆盖前会询问是否覆盖</p></li></ul></li><li><p>-p：连同文件的属性（权限、用户、时间）一起复制，而非使用默认属性</p></li><li><p>-r：递归复制，用于目录的复制操作</p><ul><li><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309211624437.png" alt="image-20230921162455415"> </li><li><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309211625042.png" alt="image-20230921162544018"> </li><li><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309211626642.png" alt="image-20230921162607621"> </li><li>复制/etc/这个目录下的所有内容到/tmp下面，-r选项是可以复制目录，但是文件和目录的权限可能会被改变</li></ul></li></ul></li><li><p>rm（删除文件或目录）</p><ul><li>-f：忽略不存在的文件，不会出现警告信息</li><li>-i：在删除前会询问使用者是否操作<ul><li><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309211639622.png" alt="image-20230921163946580"> </li><li>可以在文件名后面加上通配符*，就可以删掉以文件名开头的所有文件</li><li>将上面cp例子中建立的/tmp/etc这个目录删掉</li><li><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309211644272.png" alt="image-20230921164407249"> </li><li>删除一个带有-开头的文件</li><li><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309211646794.png" alt="image-20230921164601770"></li></ul></li><li>-r：递归删除（危险的选项）</li></ul></li><li><p>mv（移动文件与目录，或重命名）</p><ul><li>-f：强制，如果目标文件已存在，不会询问而直接覆盖</li><li>-i：目标文件已经存在时，询问是否覆盖</li><li>-u：目标文件已经存在时，且source比较新，才会更新</li><li><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309211649311.png" alt="image-20230921164944291"> 将某个文件移动到某个目录</li><li><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309211650159.png" alt="image-20230921165046137"> 对目录重命名</li><li><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309211651646.png" alt="image-20230921165144627"> 建立两个文件，再全部移动/tmp/mvtest2中</li><li><strong>如果有多个源文件或目录，则最后一个目标文件一定是目录</strong></li></ul></li></ul><h3 id="获取路径的文件名与目录名称"><a href="#获取路径的文件名与目录名称" class="headerlink" title="获取路径的文件名与目录名称"></a>获取路径的文件名与目录名称</h3><ul><li>获取文件名：basename</li><li>获取目录名：dirname</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309211655663.png" alt="image-20230921165552644"> </p><h2 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h2><ul><li>cat：由第一行开始显示文件内容</li><li>tac：从最后一行开始显示，可以看出tac是cat的倒着写</li><li>nl：显示的时候同时输出行号</li><li>more：一页一页地显示文件内容</li><li>less：与more类似，但是比more更好的是可以往前翻页</li><li>head：只看前面几行</li><li>tail：只看后面几行</li><li>od：以二进制的方式读取文件内容</li></ul><h3 id="直接查看文件内容"><a href="#直接查看文件内容" class="headerlink" title="直接查看文件内容"></a>直接查看文件内容</h3><p>直接查看文件内容可以用cat/tac/nl这几个命令</p><h4 id="cat-concatenate"><a href="#cat-concatenate" class="headerlink" title="cat(concatenate)"></a>cat(concatenate)</h4><ul><li>-A：相当于-vET的整合选项，可列出一些特殊字符而不是空白而已</li><li>-b：列出行号，仅针对非空白行做行号显示，空白行不标行号</li><li>-E：将结尾的换行符$显示出来</li><li>-n：打印出行号，连同空白行也会有行号，与-b的选项不同</li><li>-T：将【tab】按键以^I（大写i）显示出来</li><li>-v：列出一些看不出来的特殊字符</li></ul><p><strong>查看/etc/issue这个文件的内容</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309241011660.png" alt="image-20230924101120625"> </p><p><strong>加上打印行号</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309241012420.png" alt="image-20230924101253397"> </p><p><strong>不显示空白行的行号</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309241020912.png" alt="image-20230924102015892"> </p><p><strong>将/etc/man_db.conf的内容完整的显示出来（包含特殊字符）</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309241014300.png" alt="image-20230924101453264"> </p><h4 id="tac（反向列示）"><a href="#tac（反向列示）" class="headerlink" title="tac（反向列示）"></a>tac（反向列示）</h4><p>最后一行到第一行反向在屏幕上显示出来</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309241022786.png" alt="image-20230924102204762"> </p><h4 id="nl（添加行号打印）"><a href="#nl（添加行号打印）" class="headerlink" title="nl（添加行号打印）"></a>nl（添加行号打印）</h4><ul><li>-b：指定行号指定的方式，主要有两种：<ul><li>-b a：表示不论是否为空行，也同样列出行号（类似cat -n）</li><li>-b t：如果有空行，空的那一行不要列出行号</li></ul></li><li>-n：列出行号表示的方法，主要有三种<ul><li>-n ln：行号在屏幕的最左方显示</li><li>-n rn：行号在自己栏位的最右方显示，且不加0</li><li>-n rz：行号在自己栏位的最右方显示，且加0</li></ul></li><li>-w：行号栏位的占用的字符数</li></ul><p><strong>用nl列出/etc/issue的内容</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309241031439.png" alt="image-20230924103123413"> </p><p><strong>加上行号，包括空白行</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309241033388.png" alt="image-20230924103309361"> </p><p><strong>让行号前面自动补上0</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309241034144.png" alt="image-20230924103438123"> </p><p><strong>自动补0默认是6位数，把他改成三位数</strong></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309241056258.png" alt="image-20230924105641233"> </p><h3 id="可翻页查看（more-less）"><a href="#可翻页查看（more-less）" class="headerlink" title="可翻页查看（more &amp; less）"></a>可翻页查看（more &amp; less）</h3><h4 id="more（一页一页翻动）"><a href="#more（一页一页翻动）" class="headerlink" title="more（一页一页翻动）"></a>more（一页一页翻动）</h4><p>在more程序运行过程中：</p><ul><li>空格键（space）：代表向下翻一页</li><li>Enter：代表向下翻一行</li><li>/字符串：代表在这个显示的内容当中，向下查找字符串这个关键词</li><li>:f：立刻显示出文件名以及目前显示的行数</li><li>q：代表立刻离开more，不再显示该文件的内容</li><li>b或【ctrl】+b：代表往回翻页，只对文件有用，对管道无用</li></ul><h4 id="less"><a href="#less" class="headerlink" title="less"></a>less</h4><p>less的用法比起more又更加有弹性，在more的时候，我们并没有办法像前面饭，只能往后面看，less就可以使用【pageup】【pagedown】等按键的功能来往前往后翻看文件。在less程序运行过程中</p><ul><li>空格键：：向下翻动一页</li><li>【pagedown】：向下翻动一页</li><li>【pageup】：向上翻动一页</li><li>/字符串：向下查找字符串的功能</li><li>?字符串：向上查找字符串的功能</li><li>n：重复前一个查找（与/或?有关）</li><li>N：反向的重复前一个查找（与/或?有关）</li><li>g：前进到这个数据的第一行</li><li>G：前进到这个数据的最后一行</li><li>q：离开less这个程序</li></ul><h3 id="数据截取（head-tail）"><a href="#数据截取（head-tail）" class="headerlink" title="数据截取（head &amp; tail）"></a>数据截取（head &amp; tail）</h3><h4 id="head（取出前面几行）"><a href="#head（取出前面几行）" class="headerlink" title="head（取出前面几行）"></a>head（取出前面几行）</h4><ul><li><p>-n：后面接数字，代表显示几行的意思（不加-n的话默认显示前十行），如果是负数，例如-100，文件一共有131行，则只显示前31行</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309241536978.png" alt="image-20230924141755703"></p></li></ul><h4 id="tail（取出后面几行）"><a href="#tail（取出后面几行）" class="headerlink" title="tail（取出后面几行）"></a>tail（取出后面几行）</h4><ul><li><p>-n：后面接数字，代表显示几行的意思（不加-n默认显示后十行）</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309241536428.png" alt="image-20230924142250458"> </p><p>不知道man_db.conf有多少行但是想显示100行之后的数据</p></li><li><p>-f：表示持续刷新显示后面所接文件中的内容，要等到按下【ctrl】+ c才会结束</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309241536782.png" alt="image-20230924142715502"> </p></li><li><p>显示/etc/man_db.conf的第11行到20行？</p><p><code>head -n 20 /etc/man_db.conf | tail -n 10</code>：先取前20行，再去后10行</p></li><li><p>显示/etc/man_db.conf的第11行到20行且列出正确的行号？</p><p><code>cat -n /etc/man_db.conf | head -n 20 | tail -n 10</code></p></li></ul><h3 id="非纯文本文件：od"><a href="#非纯文本文件：od" class="headerlink" title="非纯文本文件：od"></a>非纯文本文件：od</h3><p>查看非纯文本文件，例如二进制文件时，用上面的命令来读取会导致乱码。利用这个命令可以将数据文件（data file）或者二进制文件（binary file）的内容数据读出来。</p><ul><li>-t：后面接各种参数<ul><li>a：利用默认的字符来输出</li><li>c：利用ASCII字符来输出</li><li>d[size]：利用十进制（decimal）来输出数据，每个整数占用size Bytes</li><li>f[size]：利用浮点数值（floating）来输出数据，每个数占用size Bytes</li><li>o[size]：利用八进制（octal）来输出数据，每个整数占用size Bytes</li><li>x[size]：利用十六进制（hexadecimal）来输出数据，每个整数占用size Bytes</li></ul></li></ul><p>将/usr/bin/passwd的内容使用ASCII方式来显示：</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309241536484.png" alt="image-20230924144825684"> </p><p>将/etc/issue这个文件的内容以八进制列出存储值与ASCII的对照表（最左边一列是以八进制来表示Bytes数，第二栏0000020代表开头是第16个byte(2x8)的内容的意思）</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309241537194.png" alt="image-20230924145841111"> </p><p>如果想立刻找到password这几个字的ASCII对照，该如何通过od命令来判断？</p><p><code>echo password | od -t oCc</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309241537243.png" alt="image-20230924150541264"> </p><h3 id="修改文件时间或创建新文件：touch"><a href="#修改文件时间或创建新文件：touch" class="headerlink" title="修改文件时间或创建新文件：touch"></a>修改文件时间或创建新文件：touch</h3><ul><li>修改时间（mtime）：当文件的【内容数据】变更时，就会更新这个时间，内容数据指的是文件的内容，而不是文件的属性或权限</li><li>状态时间（ctime）：当文件的【状态】改变时，就会更新这个时间，例如权限与属性被更改了就会更新这个时间</li><li>读取时间（atime）：当【文件内容被读取】时，就会更新这个读取时间，例如当我们使用cat命令来读取文件时，就会更新文件的atime</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309241537353.png" alt="image-20230924152805507"> </p><p>在默认情况下，ls显示出来的是该文件的mtime（修改时间）</p><ul><li><p>touch参数</p><ul><li><p>-a：仅自定义access time</p></li><li><p>-c：仅修改文件的时间，若该文件不存在则不建立新文件</p></li><li><p>-d：后面可以接自定义的日期而不用目前的日期，也可以使用–date=”日期或时间”</p></li><li><p>-m：仅修改mtime</p></li><li><p>-t ：后面可以接自定义的时间而不用目前的时间，格式为[YYYYMMDDhhmm]</p></li><li><p>创建一个新文件并观察时间</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309241633399.png" alt="image-20230924163318379"> </p></li><li><p>将~/.bashrc复制成为bashrc，复制完全的属性，检查其日期</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309241637642.png" alt="image-20230924163706613"> </p></li><li><p>将bashrc改到两天前</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309241642638.png" alt="image-20230924164205608"> </p></li><li><p>将上面的bashrc日期改为2013/07/15 2:34</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309241648329.png" alt="image-20230924164835305"></p></li></ul></li></ul><p><strong>无论如何，touch这个命令最常被使用的情况是</strong></p><ul><li>建立一个空文件</li><li>将某个文件日期自定义为目前（mtime与atime）</li></ul><h2 id="文件与目录的默认权限与隐藏权限"><a href="#文件与目录的默认权限与隐藏权限" class="headerlink" title="文件与目录的默认权限与隐藏权限"></a>文件与目录的默认权限与隐藏权限</h2><h3 id="文件默认权限：umask"><a href="#文件默认权限：umask" class="headerlink" title="文件默认权限：umask"></a>文件默认权限：umask</h3><p>umask：指定目前用户在建立文件或目录的时候的权限默认值</p><ul><li><p>直接输入umask就可以看到数字类型的权限设置值（与一般权限有关的是后面三个数字）</p></li><li><p>在后面接上-S这个选项就会以符号类型的方式来显示出权限</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309261407699.png" alt="image-20230926140750613"></p></li></ul><p>在默认情况下</p><ul><li>对于文件：因为文件默认没有可执行的权限（x），所以只有rw两个权限，也就是最大为666<ul><li>-rw-rw-rw-</li></ul></li><li>对于目录：因为x权限与是否可以进入此目录有关，所以默认为所有权限均开放<ul><li>drwxrwxrwx</li></ul></li></ul><p>umask的数字是 <strong>该默认值需要减掉的权限</strong>。如果要拿掉能写的权限就要输入2以此类推</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309261444914.png" alt="image-20230926144457854"> </p><p>文件默认创建是-rw-rw-rw-，因为查出来的umask默认权限是022（后三个数字），groups和others都被拿掉了2（w）这个权限，所以查出来的就是-rwr–r–这个样子</p><p><strong>umask是可以被设置的</strong></p><p>命令格式：<code>umask 权限数字</code></p><p><code>umask 022</code></p><h3 id="文件隐藏属性"><a href="#文件隐藏属性" class="headerlink" title="文件隐藏属性"></a>文件隐藏属性</h3><p>chattr命令只能在ext2、ext3、ext4的Linux传统文件系统上面完整生效</p><h4 id="chattr（配置文件隐藏属性）"><a href="#chattr（配置文件隐藏属性）" class="headerlink" title="chattr（配置文件隐藏属性）"></a>chattr（配置文件隐藏属性）</h4><p><code>chattr [+-=][ASacdistu] 文件或目录名称</code></p><p>比较常用的几个选项</p><ul><li>a：文件只能增加数据，而不能删除也不能修改数据，只有root才能设置这个属性</li><li>i：可以让一个文件不能被删除、改名、设置连接也无法写入或新增数据，对于系统安全性有很大的助益，只有root才能设置此权限</li><li>S：当你进行任何文件的修改，该修改会同步写入磁盘中</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309261508317.png" alt="image-20230926150849258"> </p><p>设置了i属性后连root都无法删除，只能取消i属性才能删掉</p><h4 id="lsattr（显示文件隐藏属性）"><a href="#lsattr（显示文件隐藏属性）" class="headerlink" title="lsattr（显示文件隐藏属性）"></a>lsattr（显示文件隐藏属性）</h4><p><code>lsattr [-adR] 文件或目录</code></p><ul><li>a：将隐藏文件的属性也显示出来</li><li>d：如果接的是目录，仅列出目录本身的属性而非目录内的文件名</li><li>R：连同子目录的数据也一并列出来</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309261515843.png" alt="image-20230926151512773"> </p><h3 id="文件特殊权限：SUID、SGID、SBIT"><a href="#文件特殊权限：SUID、SGID、SBIT" class="headerlink" title="文件特殊权限：SUID、SGID、SBIT"></a>文件特殊权限：SUID、SGID、SBIT</h3><ul><li><p>SUID</p><p>当s这个标志出现在文件拥有者的x权限上时，例如【-rwsr-xr-x】此时就被称为Set UID，成为SUID的特殊权限</p><ul><li>SUID权限仅对二进制程序（binary program）有效</li><li>执行者对于该程序需要具有x的可执行权限</li><li>本权限仅在执行该程序的过程中有效</li><li>执行者将具有该程序拥有者（owner）的权限</li></ul></li></ul><p>例如：feliks对于passwd这个程序来说是具有x的权限，表示feliks能执行passwd；passwd的拥有者是root这个账号；feliks执行passwd的过程中，会暂时获得root权限，这是/etc/shadow就可以被feliks所执行的passwd所修改。</p><p><strong>SUID仅仅只能使用在二进制程序上，不能够用在shell脚本上面</strong></p><ul><li><p>SGID</p><p>当s这个标志出现在用户组的x权限上，此时称为Set GID</p><p>与SUID不一样的是，SGID可以针对文件或目录来设置</p><p>对文件来说：</p><ul><li>SGID对二进制程序有用</li><li>程序执行者对于该程序来说，需具备x的权限</li><li>执行者在执行的过程中会将获得该程序用户组的支持</li></ul><p>例如：文件locate的权限【-rwx–s–x 1 root slocate】，当我们用feliks这个账户去执行locate时，feliks就会获得slocate用户组的支持</p><p>对目录来说：</p><ul><li>用户如果对此目录有r和x的权限，该用户也能够进入此目录</li><li>用户在此目录下的有效用户组（effective group）将会变成该目录的用户组</li><li>用途：如果用户在此目录下具有w的权限（可以新建文件），则用户所建立的新文件，该新文件的用户组与目录的用户组一致</li></ul></li><li><p>SBIT</p><p>Sticky Bit只针对目录有效，对于文件已经没有效果了，SBIT对于目录的作用是</p><ul><li>当用户对于此目录具有w、x权限，即具有写入的权限</li><li>当用户在该目录建立文件或目录时，仅有自己与root才有权力删除该文件</li></ul><p>例如：在一个目录A内，甲对于A有groups和others的身份，并且拥有该目录的w权限，这表示甲可以对A目录内任何人创建的目录或文件均可删除，但是如果给A加上SBIT权限，则甲只能针对自己建立的文件或目录进行删除、更名、移动等操作</p></li></ul><h3 id="观察文件类型：file"><a href="#观察文件类型：file" class="headerlink" title="观察文件类型：file"></a>观察文件类型：file</h3><p>可以让我们知道文件属于ASCII文件还是数据（data）文件还是二进制（binary）文件</p><p><code>file 文件路径</code></p><h2 id="命令与文件的查找"><a href="#命令与文件的查找" class="headerlink" title="命令与文件的查找"></a>命令与文件的查找</h2><h3 id="脚本文件的查找"><a href="#脚本文件的查找" class="headerlink" title="脚本文件的查找"></a>脚本文件的查找</h3><ul><li><p>which（查找【执行文件】）</p><ul><li><p>-a：将所有由PATH目录中可以找到的命令列出，而不知第一个被找到的命令名称</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309271107930.png" alt="image-20230927110734873"> </p></li><li><p>which命令是找不到history命令的，因为history是bash内置的命令，which默认是找PATH内所设置的目录</p></li></ul></li></ul><h3 id="文件的查找"><a href="#文件的查找" class="headerlink" title="文件的查找"></a>文件的查找</h3><ul><li><p>whereis</p><ul><li><code>whereis [-bmsu] 文件或目录名</code></li><li>-l：可以列出whereis会去查询的几个主要目录</li><li>-b：只找binary（二进制）格式的文件</li><li>-m：只找在说明文件manual路径下的文件</li><li>-s：执照source源文件</li><li>-u：查找不在上述三个项目当中的其他特殊文件</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309271116437.png" alt="image-20230927111606399"> </p></li><li><p>locate / updatedb</p><ul><li>-i：忽略大小写的差异</li><li>-c：不输出文件名，仅计算找到的文件数量</li><li>-l：仅输出几行，例如五行则是<code>-l 5</code></li><li>-S：输出locate所使用的数据库文件的相关信息，包括该数据库记录的文件/目录数量等</li><li>-r：后面可接正则表达式的显示方式</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309271120697.png" alt="image-20230927112046673"> </p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309271121632.png" alt="image-20230927112126603"> </p></li><li><p>updatedb：根据/etc/updatedb.conf的设置去查找系统硬盘内的文件，并更新/var/lib/mlocate内的数据库文件</p></li><li><p>locate：依据/var/lib/mlocate内的数据库记录，找出用户所输入关键词的文件名</p></li><li><p>find</p><ul><li><code>find [PATH] [option] [action]</code></li><li>-mtime n：n是数字，意义是在n天前的【一天之内】被修改过内容的文件</li><li>-mtime +n：列出在n天之前（不包含n天本身）被修改过内容的文件</li><li>-mtime -n：列出在n天之内（包含n天本身）被修改过内容的文件</li><li>-newer file：file是一个实际存在的文件，列出比file还要新的文件</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309271129825.png" alt="image-20230927112947789"> </p><p>寻找/etc下的文件，文件日期比/etc/passwd新就列出</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309271132720.png" alt="image-20230927113216687"> </p><ul><li>-uid n：n为数字，这个数字是使用者的账号ID，UID记录在/etc/passwd里面</li><li>-gid n：n为数字，哦这个数字是用户组名称的ID，GID记录在/etc/group里面</li><li>-user name：name为使用者账号名称</li><li>-group name：name为用户组名称</li><li>-nouser：查找文件的拥有者不在/etc/passwd当中</li><li>-nogroup：查找文件的拥有用户组不存在于/etc/group的文件</li></ul><p>查找home下面属于feliks的文件</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309301427860.png" alt="image-20230930142704801"> </p><ul><li><p><strong>-name filename</strong>：查找文件名称为filename的文件</p></li><li><p><strong>-size [+-]SIZE</strong>：查找比SIZE还要大或小的文件，这个SIZE的规格如下</p><ul><li>c：代表Bytes</li><li>k：代表1024Bytes（查找比50kb还要大的文件【-size +50k】）</li></ul></li><li><p><strong>-type TYPE</strong>：查找文件的类型为TYPE的，类型主要有：</p><ul><li>一般正规文件：f</li><li>设备文件：b,c</li><li>目录：d</li><li>链接文件：l</li><li>socket：s</li><li>FIFO：p</li></ul></li><li><p><strong>-perm mode</strong>：查找文件权限【刚好等于】mode的文件</p></li><li><p><strong>-perm -mode</strong>：查找文件权限【必须要全部囊括mode的权限】的文件（例如要找【-rwxr–r–】的文件，因为【-rwxr-xr-x】囊括了【-rwxr–r–】权限，所以也会被查出来）</p></li><li><p><strong>-perm /mode</strong>：查找文件权限【包含任一mode的权限】的文件（例如要查找【-rwxr-xr-x】，但是【rw——-】也会被查出来，因为有【-rw】属性存在）</p><p>找出文件名为passwd的文件</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310070805485.png" alt="image-20231007080529174"> </p><p>找出文件名钟包含了passwd这个关键字的文件</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310070807508.png" alt="image-20231007080734453"> </p><p>找出/run目录下文件类型为socket的文件名有哪些</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310070810093.png" alt="image-20231007081005040"> </p><p>查找文件当中含有SGID、SUID或SBIT的属性</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202310072001719.png" alt="image-20231007200121664"></p></li></ul></li></ul><h2 id="复习（权限与命令之间的关系）"><a href="#复习（权限与命令之间的关系）" class="headerlink" title="复习（权限与命令之间的关系）"></a>复习（权限与命令之间的关系）</h2><ol><li>让用户能进入某目录成为可工作目录的基本权限？<ul><li>可使用的命令：cd等变换工作目录的命令</li><li>目录需要的权限：<strong>用户对这个目录至少需要有x的权限</strong></li><li>额外需求：如果用户想要在这个目录内利用ls查看文件名，则还需要用户对此目录有r的权限</li></ul></li><li>用户在某个目录内读取一个文件的基本权限？<ul><li>可使用的命令：cat、more、less等</li><li>目录需要的权限：用户对这个目录至少需要有x的权限</li><li>文件需要的权限：<strong>用户对文件至少需要有r的权限</strong></li></ul></li><li>让用户可以修改一个文件的基本权限是？<ul><li>可使用的命令：nano或vi编辑器</li><li>目录需要的权限：用户在该文件所在的目录至少要有x的权限</li><li>文件需要的权限：<strong>用户对该文件至少要有r、w权限</strong></li></ul></li><li>让一个用户可以建立一个文件的基本权限是什么<ul><li>目录需要的权限：<strong>用户在该目录要具有w、x的权限，重点是w</strong></li></ul></li><li>让用户进入某目录并执行该目录下的某个命令的基本权限？<ul><li>目录需要的权限：用户在该目录至少要有x的权限</li><li>文件需要的权限：用户在该文件至少要有x的权限</li></ul></li></ol><ul><li>文件具有SUID的特殊权限时，代表当用户执行此二进制程序时，在执行过程中用户会暂时具有程序拥有者的权限</li><li>目录具有SGID的特殊权限时，代表用户再这个目录下面新建的文件的用户组都会于该目录的组名相同</li><li>目录具有SBIT的特殊权限时，代表用户在这个目录下面新建的文件只有自己与root能删除</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux3.0 目录配置</title>
      <link href="/2024/04/08/linux-3.0-mu-lu-pei-zhi/"/>
      <url>/2024/04/08/linux-3.0-mu-lu-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux目录配置"><a href="#Linux目录配置" class="headerlink" title="Linux目录配置"></a>Linux目录配置</h1><h3 id="Linux目录配置的依据——FHS"><a href="#Linux目录配置的依据——FHS" class="headerlink" title="Linux目录配置的依据——FHS"></a>Linux目录配置的依据——FHS</h3><table><thead><tr><th></th><th>可分享（shareable）</th><th>不可分享（unshareable）</th></tr></thead><tbody><tr><td>不变（static）</td><td>/usr（软件存放处）</td><td>/etc（配置文件）</td></tr><tr><td></td><td>/opt（第三方辅助软件）</td><td>/boot（启动与内核文件）</td></tr><tr><td>可变（variable）</td><td>/var/mail（用户邮箱）</td><td>/var/run（程序相关）</td></tr><tr><td></td><td>/var/spool/news（新闻组）</td><td>/var/lock（程序相关）</td></tr></tbody></table><ul><li>shareable：可以分享给其他系统挂在使用的目录</li><li>unshareable：自己机器上面运行的设备文件或是与程序有关的socket文件等，仅与自身机器相关</li><li>static：不会经常变动的数据</li><li>variable：经常修改的数据，日志文件、一般用户可自行接收的新闻组等</li><li>/（root，根目录）：与启动系统有关<ul><li>所在的分区越小越好</li></ul></li><li>/usr（unix software resource）：与软件安装/执行有关<ul><li>Unix操作系统软件资源所放置的目录</li></ul></li><li>/var（variable）：与系统运行过程有关<ul><li>缓存、日志文件以及某些软件运行所产生的文件，主要是一些经常性变动的文件</li></ul></li></ul><h3 id="目录树（directory-tree）"><a href="#目录树（directory-tree）" class="headerlink" title="目录树（directory tree）"></a>目录树（directory tree）</h3><p>特性：</p><ul><li>目录树的启始点为根目录（/， root）</li><li>每一个目录不止能使用本地分区的文件系统，也可以使用网络上的文件系统</li><li>每个文件在此目录树中的文件名（包含完整路径）都是独一无二的</li></ul><h3 id="绝对路径-相对路径"><a href="#绝对路径-相对路径" class="headerlink" title="绝对路径&amp;相对路径"></a>绝对路径&amp;相对路径</h3><ul><li>./：代表当前目录</li><li>../：代表上一层目录</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux2.0 文件权限概念</title>
      <link href="/2024/04/08/linux-2.0-wen-jian-quan-xian-gai-nian/"/>
      <url>/2024/04/08/linux-2.0-wen-jian-quan-xian-gai-nian/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux文件权限概念"><a href="#Linux文件权限概念" class="headerlink" title="Linux文件权限概念"></a>Linux文件权限概念</h1><p>作为一个初学者，文件的权限与属性是学习Linux相当重要的一环，如果屏幕中出现了【Permission deny】的时候，肯定是权限设置错误。</p><h2 id="Linux文件属性"><a href="#Linux文件属性" class="headerlink" title="Linux文件属性"></a>Linux文件属性</h2><p>【ls】是一个查看文件的命令</p><p>【su -】切换身份为root</p><p>登录自己账户系统后，使用【su -】切换身份，执行【ls -al】看看</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309200832684.png" alt="image-20230920083217640"> </p><p><strong>本章后续的chgrp、chown等命令可能都需要使用root的身份才能够处理，所以建议用root的身份来学习，但是不建议直接用root登录系统，建议使用【su -】来切换身份，离开root则使用exit回到Feliks（自己的账号）即可</strong></p><p>ls是list的意思，重点在显示文件的文件名和相关属性，而选项【-al】则表示列出所有的文件详细的权限与属性（包含隐藏文件，就是文件名第一个字符为【.】的文件）</p><p>-rw-r–r–. 1 root root 1857 8月 15 11:39 initial-setup-ks.cfg</p><ul><li><p>第一栏-rw-r–r–：文件的类型与权限（permission）</p><ul><li>第一个字符代表这个文件是目录、文件或链接文件等:</li><li>当为【d】则是目录，例如图里的【.config】文件</li><li>当为【-】则是文件，例如图里的【initial- setup- ks.cfg】文件</li><li>若是【l】则表示为链接文件（link file）</li><li>若是【b】则表示为设备文件里面的 可供存储的周边设备</li><li>若是【c】则表示为设备文件里面的串行端口设备，例如键盘、鼠标等</li><li>接下来的字符是三个为一组且均为【rwx】的三个参数的组合。<ul><li>第一组：文件拥有者可具备的权限</li><li>第二组：加入此用户组的账号的权限</li><li>第三组：非本人且没有加入本用户组的其他账号的权限</li><li>r：可读（read）</li><li>w：可写（write）</li><li>x：可执行（execute）</li><li>如果没有权限则是【-】</li></ul></li></ul><p>例：【-rwxr-xr–】意义？</p><p>[-] :1  [rwx] : 234  [r-x] : 567  [r–] : 890</p><p>1是代表这个文件名为目录或文件</p><p>234是拥有者的权限（可读可写可执行）</p><p>567是同用户组的用户权限（可读可执行）</p><p>890是其他用户权限（可读）</p></li><li><p>第二栏1：表示有多少文件名链接到此节点（inode）</p><ul><li>每个文件都会将他的权限与属性记录到文件系统的inode中，</li></ul></li><li><p>第三栏root：表示这个文件（或目录）的拥有者账号</p></li><li><p>第四栏root：表示这个文件的所属用户组</p><ul><li>在Linux系统中，一个账号会加入一个或多个用户组中。</li></ul></li><li><p>第五栏1857：表示这个文件的容量大小，默认单位是Bytes</p></li><li><p>第六栏：表示这个文件的创建日期或者是最近的修改日期</p><ul><li>如果这个文件被修改的时间距离现在太久，那么时间部分会仅显示年份而已</li><li>显示完整的时间格式：【ls -l –full-time】</li></ul></li><li><p>第七栏：表示文件名</p></li></ul><p><strong>文件和目录是不一样的，目录如果没有x权限则不能进入</strong></p><h2 id="如何修改文件属性与权限"><a href="#如何修改文件属性与权限" class="headerlink" title="如何修改文件属性与权限"></a>如何修改文件属性与权限</h2><ul><li><p>chgrp：修改文件所属用户组</p></li><li><p>chown：修改文件拥有者</p></li><li><p>chmod：修改文件的权限，SUID、SGID、SBIT等特性</p></li></ul><h3 id="修改所属用户组chgrp"><a href="#修改所属用户组chgrp" class="headerlink" title="修改所属用户组chgrp"></a>修改所属用户组chgrp</h3><p><strong>change group的缩写</strong></p><p>命令：<code>chgrp -R dirname/filename</code></p><ul><li>-R：进行递归（recursive）修改，连同子目录下的所有文件、目录都更新成为这个用户组的意思，常常用来修改某一目录内所有的文件的情况</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309201058714.png" alt="image-20230920105857692"> </p><p>文件的用户组被修改成了users</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309241652837.png" alt="image-20230920110008058"> </p><p>因为testing组不存在，所以修改用户组失败</p><h3 id="修改文件拥有者chown"><a href="#修改文件拥有者chown" class="headerlink" title="修改文件拥有者chown"></a>修改文件拥有者chown</h3><p><strong>change owner的缩写</strong></p><p>命令：</p><p><code>chown -R 账号名称 文件或目录  </code></p><p><code>chown -R 账号名称:用户组名称 文件或目录  </code></p><ul><li>-R：进行递归（recursive）修改，连同子目录下的所有文件都修改</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309201107487.png" alt="image-20230920110753464"> </p><p>文件的拥有者被修改成了bin这个账号</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309201109827.png" alt="image-20230920110923809"> </p><p>把文件的拥有者和用户组改回root</p><p><strong>事实上，chown也可以使用【chown user.group file】，但是有些人喜欢设置账号的时候加小数点，这样会造成系统的误判，所以还是比较建议使用【:】</strong></p><p><strong>什么时候使用chgrp、chown？比如要把文件复制给另一个人的时候，会把拥有者和用户组也给复制过去，这时就要用chgrp和chown来修改别人才能修改</strong></p><h3 id="修改权限chmod"><a href="#修改权限chmod" class="headerlink" title="修改权限chmod"></a>修改权限chmod</h3><p>权限的设置方法有两种：数字或者符号</p><h4 id="数字类型修改文件权限"><a href="#数字类型修改文件权限" class="headerlink" title="数字类型修改文件权限"></a>数字类型修改文件权限</h4><p>r:4</p><p>w:2</p><p>x:1</p><p>rwx权限=4+2+1=7</p><p>例如：【-rwxrwx—】owner=rwx=7group=rwx=7others=—=0</p><p>所以权限数字就是770</p><p>命令：</p><p><code>chmod -R xyz 文件或目录</code></p><ul><li>xyz：就是上面的数字类型的权限属性，rwx属性数值相加</li><li>-R：进行递归（recursive）修改，连同子目录下的所有文件都会修改</li></ul><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309201418200.png" alt="image-20230920141837160"> </p><h4 id="符号类型修改文件权限"><a href="#符号类型修改文件权限" class="headerlink" title="符号类型修改文件权限"></a>符号类型修改文件权限</h4><p>u：user</p><p>g：group</p><p>o：other</p><p>a：all</p><p>+：加入</p><p>-：移除</p><p>=：设置</p><p>命令：</p><p><code>chmod u=rwx,g=rwx,o=rwx [filename]</code></p><p>如果要设置文件【-rwxr-xr-x】</p><p><code>chmod u=rwx,go=rx .bashrc</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309201427645.png" alt="image-20230920142734622"> </p><p>只想增加某个文件所有人都可以写入的权限：</p><p><code>chmod a+w .bashrc</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202309201431222.png" alt="image-20230920143151195"> </p><h2 id="目录与文件的权限意义"><a href="#目录与文件的权限意义" class="headerlink" title="目录与文件的权限意义"></a>目录与文件的权限意义</h2><ul><li><p>权限对文件的重要性</p><ul><li>文件是实际含有数据的地方，包括一般文本文件，数据库文件，二进制可执行文件（binary program）等</li><li>r（read）：可读取此文件的实际内容，如读取文本文件的文字内容等</li><li>w（write）：可以编辑、新增或是修改该文件的内容（但不包含删除文件）</li><li>x（execute）：该文件具有可以被系统执行的权限</li></ul><p><strong>在Linux下，文件是否能被执行，是借由是否具有x这个权限来决定的，和文件名后缀没有绝对的关系</strong></p></li><li><p>权限对目录的重要性</p><ul><li><p>目录主要的内容在记录文件名列表，文件名与目录有强烈的关联</p></li><li><p>r（read contents in directory）：表示具有读取目录结构列表的权限，有该权限代表可以查询该目录下的文件名数据，可以利用ls命令将目录的内容列表展示出来</p></li><li><p>w（modify contents of directory）：表示具有改动该目录结构列表的权限</p><ul><li>建立新的文件与目录的权限</li><li>删除已经存在的文件和目录权限（无论该文件的权限是什么）</li><li>将已存在的文件或目录进行更名的权限</li><li>移动该目录内的文件、目录位置的权限</li></ul></li><li><p>x（access directory）：目录的x权限代表用户是否能进入该目录成为工作目录的用途</p><ul><li><p>工作目录就是当前所在的目录</p></li><li><p>例：有目录是<code>drwxr--r-- root root</code>这样的权限，系统有个账号为vbird，并不支持root组，那vbird对此目录有何权限？</p><p>答：vbird对此目录仅具有r的权限，因此vbird可以查询此目录下的文件名列表，但是因为没有x权限，所以不能切换到此目录内</p></li></ul></li></ul></li></ul><h2 id="Linux文件种类与扩展名"><a href="#Linux文件种类与扩展名" class="headerlink" title="Linux文件种类与扩展名"></a>Linux文件种类与扩展名</h2><p>除了前面的一般文件【-】和目录文件【d】之外还有别的种类的文件</p><ul><li><p>文件种类</p><ul><li>常规文件<ul><li>纯文本文件（ASCII）：是Linux系统中最多的一种文件类型，可以直接执行【cat ~/ .bashrc】就可以看到文件的内容</li><li>二进制文件（binary）</li><li>数据文件（data）</li></ul></li><li>目录（directory）：第一个属性为【d】</li><li>链接文件（link）：第一个属性为【l】</li><li>设备与设备文件（device）<ul><li>区块（block）设备文件：第一个属性为【b】，硬盘和软盘就是</li><li>字符（character）设备文件：第一个属性为【c】，串行端口的接口设备，硬盘和鼠标就是</li></ul></li><li>数据接口文件（sockets）：第一个属性为【s】</li><li>数据输送文件（FIFO，pipe）：first-in-first-out，管道，第一个属性为【p】</li></ul></li><li><p>Linux文件扩展名：一个Linux文件能否被执行，与他的第一栏是个属性有关，与文件名没有一点关系，只要权限有【x】，则代表这个文件具有可以被执行的能力</p><ul><li>.sh：脚本或批处理文件</li><li>.Z .tar .tar.gz .zip .tgz：压缩文件</li></ul></li><li><p>Linux文件名长度限制</p><ul><li>单一文件或目录最大容许文件名是255字节</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux1.0 用户与用户组</title>
      <link href="/2024/04/08/linux-1.0-yong-hu-yu-yong-hu-zu/"/>
      <url>/2024/04/08/linux-1.0-yong-hu-yu-yong-hu-zu/</url>
      
        <content type="html"><![CDATA[<h1 id="用户与用户组"><a href="#用户与用户组" class="headerlink" title="用户与用户组"></a>用户与用户组</h1><h2 id="1-文件拥有者"><a href="#1-文件拥有者" class="headerlink" title="1.文件拥有者"></a>1.文件拥有者</h2><p>由于Linux是一个多人多任务的系统，因此可能常常会有多人同时使用这台主机来进行工作的情况，为了考虑每个人的隐私权以及每个人喜好的工作环境，因此文件拥有者这个角色就显得尤为重要</p><h3 id="添加新的用户账号"><a href="#添加新的用户账号" class="headerlink" title="添加新的用户账号"></a>添加新的用户账号</h3><p><code>useradd</code> 选项 用户名</p><ul><li>-c comment 指定一段注释性描述</li><li>-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录</li><li>-g 用户组 指定用户所属的用户组</li><li>-G 用户组，用户组 指定用户所属的附加组</li><li>-s Shell文件 指定用户的登录Shell</li><li>-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号</li></ul><p>例：</p><p>创建一个用户sam，其中-d和-m选项用来为登录名sam产生一个主目录/home/sam</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202403261511264.png" alt="image-20240326151054166"> </p><p>创建一个用户gem，该用户的登录Shell是/bin/sh，属于group用户组，同时又属于adm和root用户组，其中group用户组是其主组</p><p>① 创建用户组</p><p>② 创建用户</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202403261516118.png" alt="image-20240326151600042"> </p><h3 id="删除用户账号"><a href="#删除用户账号" class="headerlink" title="删除用户账号"></a>删除用户账号</h3><p><code>userdel</code> 选项 用户名</p><p>-r 把用户的主目录一起删除</p><p>例：</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202403261521134.png" alt="image-20240326152150103"> </p><h3 id="修改账号"><a href="#修改账号" class="headerlink" title="修改账号"></a>修改账号</h3><p><code>usermod</code> 选项 用户名</p><ul><li>-c comment 指定一段注释性描述</li><li>-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录</li><li>-g 用户组 指定用户所属的用户组</li><li>-G 用户组，用户组 指定用户所属的附加组</li><li>-s Shell文件 指定用户的登录Shell</li><li>-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号</li><li>-o 可以重复使用其他用户的标识号</li></ul><p>例：</p><p>将sam的登录shell改为ksh，主目录改为/home/z，用户组改为developer</p><p><code>usermod -s /bin/ksh -d /home/z -g developer sam</code></p><h3 id="用户口令管理"><a href="#用户口令管理" class="headerlink" title="用户口令管理"></a>用户口令管理</h3><p><code>passwd</code> 选项  用户名</p><ul><li>-l 锁定口令，即禁用账号</li><li>-u 口令解锁</li><li>-d 使账号无口令</li><li>-f 强迫用户下次登陆时修改口令</li></ul><p>例：</p><p>为用户指定空口令</p><p><code>passwd -d sam</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202403271046966.png" alt="image-20240327104615873"> </p><p>删除sam的密码，使sam下一次登陆时系统不允许该用户登录</p><p><code>passwd -l sam</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202403271047714.png" alt="image-20240327104742684"> </p><h2 id="2-用户组的概念"><a href="#2-用户组的概念" class="headerlink" title="2.用户组的概念"></a>2.用户组的概念</h2><p>进行团队协同工作时非常有用。</p><p>用户组相当于一个个社团，内部成员就是用户组内的成员，同时一个账号可以有多个用户组的支持，可以理解为多个社团有同一个指导老师</p><h3 id="新增用户组"><a href="#新增用户组" class="headerlink" title="新增用户组"></a>新增用户组</h3><p><code>groupadd</code> 选项 用户组</p><ul><li>-g GID 指定新用户组的组标识号（GID）</li><li>-o 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同</li></ul><p>例：</p><p>向系统中新增组group1，新租的组标识号使当前已有的最大组标识号的基础上加一</p><p><code>groupadd group1</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202403271419882.png" alt="image-20240327141926804"> </p><p>向系统中增加了一个新组group2，同时指定新组的组标识号是101</p><p><code>groupadd -g 101 group2</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202403271421211.png" alt="image-20240327142107182"> </p><h3 id="删除一个已有的用户组"><a href="#删除一个已有的用户组" class="headerlink" title="删除一个已有的用户组"></a>删除一个已有的用户组</h3><p><code>groupdel</code> 用户组</p><p>例：</p><p>删除组group1</p><p><code>groupdel gruop1</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202403271436290.png" alt="image-20240327143643249"> </p><h3 id="修改用户组的属性"><a href="#修改用户组的属性" class="headerlink" title="修改用户组的属性"></a>修改用户组的属性</h3><p><code>groupmod</code> 选项 用户组</p><ul><li>-g GID 为用户组指定新的组标识号</li><li>-o 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同</li><li>-n 新用户组 将用户组的名字改为新名字</li></ul><p>例：</p><p>将group2的组标识号改为102</p><p><code>groupmod -g 102 group2</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202403271440777.png" alt="image-20240327144027748"> </p><p>将group2的组标识号改为10000，组名修改为group3</p><p><code>groupmod -g 10000 -n group3 group2</code></p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202403271441457.png" alt="image-20240327144135427"> </p><p><strong>如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限</strong></p><p>用户可以在登陆后，使用newgrp切换到其他用户组，参数就是目的用户组</p><p><code>newgrp root</code></p><p>将当前用户切换到root用户组，前提是root用户组确实是该用户的主组或附加组。</p><h2 id="3-其他人的概念"><a href="#3-其他人的概念" class="headerlink" title="3.其他人的概念"></a>3.其他人的概念</h2><p>不是该用户组的成员都是其他人，在Linux里，任何一个文件都具有用户（User）、所属群组（Group）、其他人（Others）三种身份的个别权限。</p><p>root是万能的！。</p><p><strong>Linux用户身份与用户组记录的文件</strong></p><p>在Linux系统中，默认情况下所有系统上的账号与一般身份用户，还有那个root的相关信息，都记录在/etc/passwd这个文件内，至于个人的密码则是记录在/etc/shadow这个文件内，此外，Linux所有的组名都记录在/etc/group中。这三个文件可以说是Linux系统里面账号密码用户组信息的集中地，不要随便删除。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis7-1.0-基础</title>
      <link href="/2024/04/08/redis7-1.0-gai-shu/"/>
      <url>/2024/04/08/redis7-1.0-gai-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis入门概述"><a href="#Redis入门概述" class="headerlink" title="Redis入门概述"></a>Redis入门概述</h1><p>redis能干嘛？</p><ol><li><p>分布式缓存，挡在mysql数据库前的带刀护卫</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921837.png" alt="image-20231023223346032"> </p></li><li><p>内存存储和持久化（RDB+AOF），redis支持将内存中的数据写到硬盘上，同时不影响继续服务</p></li><li><p>高可用架构搭配</p><ul><li>单机</li><li>主从</li><li>哨兵</li><li>集群</li></ul></li><li><p>缓存穿透、击穿、雪崩</p></li><li><p>分布式锁</p></li><li><p>队列</p></li><li><p>排行榜+点赞</p></li></ol><p>总体功能概述</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921991.png" alt="image-20231023224035644"> </p><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ol><li><p>性能极高：Redis读的速度：110000次/秒，写的速度：81000次/秒</p></li><li><p>Redis数据类型丰富，不仅仅支持键值对类型的数据，同时还提供：</p><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921869.png" alt="image-20231023224257302"> </p></li><li><p>Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启时直接加载硬盘中的数据进行使用</p></li><li><p>Redis支持数据备份，即master-slave模式</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921042.png" alt="image-20231023224910603"> </p><h2 id="Redis7新特性"><a href="#Redis7新特性" class="headerlink" title="Redis7新特性"></a>Redis7新特性</h2><p><img src="https://felikstypora.oss-cn-guangzhou.aliyuncs.com/202404080921189.png" alt="image-20231023230446939"> </p><p><strong>关闭redis服务器</strong>：</p><ul><li>单实例关闭：<code>redis-cli -a 123456 shutdown</code></li><li>多实例关闭，指定端口关闭：redis-cli -p 6379 shutdown</li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/04/07/hello-world/"/>
      <url>/2024/04/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
